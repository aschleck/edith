// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CDOTAUserMsg_AIDebugLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_AIDebugLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_Ping_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_Ping_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ChatEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ChatEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_CombatLogData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_CombatLogData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_CombatLogShowDeath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_CombatLogShowDeath_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_BotChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_BotChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_CombatHeroPositions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_CombatHeroPositions_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MiniKillCamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MiniKillCamInfo_Attacker_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlobalLightColor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_GlobalLightColor_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlobalLightDirection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_GlobalLightDirection_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_LocationPing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_LocationPing_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MinimapEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MinimapEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MapLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MapLine_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_MinimapDebugPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_MinimapDebugPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_CreateLinearProjectile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_CreateLinearProjectile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_DestroyLinearProjectile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_DestroyLinearProjectile_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_DodgeTrackingProjectiles_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_DodgeTrackingProjectiles_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_SpectatorPlayerClick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_SpectatorPlayerClick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_NevermoreRequiem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_NevermoreRequiem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_InvalidCommand_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_InvalidCommand_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_HudError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_HudError_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_SharedCooldown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_SharedCooldown_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_SetNextAutobuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_SetNextAutobuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAResponseQuerySerialized_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAResponseQuerySerialized_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAResponseQuerySerialized_Fact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAResponseQuerySerialized_Fact_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CDOTAResponseQuerySerialized_Fact_ValueType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CDOTASpeechMatchOnClient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTASpeechMatchOnClient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_Speech_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_Speech_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_SpeechMute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_SpeechMute_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_AddGesture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_AddGesture_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_RemoveGesture_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_BloodImpact_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_BloodImpact_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_FadeGesture_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_UnitEvent_FadeGesture_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemPurchased_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ItemPurchased_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemFound_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ItemFound_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_CreateParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_CreateParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_DestroyParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleLatency_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleLatency_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_OverheadEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_OverheadEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialTipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAUserMsg_TutorialTipInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EDotaUserMessages_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_CHAT_MESSAGE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_NO_BATTLE_POINTS_REASONS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_CHAT_INFORMATIONAL_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_COMBATLOG_TYPES_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EDotaEntityMessages_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_PARTICLE_MESSAGE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_OVERHEAD_ALERT_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fusermessages_2eproto() {
  protobuf_AddDesc_dota_5fusermessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_usermessages.proto");
  GOOGLE_CHECK(file != NULL);
  CDOTAUserMsg_AIDebugLine_descriptor_ = file->message_type(0);
  static const int CDOTAUserMsg_AIDebugLine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AIDebugLine, message_),
  };
  CDOTAUserMsg_AIDebugLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_AIDebugLine_descriptor_,
      CDOTAUserMsg_AIDebugLine::default_instance_,
      CDOTAUserMsg_AIDebugLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AIDebugLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_AIDebugLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_AIDebugLine));
  CDOTAUserMsg_Ping_descriptor_ = file->message_type(1);
  static const int CDOTAUserMsg_Ping_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_Ping, message_),
  };
  CDOTAUserMsg_Ping_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_Ping_descriptor_,
      CDOTAUserMsg_Ping::default_instance_,
      CDOTAUserMsg_Ping_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_Ping, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_Ping, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_Ping));
  CDOTAUserMsg_ChatEvent_descriptor_ = file->message_type(2);
  static const int CDOTAUserMsg_ChatEvent_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, playerid_6_),
  };
  CDOTAUserMsg_ChatEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ChatEvent_descriptor_,
      CDOTAUserMsg_ChatEvent::default_instance_,
      CDOTAUserMsg_ChatEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ChatEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ChatEvent));
  CDOTAUserMsg_CombatLogData_descriptor_ = file->message_type(3);
  static const int CDOTAUserMsg_CombatLogData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogData, target_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogData, attacker_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogData, attacker_illusion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogData, target_illusion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogData, inflictor_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogData, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogData, health_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogData, time_),
  };
  CDOTAUserMsg_CombatLogData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_CombatLogData_descriptor_,
      CDOTAUserMsg_CombatLogData::default_instance_,
      CDOTAUserMsg_CombatLogData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_CombatLogData));
  CDOTAUserMsg_CombatLogShowDeath_descriptor_ = file->message_type(4);
  static const int CDOTAUserMsg_CombatLogShowDeath_offsets_[1] = {
  };
  CDOTAUserMsg_CombatLogShowDeath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_CombatLogShowDeath_descriptor_,
      CDOTAUserMsg_CombatLogShowDeath::default_instance_,
      CDOTAUserMsg_CombatLogShowDeath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogShowDeath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatLogShowDeath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_CombatLogShowDeath));
  CDOTAUserMsg_BotChat_descriptor_ = file->message_type(5);
  static const int CDOTAUserMsg_BotChat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, message_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, target_),
  };
  CDOTAUserMsg_BotChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_BotChat_descriptor_,
      CDOTAUserMsg_BotChat::default_instance_,
      CDOTAUserMsg_BotChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_BotChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_BotChat));
  CDOTAUserMsg_CombatHeroPositions_descriptor_ = file->message_type(6);
  static const int CDOTAUserMsg_CombatHeroPositions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, world_pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, health_),
  };
  CDOTAUserMsg_CombatHeroPositions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_CombatHeroPositions_descriptor_,
      CDOTAUserMsg_CombatHeroPositions::default_instance_,
      CDOTAUserMsg_CombatHeroPositions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CombatHeroPositions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_CombatHeroPositions));
  CDOTAUserMsg_MiniKillCamInfo_descriptor_ = file->message_type(7);
  static const int CDOTAUserMsg_MiniKillCamInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo, attackers_),
  };
  CDOTAUserMsg_MiniKillCamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MiniKillCamInfo_descriptor_,
      CDOTAUserMsg_MiniKillCamInfo::default_instance_,
      CDOTAUserMsg_MiniKillCamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MiniKillCamInfo));
  CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_ = CDOTAUserMsg_MiniKillCamInfo_descriptor_->nested_type(0);
  static const int CDOTAUserMsg_MiniKillCamInfo_Attacker_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, attacker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, total_damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, abilities_),
  };
  CDOTAUserMsg_MiniKillCamInfo_Attacker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_,
      CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance_,
      CDOTAUserMsg_MiniKillCamInfo_Attacker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MiniKillCamInfo_Attacker));
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor_ = CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_->nested_type(0);
  static const int CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, damage_),
  };
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor_,
      CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance_,
      CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability));
  CDOTAUserMsg_GlobalLightColor_descriptor_ = file->message_type(8);
  static const int CDOTAUserMsg_GlobalLightColor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, duration_),
  };
  CDOTAUserMsg_GlobalLightColor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_GlobalLightColor_descriptor_,
      CDOTAUserMsg_GlobalLightColor::default_instance_,
      CDOTAUserMsg_GlobalLightColor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightColor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_GlobalLightColor));
  CDOTAUserMsg_GlobalLightDirection_descriptor_ = file->message_type(9);
  static const int CDOTAUserMsg_GlobalLightDirection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, direction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, duration_),
  };
  CDOTAUserMsg_GlobalLightDirection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_GlobalLightDirection_descriptor_,
      CDOTAUserMsg_GlobalLightDirection::default_instance_,
      CDOTAUserMsg_GlobalLightDirection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_GlobalLightDirection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_GlobalLightDirection));
  CDOTAUserMsg_LocationPing_descriptor_ = file->message_type(10);
  static const int CDOTAUserMsg_LocationPing_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_LocationPing, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_LocationPing, location_ping_),
  };
  CDOTAUserMsg_LocationPing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_LocationPing_descriptor_,
      CDOTAUserMsg_LocationPing::default_instance_,
      CDOTAUserMsg_LocationPing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_LocationPing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_LocationPing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_LocationPing));
  CDOTAUserMsg_MinimapEvent_descriptor_ = file->message_type(11);
  static const int CDOTAUserMsg_MinimapEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, entity_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, duration_),
  };
  CDOTAUserMsg_MinimapEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MinimapEvent_descriptor_,
      CDOTAUserMsg_MinimapEvent::default_instance_,
      CDOTAUserMsg_MinimapEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MinimapEvent));
  CDOTAUserMsg_MapLine_descriptor_ = file->message_type(12);
  static const int CDOTAUserMsg_MapLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MapLine, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MapLine, mapline_),
  };
  CDOTAUserMsg_MapLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MapLine_descriptor_,
      CDOTAUserMsg_MapLine::default_instance_,
      CDOTAUserMsg_MapLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MapLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MapLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MapLine));
  CDOTAUserMsg_MinimapDebugPoint_descriptor_ = file->message_type(13);
  static const int CDOTAUserMsg_MinimapDebugPoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, duration_),
  };
  CDOTAUserMsg_MinimapDebugPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_MinimapDebugPoint_descriptor_,
      CDOTAUserMsg_MinimapDebugPoint::default_instance_,
      CDOTAUserMsg_MinimapDebugPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_MinimapDebugPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_MinimapDebugPoint));
  CDOTAUserMsg_CreateLinearProjectile_descriptor_ = file->message_type(14);
  static const int CDOTAUserMsg_CreateLinearProjectile_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, origin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, particle_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, handle_),
  };
  CDOTAUserMsg_CreateLinearProjectile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_CreateLinearProjectile_descriptor_,
      CDOTAUserMsg_CreateLinearProjectile::default_instance_,
      CDOTAUserMsg_CreateLinearProjectile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_CreateLinearProjectile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_CreateLinearProjectile));
  CDOTAUserMsg_DestroyLinearProjectile_descriptor_ = file->message_type(15);
  static const int CDOTAUserMsg_DestroyLinearProjectile_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DestroyLinearProjectile, handle_),
  };
  CDOTAUserMsg_DestroyLinearProjectile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_DestroyLinearProjectile_descriptor_,
      CDOTAUserMsg_DestroyLinearProjectile::default_instance_,
      CDOTAUserMsg_DestroyLinearProjectile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DestroyLinearProjectile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DestroyLinearProjectile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_DestroyLinearProjectile));
  CDOTAUserMsg_DodgeTrackingProjectiles_descriptor_ = file->message_type(16);
  static const int CDOTAUserMsg_DodgeTrackingProjectiles_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, entindex_),
  };
  CDOTAUserMsg_DodgeTrackingProjectiles_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_DodgeTrackingProjectiles_descriptor_,
      CDOTAUserMsg_DodgeTrackingProjectiles::default_instance_,
      CDOTAUserMsg_DodgeTrackingProjectiles_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_DodgeTrackingProjectiles, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_DodgeTrackingProjectiles));
  CDOTAUserMsg_SpectatorPlayerClick_descriptor_ = file->message_type(17);
  static const int CDOTAUserMsg_SpectatorPlayerClick_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, order_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, target_index_),
  };
  CDOTAUserMsg_SpectatorPlayerClick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_SpectatorPlayerClick_descriptor_,
      CDOTAUserMsg_SpectatorPlayerClick::default_instance_,
      CDOTAUserMsg_SpectatorPlayerClick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SpectatorPlayerClick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_SpectatorPlayerClick));
  CDOTAUserMsg_NevermoreRequiem_descriptor_ = file->message_type(18);
  static const int CDOTAUserMsg_NevermoreRequiem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, entity_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, lines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, origin_),
  };
  CDOTAUserMsg_NevermoreRequiem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_NevermoreRequiem_descriptor_,
      CDOTAUserMsg_NevermoreRequiem::default_instance_,
      CDOTAUserMsg_NevermoreRequiem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_NevermoreRequiem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_NevermoreRequiem));
  CDOTAUserMsg_InvalidCommand_descriptor_ = file->message_type(19);
  static const int CDOTAUserMsg_InvalidCommand_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_InvalidCommand, message_),
  };
  CDOTAUserMsg_InvalidCommand_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_InvalidCommand_descriptor_,
      CDOTAUserMsg_InvalidCommand::default_instance_,
      CDOTAUserMsg_InvalidCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_InvalidCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_InvalidCommand, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_InvalidCommand));
  CDOTAUserMsg_HudError_descriptor_ = file->message_type(20);
  static const int CDOTAUserMsg_HudError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HudError, order_id_),
  };
  CDOTAUserMsg_HudError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_HudError_descriptor_,
      CDOTAUserMsg_HudError::default_instance_,
      CDOTAUserMsg_HudError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HudError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_HudError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_HudError));
  CDOTAUserMsg_SharedCooldown_descriptor_ = file->message_type(21);
  static const int CDOTAUserMsg_SharedCooldown_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, cooldown_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, name_index_),
  };
  CDOTAUserMsg_SharedCooldown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_SharedCooldown_descriptor_,
      CDOTAUserMsg_SharedCooldown::default_instance_,
      CDOTAUserMsg_SharedCooldown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SharedCooldown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_SharedCooldown));
  CDOTAUserMsg_SetNextAutobuyItem_descriptor_ = file->message_type(22);
  static const int CDOTAUserMsg_SetNextAutobuyItem_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SetNextAutobuyItem, name_),
  };
  CDOTAUserMsg_SetNextAutobuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_SetNextAutobuyItem_descriptor_,
      CDOTAUserMsg_SetNextAutobuyItem::default_instance_,
      CDOTAUserMsg_SetNextAutobuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SetNextAutobuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_SetNextAutobuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_SetNextAutobuyItem));
  CDOTAResponseQuerySerialized_descriptor_ = file->message_type(23);
  static const int CDOTAResponseQuerySerialized_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized, facts_),
  };
  CDOTAResponseQuerySerialized_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAResponseQuerySerialized_descriptor_,
      CDOTAResponseQuerySerialized::default_instance_,
      CDOTAResponseQuerySerialized_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAResponseQuerySerialized));
  CDOTAResponseQuerySerialized_Fact_descriptor_ = CDOTAResponseQuerySerialized_descriptor_->nested_type(0);
  static const int CDOTAResponseQuerySerialized_Fact_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, valtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, val_numeric_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, val_string_),
  };
  CDOTAResponseQuerySerialized_Fact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAResponseQuerySerialized_Fact_descriptor_,
      CDOTAResponseQuerySerialized_Fact::default_instance_,
      CDOTAResponseQuerySerialized_Fact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAResponseQuerySerialized_Fact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAResponseQuerySerialized_Fact));
  CDOTAResponseQuerySerialized_Fact_ValueType_descriptor_ = CDOTAResponseQuerySerialized_Fact_descriptor_->enum_type(0);
  CDOTASpeechMatchOnClient_descriptor_ = file->message_type(24);
  static const int CDOTASpeechMatchOnClient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, concept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, recipient_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, responsequery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, randomseed_),
  };
  CDOTASpeechMatchOnClient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTASpeechMatchOnClient_descriptor_,
      CDOTASpeechMatchOnClient::default_instance_,
      CDOTASpeechMatchOnClient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTASpeechMatchOnClient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTASpeechMatchOnClient));
  CDOTAUserMsg_UnitEvent_descriptor_ = file->message_type(25);
  static const int CDOTAUserMsg_UnitEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, msg_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, entity_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, speech_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, speech_mute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, add_gesture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, remove_gesture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, blood_impact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, fade_gesture_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, speech_match_on_client_),
  };
  CDOTAUserMsg_UnitEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_descriptor_,
      CDOTAUserMsg_UnitEvent::default_instance_,
      CDOTAUserMsg_UnitEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent));
  CDOTAUserMsg_UnitEvent_Speech_descriptor_ = CDOTAUserMsg_UnitEvent_descriptor_->nested_type(0);
  static const int CDOTAUserMsg_UnitEvent_Speech_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, concept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, response_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, recipient_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, muteable_),
  };
  CDOTAUserMsg_UnitEvent_Speech_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_Speech_descriptor_,
      CDOTAUserMsg_UnitEvent_Speech::default_instance_,
      CDOTAUserMsg_UnitEvent_Speech_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_Speech, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent_Speech));
  CDOTAUserMsg_UnitEvent_SpeechMute_descriptor_ = CDOTAUserMsg_UnitEvent_descriptor_->nested_type(1);
  static const int CDOTAUserMsg_UnitEvent_SpeechMute_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_SpeechMute, delay_),
  };
  CDOTAUserMsg_UnitEvent_SpeechMute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_SpeechMute_descriptor_,
      CDOTAUserMsg_UnitEvent_SpeechMute::default_instance_,
      CDOTAUserMsg_UnitEvent_SpeechMute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_SpeechMute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_SpeechMute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent_SpeechMute));
  CDOTAUserMsg_UnitEvent_AddGesture_descriptor_ = CDOTAUserMsg_UnitEvent_descriptor_->nested_type(2);
  static const int CDOTAUserMsg_UnitEvent_AddGesture_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, slot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, fade_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, fade_out_),
  };
  CDOTAUserMsg_UnitEvent_AddGesture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_AddGesture_descriptor_,
      CDOTAUserMsg_UnitEvent_AddGesture::default_instance_,
      CDOTAUserMsg_UnitEvent_AddGesture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_AddGesture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent_AddGesture));
  CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor_ = CDOTAUserMsg_UnitEvent_descriptor_->nested_type(3);
  static const int CDOTAUserMsg_UnitEvent_RemoveGesture_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_RemoveGesture, activity_),
  };
  CDOTAUserMsg_UnitEvent_RemoveGesture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor_,
      CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance_,
      CDOTAUserMsg_UnitEvent_RemoveGesture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_RemoveGesture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_RemoveGesture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent_RemoveGesture));
  CDOTAUserMsg_UnitEvent_BloodImpact_descriptor_ = CDOTAUserMsg_UnitEvent_descriptor_->nested_type(4);
  static const int CDOTAUserMsg_UnitEvent_BloodImpact_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, x_normal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, y_normal_),
  };
  CDOTAUserMsg_UnitEvent_BloodImpact_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_BloodImpact_descriptor_,
      CDOTAUserMsg_UnitEvent_BloodImpact::default_instance_,
      CDOTAUserMsg_UnitEvent_BloodImpact_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_BloodImpact, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent_BloodImpact));
  CDOTAUserMsg_UnitEvent_FadeGesture_descriptor_ = CDOTAUserMsg_UnitEvent_descriptor_->nested_type(5);
  static const int CDOTAUserMsg_UnitEvent_FadeGesture_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_FadeGesture, activity_),
  };
  CDOTAUserMsg_UnitEvent_FadeGesture_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_UnitEvent_FadeGesture_descriptor_,
      CDOTAUserMsg_UnitEvent_FadeGesture::default_instance_,
      CDOTAUserMsg_UnitEvent_FadeGesture_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_FadeGesture, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_UnitEvent_FadeGesture, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_UnitEvent_FadeGesture));
  CDOTAUserMsg_ItemPurchased_descriptor_ = file->message_type(26);
  static const int CDOTAUserMsg_ItemPurchased_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemPurchased, item_index_),
  };
  CDOTAUserMsg_ItemPurchased_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ItemPurchased_descriptor_,
      CDOTAUserMsg_ItemPurchased::default_instance_,
      CDOTAUserMsg_ItemPurchased_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemPurchased, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemPurchased, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ItemPurchased));
  CDOTAUserMsg_ItemFound_descriptor_ = file->message_type(27);
  static const int CDOTAUserMsg_ItemFound_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, rarity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, itemdef_),
  };
  CDOTAUserMsg_ItemFound_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ItemFound_descriptor_,
      CDOTAUserMsg_ItemFound::default_instance_,
      CDOTAUserMsg_ItemFound_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ItemFound, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ItemFound));
  CDOTAUserMsg_ParticleManager_descriptor_ = file->message_type(28);
  static const int CDOTAUserMsg_ParticleManager_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, release_particle_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, create_particle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, destroy_particle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, destroy_particle_involving_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_fwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_orient_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_fallback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_ent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, update_particle_should_draw_),
  };
  CDOTAUserMsg_ParticleManager_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_descriptor_,
      CDOTAUserMsg_ParticleManager::default_instance_,
      CDOTAUserMsg_ParticleManager_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager));
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(0);
  static const int CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_offsets_[1] = {
  };
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_,
      CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_,
      CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex));
  CDOTAUserMsg_ParticleManager_CreateParticle_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(1);
  static const int CDOTAUserMsg_ParticleManager_CreateParticle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, particle_name_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, attach_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, entity_handle_),
  };
  CDOTAUserMsg_ParticleManager_CreateParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_CreateParticle_descriptor_,
      CDOTAUserMsg_ParticleManager_CreateParticle::default_instance_,
      CDOTAUserMsg_ParticleManager_CreateParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_CreateParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_CreateParticle));
  CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(2);
  static const int CDOTAUserMsg_ParticleManager_DestroyParticle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticle, destroy_immediately_),
  };
  CDOTAUserMsg_ParticleManager_DestroyParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor_,
      CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance_,
      CDOTAUserMsg_ParticleManager_DestroyParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_DestroyParticle));
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(3);
  static const int CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving, destroy_immediately_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving, entity_handle_),
  };
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_,
      CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_,
      CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving));
  CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(4);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticle, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticle, position_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticle));
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(5);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleFwd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFwd, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFwd, forward_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleFwd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFwd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFwd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleFwd));
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(6);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, forward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, right_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, up_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleOrient_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOrient, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleOrient));
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(7);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleFallback_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFallback, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFallback, position_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleFallback_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFallback, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleFallback, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleFallback));
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(8);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleOffset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOffset, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOffset, origin_offset_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleOffset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOffset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleOffset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleOffset));
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(9);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, control_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, entity_handle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, attach_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, attachment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, fallback_position_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleEnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleEnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleEnt));
  CDOTAUserMsg_ParticleManager_UpdateParticleLatency_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(10);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleLatency_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleLatency, player_latency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleLatency, tick_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleLatency_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleLatency_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleLatency::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleLatency_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleLatency, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleLatency, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleLatency));
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_ = CDOTAUserMsg_ParticleManager_descriptor_->nested_type(11);
  static const int CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw, should_draw_),
  };
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_,
      CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_,
      CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw));
  CDOTAUserMsg_OverheadEvent_descriptor_ = file->message_type(29);
  static const int CDOTAUserMsg_OverheadEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, target_player_entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, target_entindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, source_player_entindex_),
  };
  CDOTAUserMsg_OverheadEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_OverheadEvent_descriptor_,
      CDOTAUserMsg_OverheadEvent::default_instance_,
      CDOTAUserMsg_OverheadEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_OverheadEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_OverheadEvent));
  CDOTAUserMsg_TutorialTipInfo_descriptor_ = file->message_type(30);
  static const int CDOTAUserMsg_TutorialTipInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialTipInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialTipInfo, progress_),
  };
  CDOTAUserMsg_TutorialTipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAUserMsg_TutorialTipInfo_descriptor_,
      CDOTAUserMsg_TutorialTipInfo::default_instance_,
      CDOTAUserMsg_TutorialTipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialTipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAUserMsg_TutorialTipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAUserMsg_TutorialTipInfo));
  EDotaUserMessages_descriptor_ = file->enum_type(0);
  DOTA_CHAT_MESSAGE_descriptor_ = file->enum_type(1);
  DOTA_NO_BATTLE_POINTS_REASONS_descriptor_ = file->enum_type(2);
  DOTA_CHAT_INFORMATIONAL_descriptor_ = file->enum_type(3);
  DOTA_COMBATLOG_TYPES_descriptor_ = file->enum_type(4);
  EDotaEntityMessages_descriptor_ = file->enum_type(5);
  DOTA_PARTICLE_MESSAGE_descriptor_ = file->enum_type(6);
  DOTA_OVERHEAD_ALERT_descriptor_ = file->enum_type(7);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fusermessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_AIDebugLine_descriptor_, &CDOTAUserMsg_AIDebugLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_Ping_descriptor_, &CDOTAUserMsg_Ping::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ChatEvent_descriptor_, &CDOTAUserMsg_ChatEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_CombatLogData_descriptor_, &CDOTAUserMsg_CombatLogData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_CombatLogShowDeath_descriptor_, &CDOTAUserMsg_CombatLogShowDeath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_BotChat_descriptor_, &CDOTAUserMsg_BotChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_CombatHeroPositions_descriptor_, &CDOTAUserMsg_CombatHeroPositions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MiniKillCamInfo_descriptor_, &CDOTAUserMsg_MiniKillCamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_, &CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor_, &CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_GlobalLightColor_descriptor_, &CDOTAUserMsg_GlobalLightColor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_GlobalLightDirection_descriptor_, &CDOTAUserMsg_GlobalLightDirection::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_LocationPing_descriptor_, &CDOTAUserMsg_LocationPing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MinimapEvent_descriptor_, &CDOTAUserMsg_MinimapEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MapLine_descriptor_, &CDOTAUserMsg_MapLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_MinimapDebugPoint_descriptor_, &CDOTAUserMsg_MinimapDebugPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_CreateLinearProjectile_descriptor_, &CDOTAUserMsg_CreateLinearProjectile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_DestroyLinearProjectile_descriptor_, &CDOTAUserMsg_DestroyLinearProjectile::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_DodgeTrackingProjectiles_descriptor_, &CDOTAUserMsg_DodgeTrackingProjectiles::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_SpectatorPlayerClick_descriptor_, &CDOTAUserMsg_SpectatorPlayerClick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_NevermoreRequiem_descriptor_, &CDOTAUserMsg_NevermoreRequiem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_InvalidCommand_descriptor_, &CDOTAUserMsg_InvalidCommand::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_HudError_descriptor_, &CDOTAUserMsg_HudError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_SharedCooldown_descriptor_, &CDOTAUserMsg_SharedCooldown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_SetNextAutobuyItem_descriptor_, &CDOTAUserMsg_SetNextAutobuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAResponseQuerySerialized_descriptor_, &CDOTAResponseQuerySerialized::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAResponseQuerySerialized_Fact_descriptor_, &CDOTAResponseQuerySerialized_Fact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTASpeechMatchOnClient_descriptor_, &CDOTASpeechMatchOnClient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_descriptor_, &CDOTAUserMsg_UnitEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_Speech_descriptor_, &CDOTAUserMsg_UnitEvent_Speech::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_SpeechMute_descriptor_, &CDOTAUserMsg_UnitEvent_SpeechMute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_AddGesture_descriptor_, &CDOTAUserMsg_UnitEvent_AddGesture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor_, &CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_BloodImpact_descriptor_, &CDOTAUserMsg_UnitEvent_BloodImpact::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_UnitEvent_FadeGesture_descriptor_, &CDOTAUserMsg_UnitEvent_FadeGesture::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ItemPurchased_descriptor_, &CDOTAUserMsg_ItemPurchased::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ItemFound_descriptor_, &CDOTAUserMsg_ItemFound::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_descriptor_, &CDOTAUserMsg_ParticleManager::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_, &CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_CreateParticle_descriptor_, &CDOTAUserMsg_ParticleManager_CreateParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor_, &CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_, &CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleLatency_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleLatency::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_, &CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_OverheadEvent_descriptor_, &CDOTAUserMsg_OverheadEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAUserMsg_TutorialTipInfo_descriptor_, &CDOTAUserMsg_TutorialTipInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fusermessages_2eproto() {
  delete CDOTAUserMsg_AIDebugLine::default_instance_;
  delete CDOTAUserMsg_AIDebugLine_reflection_;
  delete CDOTAUserMsg_Ping::default_instance_;
  delete CDOTAUserMsg_Ping_reflection_;
  delete CDOTAUserMsg_ChatEvent::default_instance_;
  delete CDOTAUserMsg_ChatEvent_reflection_;
  delete CDOTAUserMsg_CombatLogData::default_instance_;
  delete CDOTAUserMsg_CombatLogData_reflection_;
  delete CDOTAUserMsg_CombatLogShowDeath::default_instance_;
  delete CDOTAUserMsg_CombatLogShowDeath_reflection_;
  delete CDOTAUserMsg_BotChat::default_instance_;
  delete CDOTAUserMsg_BotChat_reflection_;
  delete CDOTAUserMsg_CombatHeroPositions::default_instance_;
  delete CDOTAUserMsg_CombatHeroPositions_reflection_;
  delete CDOTAUserMsg_MiniKillCamInfo::default_instance_;
  delete CDOTAUserMsg_MiniKillCamInfo_reflection_;
  delete CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance_;
  delete CDOTAUserMsg_MiniKillCamInfo_Attacker_reflection_;
  delete CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance_;
  delete CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_reflection_;
  delete CDOTAUserMsg_GlobalLightColor::default_instance_;
  delete CDOTAUserMsg_GlobalLightColor_reflection_;
  delete CDOTAUserMsg_GlobalLightDirection::default_instance_;
  delete CDOTAUserMsg_GlobalLightDirection_reflection_;
  delete CDOTAUserMsg_LocationPing::default_instance_;
  delete CDOTAUserMsg_LocationPing_reflection_;
  delete CDOTAUserMsg_MinimapEvent::default_instance_;
  delete CDOTAUserMsg_MinimapEvent_reflection_;
  delete CDOTAUserMsg_MapLine::default_instance_;
  delete CDOTAUserMsg_MapLine_reflection_;
  delete CDOTAUserMsg_MinimapDebugPoint::default_instance_;
  delete CDOTAUserMsg_MinimapDebugPoint_reflection_;
  delete CDOTAUserMsg_CreateLinearProjectile::default_instance_;
  delete CDOTAUserMsg_CreateLinearProjectile_reflection_;
  delete CDOTAUserMsg_DestroyLinearProjectile::default_instance_;
  delete CDOTAUserMsg_DestroyLinearProjectile_reflection_;
  delete CDOTAUserMsg_DodgeTrackingProjectiles::default_instance_;
  delete CDOTAUserMsg_DodgeTrackingProjectiles_reflection_;
  delete CDOTAUserMsg_SpectatorPlayerClick::default_instance_;
  delete CDOTAUserMsg_SpectatorPlayerClick_reflection_;
  delete CDOTAUserMsg_NevermoreRequiem::default_instance_;
  delete CDOTAUserMsg_NevermoreRequiem_reflection_;
  delete CDOTAUserMsg_InvalidCommand::default_instance_;
  delete CDOTAUserMsg_InvalidCommand_reflection_;
  delete CDOTAUserMsg_HudError::default_instance_;
  delete CDOTAUserMsg_HudError_reflection_;
  delete CDOTAUserMsg_SharedCooldown::default_instance_;
  delete CDOTAUserMsg_SharedCooldown_reflection_;
  delete CDOTAUserMsg_SetNextAutobuyItem::default_instance_;
  delete CDOTAUserMsg_SetNextAutobuyItem_reflection_;
  delete CDOTAResponseQuerySerialized::default_instance_;
  delete CDOTAResponseQuerySerialized_reflection_;
  delete CDOTAResponseQuerySerialized_Fact::default_instance_;
  delete CDOTAResponseQuerySerialized_Fact_reflection_;
  delete CDOTASpeechMatchOnClient::default_instance_;
  delete CDOTASpeechMatchOnClient_reflection_;
  delete CDOTAUserMsg_UnitEvent::default_instance_;
  delete CDOTAUserMsg_UnitEvent_reflection_;
  delete CDOTAUserMsg_UnitEvent_Speech::default_instance_;
  delete CDOTAUserMsg_UnitEvent_Speech_reflection_;
  delete CDOTAUserMsg_UnitEvent_SpeechMute::default_instance_;
  delete CDOTAUserMsg_UnitEvent_SpeechMute_reflection_;
  delete CDOTAUserMsg_UnitEvent_AddGesture::default_instance_;
  delete CDOTAUserMsg_UnitEvent_AddGesture_reflection_;
  delete CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance_;
  delete CDOTAUserMsg_UnitEvent_RemoveGesture_reflection_;
  delete CDOTAUserMsg_UnitEvent_BloodImpact::default_instance_;
  delete CDOTAUserMsg_UnitEvent_BloodImpact_reflection_;
  delete CDOTAUserMsg_UnitEvent_FadeGesture::default_instance_;
  delete CDOTAUserMsg_UnitEvent_FadeGesture_reflection_;
  delete CDOTAUserMsg_ItemPurchased::default_instance_;
  delete CDOTAUserMsg_ItemPurchased_reflection_;
  delete CDOTAUserMsg_ItemFound::default_instance_;
  delete CDOTAUserMsg_ItemFound_reflection_;
  delete CDOTAUserMsg_ParticleManager::default_instance_;
  delete CDOTAUserMsg_ParticleManager_reflection_;
  delete CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_;
  delete CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_reflection_;
  delete CDOTAUserMsg_ParticleManager_CreateParticle::default_instance_;
  delete CDOTAUserMsg_ParticleManager_CreateParticle_reflection_;
  delete CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance_;
  delete CDOTAUserMsg_ParticleManager_DestroyParticle_reflection_;
  delete CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_;
  delete CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticle_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleFwd_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleOrient_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleFallback_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleOffset_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleEnt_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleLatency::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleLatency_reflection_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_;
  delete CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_reflection_;
  delete CDOTAUserMsg_OverheadEvent::default_instance_;
  delete CDOTAUserMsg_OverheadEvent_reflection_;
  delete CDOTAUserMsg_TutorialTipInfo::default_instance_;
  delete CDOTAUserMsg_TutorialTipInfo_reflection_;
}

void protobuf_AddDesc_dota_5fusermessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::protobuf_AddDesc_netmessages_2eproto();
  ::protobuf_AddDesc_ai_5factivity_2eproto();
  ::protobuf_AddDesc_dota_5fcommonmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027dota_usermessages.proto\032 google/protob"
    "uf/descriptor.proto\032\021netmessages.proto\032\021"
    "ai_activity.proto\032\031dota_commonmessages.p"
    "roto\"+\n\030CDOTAUserMsg_AIDebugLine\022\017\n\007mess"
    "age\030\001 \001(\t\"$\n\021CDOTAUserMsg_Ping\022\017\n\007messag"
    "e\030\001 \001(\t\"\357\001\n\026CDOTAUserMsg_ChatEvent\0226\n\004ty"
    "pe\030\001 \002(\0162\022.DOTA_CHAT_MESSAGE:\024CHAT_MESSA"
    "GE_INVALID\022\r\n\005value\030\002 \001(\r\022\026\n\nplayerid_1\030"
    "\003 \001(\021:\002-1\022\026\n\nplayerid_2\030\004 \001(\021:\002-1\022\026\n\npla"
    "yerid_3\030\005 \001(\021:\002-1\022\026\n\nplayerid_4\030\006 \001(\021:\002-"
    "1\022\026\n\nplayerid_5\030\007 \001(\021:\002-1\022\026\n\nplayerid_6\030"
    "\010 \001(\021:\002-1\"\375\001\n\032CDOTAUserMsg_CombatLogData"
    "\022:\n\004type\030\001 \001(\0162\025.DOTA_COMBATLOG_TYPES:\025D"
    "OTA_COMBATLOG_DAMAGE\022\023\n\013target_name\030\002 \001("
    "\r\022\025\n\rattacker_name\030\003 \001(\r\022\031\n\021attacker_ill"
    "usion\030\004 \001(\010\022\027\n\017target_illusion\030\005 \001(\010\022\026\n\016"
    "inflictor_name\030\006 \001(\r\022\r\n\005value\030\007 \001(\005\022\016\n\006h"
    "ealth\030\010 \001(\005\022\014\n\004time\030\t \001(\002\"!\n\037CDOTAUserMs"
    "g_CombatLogShowDeath\"Z\n\024CDOTAUserMsg_Bot"
    "Chat\022\021\n\tplayer_id\030\001 \001(\r\022\016\n\006format\030\002 \001(\t\022"
    "\017\n\007message\030\003 \001(\t\022\016\n\006target\030\004 \001(\t\"q\n CDOT"
    "AUserMsg_CombatHeroPositions\022\r\n\005index\030\001 "
    "\001(\r\022\014\n\004time\030\002 \001(\005\022 \n\tworld_pos\030\003 \001(\0132\r.C"
    "MsgVector2D\022\016\n\006health\030\004 \001(\005\"\375\001\n\034CDOTAUse"
    "rMsg_MiniKillCamInfo\0229\n\tattackers\030\001 \003(\0132"
    "&.CDOTAUserMsg_MiniKillCamInfo.Attacker\032"
    "\241\001\n\010Attacker\022\020\n\010attacker\030\001 \001(\r\022\024\n\014total_"
    "damage\030\002 \001(\005\022A\n\tabilities\030\003 \003(\0132..CDOTAU"
    "serMsg_MiniKillCamInfo.Attacker.Ability\032"
    "*\n\007Ability\022\017\n\007ability\030\001 \001(\r\022\016\n\006damage\030\002 "
    "\001(\005\"@\n\035CDOTAUserMsg_GlobalLightColor\022\r\n\005"
    "color\030\001 \001(\r\022\020\n\010duration\030\002 \001(\002\"U\n!CDOTAUs"
    "erMsg_GlobalLightDirection\022\036\n\tdirection\030"
    "\001 \001(\0132\013.CMsgVector\022\020\n\010duration\030\002 \001(\002\"]\n\031"
    "CDOTAUserMsg_LocationPing\022\021\n\tplayer_id\030\001"
    " \001(\r\022-\n\rlocation_ping\030\002 \001(\0132\026.CDOTAMsg_L"
    "ocationPing\"n\n\031CDOTAUserMsg_MinimapEvent"
    "\022\022\n\nevent_type\030\001 \001(\005\022\025\n\rentity_handle\030\002 "
    "\001(\005\022\t\n\001x\030\003 \001(\005\022\t\n\001y\030\004 \001(\005\022\020\n\010duration\030\005 "
    "\001(\005\"M\n\024CDOTAUserMsg_MapLine\022\021\n\tplayer_id"
    "\030\001 \001(\005\022\"\n\007mapline\030\002 \001(\0132\021.CDOTAMsg_MapLi"
    "ne\"n\n\036CDOTAUserMsg_MinimapDebugPoint\022\035\n\010"
    "location\030\001 \001(\0132\013.CMsgVector\022\r\n\005color\030\002 \001"
    "(\r\022\014\n\004size\030\003 \001(\005\022\020\n\010duration\030\004 \001(\002\"\256\001\n#C"
    "DOTAUserMsg_CreateLinearProjectile\022\033\n\006or"
    "igin\030\001 \001(\0132\013.CMsgVector\022\037\n\010velocity\030\002 \001("
    "\0132\r.CMsgVector2D\022\017\n\007latency\030\003 \001(\005\022\020\n\010ent"
    "index\030\004 \001(\005\022\026\n\016particle_index\030\005 \001(\005\022\016\n\006h"
    "andle\030\006 \001(\005\"6\n$CDOTAUserMsg_DestroyLinea"
    "rProjectile\022\016\n\006handle\030\001 \001(\005\"9\n%CDOTAUser"
    "Msg_DodgeTrackingProjectiles\022\020\n\010entindex"
    "\030\001 \002(\005\"_\n!CDOTAUserMsg_SpectatorPlayerCl"
    "ick\022\020\n\010entindex\030\001 \002(\005\022\022\n\norder_type\030\002 \001("
    "\005\022\024\n\014target_index\030\003 \001(\005\"b\n\035CDOTAUserMsg_"
    "NevermoreRequiem\022\025\n\rentity_handle\030\001 \001(\005\022"
    "\r\n\005lines\030\002 \001(\005\022\033\n\006origin\030\003 \001(\0132\013.CMsgVec"
    "tor\".\n\033CDOTAUserMsg_InvalidCommand\022\017\n\007me"
    "ssage\030\001 \001(\t\")\n\025CDOTAUserMsg_HudError\022\020\n\010"
    "order_id\030\001 \001(\005\"c\n\033CDOTAUserMsg_SharedCoo"
    "ldown\022\020\n\010entindex\030\001 \001(\005\022\014\n\004name\030\002 \001(\t\022\020\n"
    "\010cooldown\030\003 \001(\002\022\022\n\nname_index\030\004 \001(\005\"/\n\037C"
    "DOTAUserMsg_SetNextAutobuyItem\022\014\n\004name\030\001"
    " \001(\t\"\376\001\n\034CDOTAResponseQuerySerialized\0221\n"
    "\005facts\030\001 \003(\0132\".CDOTAResponseQuerySeriali"
    "zed.Fact\032\252\001\n\004Fact\022\013\n\003key\030\001 \002(\005\022F\n\007valtyp"
    "e\030\002 \002(\0162,.CDOTAResponseQuerySerialized.F"
    "act.ValueType:\007NUMERIC\022\023\n\013val_numeric\030\003 "
    "\001(\002\022\022\n\nval_string\030\004 \001(\t\"$\n\tValueType\022\013\n\007"
    "NUMERIC\020\001\022\n\n\006STRING\020\002\"\220\001\n\030CDOTASpeechMat"
    "chOnClient\022\017\n\007concept\030\001 \001(\005\022\026\n\016recipient"
    "_type\030\002 \001(\005\0224\n\rresponsequery\030\003 \001(\0132\035.CDO"
    "TAResponseQuerySerialized\022\025\n\nrandomseed\030"
    "\004 \001(\017:\0010\"\260\007\n\026CDOTAUserMsg_UnitEvent\0228\n\010m"
    "sg_type\030\001 \002(\0162\024.EDotaEntityMessages:\020DOT"
    "A_UNIT_SPEECH\022\024\n\014entity_index\030\002 \002(\005\022.\n\006s"
    "peech\030\003 \001(\0132\036.CDOTAUserMsg_UnitEvent.Spe"
    "ech\0227\n\013speech_mute\030\004 \001(\0132\".CDOTAUserMsg_"
    "UnitEvent.SpeechMute\0227\n\013add_gesture\030\005 \001("
    "\0132\".CDOTAUserMsg_UnitEvent.AddGesture\022=\n"
    "\016remove_gesture\030\006 \001(\0132%.CDOTAUserMsg_Uni"
    "tEvent.RemoveGesture\0229\n\014blood_impact\030\007 \001"
    "(\0132#.CDOTAUserMsg_UnitEvent.BloodImpact\022"
    "9\n\014fade_gesture\030\010 \001(\0132#.CDOTAUserMsg_Uni"
    "tEvent.FadeGesture\0229\n\026speech_match_on_cl"
    "ient\030\t \001(\0132\031.CDOTASpeechMatchOnClient\032k\n"
    "\006Speech\022\017\n\007concept\030\001 \001(\005\022\020\n\010response\030\002 \001"
    "(\t\022\026\n\016recipient_type\030\003 \001(\005\022\r\n\005level\030\004 \001("
    "\005\022\027\n\010muteable\030\005 \001(\010:\005false\032 \n\nSpeechMute"
    "\022\022\n\005delay\030\001 \001(\002:\0030.5\032o\n\nAddGesture\022(\n\010ac"
    "tivity\030\001 \001(\0162\t.Activity:\013ACT_INVALID\022\014\n\004"
    "slot\030\002 \001(\005\022\022\n\007fade_in\030\003 \001(\002:\0010\022\025\n\010fade_o"
    "ut\030\004 \001(\002:\0030.1\0329\n\rRemoveGesture\022(\n\010activi"
    "ty\030\001 \001(\0162\t.Activity:\013ACT_INVALID\032@\n\013Bloo"
    "dImpact\022\r\n\005scale\030\001 \001(\005\022\020\n\010x_normal\030\002 \001(\005"
    "\022\020\n\010y_normal\030\003 \001(\005\0327\n\013FadeGesture\022(\n\010act"
    "ivity\030\001 \001(\0162\t.Activity:\013ACT_INVALID\"0\n\032C"
    "DOTAUserMsg_ItemPurchased\022\022\n\nitem_index\030"
    "\001 \001(\005\"j\n\026CDOTAUserMsg_ItemFound\022\016\n\006playe"
    "r\030\001 \001(\005\022\017\n\007quality\030\002 \001(\005\022\016\n\006rarity\030\003 \001(\005"
    "\022\016\n\006method\030\004 \001(\005\022\017\n\007itemdef\030\005 \001(\005\"\375\017\n\034CD"
    "OTAUserMsg_ParticleManager\022H\n\004type\030\001 \002(\016"
    "2\026.DOTA_PARTICLE_MESSAGE:\"DOTA_PARTICLE_"
    "MANAGER_EVENT_CREATE\022\r\n\005index\030\002 \002(\r\022R\n\026r"
    "elease_particle_index\030\003 \001(\01322.CDOTAUserM"
    "sg_ParticleManager.ReleaseParticleIndex\022"
    "E\n\017create_particle\030\004 \001(\0132,.CDOTAUserMsg_"
    "ParticleManager.CreateParticle\022G\n\020destro"
    "y_particle\030\005 \001(\0132-.CDOTAUserMsg_Particle"
    "Manager.DestroyParticle\022Z\n\032destroy_parti"
    "cle_involving\030\006 \001(\01326.CDOTAUserMsg_Parti"
    "cleManager.DestroyParticleInvolving\022E\n\017u"
    "pdate_particle\030\007 \001(\0132,.CDOTAUserMsg_Part"
    "icleManager.UpdateParticle\022L\n\023update_par"
    "ticle_fwd\030\010 \001(\0132/.CDOTAUserMsg_ParticleM"
    "anager.UpdateParticleFwd\022R\n\026update_parti"
    "cle_orient\030\t \001(\01322.CDOTAUserMsg_Particle"
    "Manager.UpdateParticleOrient\022V\n\030update_p"
    "article_fallback\030\n \001(\01324.CDOTAUserMsg_Pa"
    "rticleManager.UpdateParticleFallback\022R\n\026"
    "update_particle_offset\030\013 \001(\01322.CDOTAUser"
    "Msg_ParticleManager.UpdateParticleOffset"
    "\022L\n\023update_particle_ent\030\014 \001(\0132/.CDOTAUse"
    "rMsg_ParticleManager.UpdateParticleEnt\022T"
    "\n\027update_particle_latency\030\r \001(\01323.CDOTAU"
    "serMsg_ParticleManager.UpdateParticleLat"
    "ency\022[\n\033update_particle_should_draw\030\016 \001("
    "\01326.CDOTAUserMsg_ParticleManager.UpdateP"
    "articleShouldDraw\032\026\n\024ReleaseParticleInde"
    "x\032Y\n\016CreateParticle\022\033\n\023particle_name_ind"
    "ex\030\001 \001(\005\022\023\n\013attach_type\030\002 \001(\005\022\025\n\rentity_"
    "handle\030\003 \001(\005\032.\n\017DestroyParticle\022\033\n\023destr"
    "oy_immediately\030\001 \001(\010\032N\n\030DestroyParticleI"
    "nvolving\022\033\n\023destroy_immediately\030\001 \001(\010\022\025\n"
    "\rentity_handle\030\003 \001(\005\032F\n\016UpdateParticle\022\025"
    "\n\rcontrol_point\030\001 \001(\005\022\035\n\010position\030\002 \001(\0132"
    "\013.CMsgVector\032H\n\021UpdateParticleFwd\022\025\n\rcon"
    "trol_point\030\001 \001(\005\022\034\n\007forward\030\002 \001(\0132\013.CMsg"
    "Vector\032\200\001\n\024UpdateParticleOrient\022\025\n\rcontr"
    "ol_point\030\001 \001(\005\022\034\n\007forward\030\002 \001(\0132\013.CMsgVe"
    "ctor\022\032\n\005right\030\003 \001(\0132\013.CMsgVector\022\027\n\002up\030\004"
    " \001(\0132\013.CMsgVector\032N\n\026UpdateParticleFallb"
    "ack\022\025\n\rcontrol_point\030\001 \001(\005\022\035\n\010position\030\002"
    " \001(\0132\013.CMsgVector\032Q\n\024UpdateParticleOffse"
    "t\022\025\n\rcontrol_point\030\001 \001(\005\022\"\n\rorigin_offse"
    "t\030\002 \001(\0132\013.CMsgVector\032\222\001\n\021UpdateParticleE"
    "nt\022\025\n\rcontrol_point\030\001 \001(\005\022\025\n\rentity_hand"
    "le\030\002 \001(\005\022\023\n\013attach_type\030\003 \001(\005\022\022\n\nattachm"
    "ent\030\004 \001(\005\022&\n\021fallback_position\030\005 \001(\0132\013.C"
    "MsgVector\032=\n\025UpdateParticleLatency\022\026\n\016pl"
    "ayer_latency\030\001 \001(\005\022\014\n\004tick\030\002 \001(\005\032/\n\030Upda"
    "teParticleShouldDraw\022\023\n\013should_draw\030\001 \001("
    "\010\"\305\001\n\032CDOTAUserMsg_OverheadEvent\022\?\n\014mess"
    "age_type\030\001 \002(\0162\024.DOTA_OVERHEAD_ALERT:\023OV"
    "ERHEAD_ALERT_GOLD\022\r\n\005value\030\002 \001(\005\022\036\n\026targ"
    "et_player_entindex\030\003 \001(\005\022\027\n\017target_entin"
    "dex\030\004 \001(\005\022\036\n\026source_player_entindex\030\005 \001("
    "\005\">\n\034CDOTAUserMsg_TutorialTipInfo\022\014\n\004nam"
    "e\030\001 \001(\t\022\020\n\010progress\030\002 \001(\005*\211\007\n\021EDotaUserM"
    "essages\022\036\n\032DOTA_UM_AddUnitToSelection\020@\022"
    "\027\n\023DOTA_UM_AIDebugLine\020A\022\025\n\021DOTA_UM_Chat"
    "Event\020B\022\037\n\033DOTA_UM_CombatHeroPositions\020C"
    "\022\031\n\025DOTA_UM_CombatLogData\020D\022\036\n\032DOTA_UM_C"
    "ombatLogShowDeath\020F\022\"\n\036DOTA_UM_CreateLin"
    "earProjectile\020G\022#\n\037DOTA_UM_DestroyLinear"
    "Projectile\020H\022$\n DOTA_UM_DodgeTrackingPro"
    "jectiles\020I\022\034\n\030DOTA_UM_GlobalLightColor\020J"
    "\022 \n\034DOTA_UM_GlobalLightDirection\020K\022\032\n\026DO"
    "TA_UM_InvalidCommand\020L\022\030\n\024DOTA_UM_Locati"
    "onPing\020M\022\023\n\017DOTA_UM_MapLine\020N\022\033\n\027DOTA_UM"
    "_MiniKillCamInfo\020O\022\035\n\031DOTA_UM_MinimapDeb"
    "ugPoint\020P\022\030\n\024DOTA_UM_MinimapEvent\020Q\022\034\n\030D"
    "OTA_UM_NevermoreRequiem\020R\022\031\n\025DOTA_UM_Ove"
    "rheadEvent\020S\022\036\n\032DOTA_UM_SetNextAutobuyIt"
    "em\020T\022\032\n\026DOTA_UM_SharedCooldown\020U\022 \n\034DOTA"
    "_UM_SpectatorPlayerClick\020V\022\033\n\027DOTA_UM_Tu"
    "torialTipInfo\020W\022\025\n\021DOTA_UM_UnitEvent\020X\022\033"
    "\n\027DOTA_UM_ParticleManager\020Y\022\023\n\017DOTA_UM_B"
    "otChat\020Z\022\024\n\020DOTA_UM_HudError\020[\022\031\n\025DOTA_U"
    "M_ItemPurchased\020\\\022\020\n\014DOTA_UM_Ping\020]\022\025\n\021D"
    "OTA_UM_ItemFound\020^\022!\n\035DOTA_UM_CharacterS"
    "peakConcept\020_*\336\r\n\021DOTA_CHAT_MESSAGE\022!\n\024C"
    "HAT_MESSAGE_INVALID\020\377\377\377\377\377\377\377\377\377\001\022\032\n\026CHAT_M"
    "ESSAGE_HERO_KILL\020\000\022\032\n\026CHAT_MESSAGE_HERO_"
    "DENY\020\001\022\036\n\032CHAT_MESSAGE_BARRACKS_KILL\020\002\022\033"
    "\n\027CHAT_MESSAGE_TOWER_KILL\020\003\022\033\n\027CHAT_MESS"
    "AGE_TOWER_DENY\020\004\022\033\n\027CHAT_MESSAGE_FIRSTBL"
    "OOD\020\005\022\034\n\030CHAT_MESSAGE_STREAK_KILL\020\006\022\030\n\024C"
    "HAT_MESSAGE_BUYBACK\020\007\022\026\n\022CHAT_MESSAGE_AE"
    "GIS\020\010\022\034\n\030CHAT_MESSAGE_ROSHAN_KILL\020\t\022\035\n\031C"
    "HAT_MESSAGE_COURIER_LOST\020\n\022\"\n\036CHAT_MESSA"
    "GE_COURIER_RESPAWNED\020\013\022\033\n\027CHAT_MESSAGE_G"
    "LYPH_USED\020\014\022\036\n\032CHAT_MESSAGE_ITEM_PURCHAS"
    "E\020\r\022\030\n\024CHAT_MESSAGE_CONNECT\020\016\022\033\n\027CHAT_ME"
    "SSAGE_DISCONNECT\020\017\022.\n*CHAT_MESSAGE_DISCO"
    "NNECT_WAIT_FOR_RECONNECT\020\020\022*\n&CHAT_MESSA"
    "GE_DISCONNECT_TIME_REMAINING\020\021\0221\n-CHAT_M"
    "ESSAGE_DISCONNECT_TIME_REMAINING_PLURAL\020"
    "\022\022\032\n\026CHAT_MESSAGE_RECONNECT\020\023\022\030\n\024CHAT_ME"
    "SSAGE_ABANDON\020\024\022\036\n\032CHAT_MESSAGE_SAFE_TO_"
    "LEAVE\020\025\022\034\n\030CHAT_MESSAGE_RUNE_PICKUP\020\026\022\034\n"
    "\030CHAT_MESSAGE_RUNE_BOTTLE\020\027\022\031\n\025CHAT_MESS"
    "AGE_INTHEBAG\020\030\022\033\n\027CHAT_MESSAGE_SECRETSHO"
    "P\020\031\022#\n\037CHAT_MESSAGE_ITEM_AUTOPURCHASED\020\032"
    "\022\037\n\033CHAT_MESSAGE_ITEMS_COMBINED\020\033\022\035\n\031CHA"
    "T_MESSAGE_SUPER_CREEPS\020\034\022%\n!CHAT_MESSAGE"
    "_CANT_USE_ACTION_ITEM\020\035\022\"\n\036CHAT_MESSAGE_"
    "CHARGES_EXHAUSTED\020\036\022\032\n\026CHAT_MESSAGE_CANT"
    "PAUSE\020\037\022\035\n\031CHAT_MESSAGE_NOPAUSESLEFT\020 \022\035"
    "\n\031CHAT_MESSAGE_CANTPAUSEYET\020!\022\027\n\023CHAT_ME"
    "SSAGE_PAUSED\020\"\022\"\n\036CHAT_MESSAGE_UNPAUSE_C"
    "OUNTDOWN\020#\022\031\n\025CHAT_MESSAGE_UNPAUSED\020$\022\036\n"
    "\032CHAT_MESSAGE_AUTO_UNPAUSED\020%\022\032\n\026CHAT_ME"
    "SSAGE_YOUPAUSED\020&\022 \n\034CHAT_MESSAGE_CANTUN"
    "PAUSETEAM\020\'\022(\n$CHAT_MESSAGE_SAFE_TO_LEAV"
    "E_ABANDONER\020(\022\"\n\036CHAT_MESSAGE_VOICE_TEXT"
    "_BANNED\020)\022.\n*CHAT_MESSAGE_SPECTATORS_WAT"
    "CHING_THIS_GAME\020*\022 \n\034CHAT_MESSAGE_REPORT"
    "_REMINDER\020+\022\032\n\026CHAT_MESSAGE_ECON_ITEM\020,\022"
    "\026\n\022CHAT_MESSAGE_TAUNT\020-\022\027\n\023CHAT_MESSAGE_"
    "RANDOM\020.\022\030\n\024CHAT_MESSAGE_RD_TURN\020/\022.\n*CH"
    "AT_MESSAGE_SAFE_TO_LEAVE_ABANDONER_EARLY"
    "\0200\022 \n\034CHAT_MESSAGE_DROP_RATE_BONUS\0201\022!\n\035"
    "CHAT_MESSAGE_NO_BATTLE_POINTS\0202\022\035\n\031CHAT_"
    "MESSAGE_DENIED_AEGIS\0203\022\036\n\032CHAT_MESSAGE_I"
    "NFORMATIONAL\0204*\262\001\n\035DOTA_NO_BATTLE_POINTS"
    "_REASONS\022%\n!NO_BATTLE_POINTS_WRONG_LOBBY"
    "_TYPE\020\001\022\"\n\036NO_BATTLE_POINTS_PRACTICE_BOT"
    "S\020\002\022#\n\037NO_BATTLE_POINTS_CHEATS_ENABLED\020\003"
    "\022!\n\035NO_BATTLE_POINTS_LOW_PRIORITY\020\004*7\n\027D"
    "OTA_CHAT_INFORMATIONAL\022\034\n\030COOP_BATTLE_PO"
    "INTS_RULES\020\001*\251\001\n\024DOTA_COMBATLOG_TYPES\022\031\n"
    "\025DOTA_COMBATLOG_DAMAGE\020\000\022\027\n\023DOTA_COMBATL"
    "OG_HEAL\020\001\022\037\n\033DOTA_COMBATLOG_MODIFIER_ADD"
    "\020\002\022\"\n\036DOTA_COMBATLOG_MODIFIER_REMOVE\020\003\022\030"
    "\n\024DOTA_COMBATLOG_DEATH\020\004*\345\001\n\023EDotaEntity"
    "Messages\022\024\n\020DOTA_UNIT_SPEECH\020\000\022\031\n\025DOTA_U"
    "NIT_SPEECH_MUTE\020\001\022\031\n\025DOTA_UNIT_ADD_GESTU"
    "RE\020\002\022\034\n\030DOTA_UNIT_REMOVE_GESTURE\020\003\022!\n\035DO"
    "TA_UNIT_REMOVE_ALL_GESTURES\020\004\022\032\n\026DOTA_UN"
    "IT_FADE_GESTURE\020\006\022%\n!DOTA_UNIT_SPEECH_CL"
    "IENTSIDE_RULES\020\007*\262\004\n\025DOTA_PARTICLE_MESSA"
    "GE\022&\n\"DOTA_PARTICLE_MANAGER_EVENT_CREATE"
    "\020\000\022&\n\"DOTA_PARTICLE_MANAGER_EVENT_UPDATE"
    "\020\001\022.\n*DOTA_PARTICLE_MANAGER_EVENT_UPDATE"
    "_FORWARD\020\002\0222\n.DOTA_PARTICLE_MANAGER_EVEN"
    "T_UPDATE_ORIENTATION\020\003\022/\n+DOTA_PARTICLE_"
    "MANAGER_EVENT_UPDATE_FALLBACK\020\004\022*\n&DOTA_"
    "PARTICLE_MANAGER_EVENT_UPDATE_ENT\020\005\022-\n)D"
    "OTA_PARTICLE_MANAGER_EVENT_UPDATE_OFFSET"
    "\020\006\022\'\n#DOTA_PARTICLE_MANAGER_EVENT_DESTRO"
    "Y\020\007\0221\n-DOTA_PARTICLE_MANAGER_EVENT_DESTR"
    "OY_INVOLVING\020\010\022\'\n#DOTA_PARTICLE_MANAGER_"
    "EVENT_RELEASE\020\t\022\'\n#DOTA_PARTICLE_MANAGER"
    "_EVENT_LATENCY\020\n\022+\n\'DOTA_PARTICLE_MANAGE"
    "R_EVENT_SHOULD_DRAW\020\013*\206\003\n\023DOTA_OVERHEAD_"
    "ALERT\022\027\n\023OVERHEAD_ALERT_GOLD\020\000\022\027\n\023OVERHE"
    "AD_ALERT_DENY\020\001\022\033\n\027OVERHEAD_ALERT_CRITIC"
    "AL\020\002\022\025\n\021OVERHEAD_ALERT_XP\020\003\022%\n!OVERHEAD_"
    "ALERT_BONUS_SPELL_DAMAGE\020\004\022\027\n\023OVERHEAD_A"
    "LERT_MISS\020\005\022\031\n\025OVERHEAD_ALERT_DAMAGE\020\006\022\030"
    "\n\024OVERHEAD_ALERT_EVADE\020\007\022\030\n\024OVERHEAD_ALE"
    "RT_BLOCK\020\010\022&\n\"OVERHEAD_ALERT_BONUS_POISO"
    "N_DAMAGE\020\t\022\027\n\023OVERHEAD_ALERT_HEAL\020\n\022\033\n\027O"
    "VERHEAD_ALERT_MANA_ADD\020\013\022\034\n\030OVERHEAD_ALE"
    "RT_MANA_LOSS\020\014", 10574);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_usermessages.proto", &protobuf_RegisterTypes);
  CDOTAUserMsg_AIDebugLine::default_instance_ = new CDOTAUserMsg_AIDebugLine();
  CDOTAUserMsg_Ping::default_instance_ = new CDOTAUserMsg_Ping();
  CDOTAUserMsg_ChatEvent::default_instance_ = new CDOTAUserMsg_ChatEvent();
  CDOTAUserMsg_CombatLogData::default_instance_ = new CDOTAUserMsg_CombatLogData();
  CDOTAUserMsg_CombatLogShowDeath::default_instance_ = new CDOTAUserMsg_CombatLogShowDeath();
  CDOTAUserMsg_BotChat::default_instance_ = new CDOTAUserMsg_BotChat();
  CDOTAUserMsg_CombatHeroPositions::default_instance_ = new CDOTAUserMsg_CombatHeroPositions();
  CDOTAUserMsg_MiniKillCamInfo::default_instance_ = new CDOTAUserMsg_MiniKillCamInfo();
  CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance_ = new CDOTAUserMsg_MiniKillCamInfo_Attacker();
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance_ = new CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability();
  CDOTAUserMsg_GlobalLightColor::default_instance_ = new CDOTAUserMsg_GlobalLightColor();
  CDOTAUserMsg_GlobalLightDirection::default_instance_ = new CDOTAUserMsg_GlobalLightDirection();
  CDOTAUserMsg_LocationPing::default_instance_ = new CDOTAUserMsg_LocationPing();
  CDOTAUserMsg_MinimapEvent::default_instance_ = new CDOTAUserMsg_MinimapEvent();
  CDOTAUserMsg_MapLine::default_instance_ = new CDOTAUserMsg_MapLine();
  CDOTAUserMsg_MinimapDebugPoint::default_instance_ = new CDOTAUserMsg_MinimapDebugPoint();
  CDOTAUserMsg_CreateLinearProjectile::default_instance_ = new CDOTAUserMsg_CreateLinearProjectile();
  CDOTAUserMsg_DestroyLinearProjectile::default_instance_ = new CDOTAUserMsg_DestroyLinearProjectile();
  CDOTAUserMsg_DodgeTrackingProjectiles::default_instance_ = new CDOTAUserMsg_DodgeTrackingProjectiles();
  CDOTAUserMsg_SpectatorPlayerClick::default_instance_ = new CDOTAUserMsg_SpectatorPlayerClick();
  CDOTAUserMsg_NevermoreRequiem::default_instance_ = new CDOTAUserMsg_NevermoreRequiem();
  CDOTAUserMsg_InvalidCommand::default_instance_ = new CDOTAUserMsg_InvalidCommand();
  CDOTAUserMsg_HudError::default_instance_ = new CDOTAUserMsg_HudError();
  CDOTAUserMsg_SharedCooldown::default_instance_ = new CDOTAUserMsg_SharedCooldown();
  CDOTAUserMsg_SetNextAutobuyItem::default_instance_ = new CDOTAUserMsg_SetNextAutobuyItem();
  CDOTAResponseQuerySerialized::default_instance_ = new CDOTAResponseQuerySerialized();
  CDOTAResponseQuerySerialized_Fact::default_instance_ = new CDOTAResponseQuerySerialized_Fact();
  CDOTASpeechMatchOnClient::default_instance_ = new CDOTASpeechMatchOnClient();
  CDOTAUserMsg_UnitEvent::default_instance_ = new CDOTAUserMsg_UnitEvent();
  CDOTAUserMsg_UnitEvent_Speech::default_instance_ = new CDOTAUserMsg_UnitEvent_Speech();
  CDOTAUserMsg_UnitEvent_SpeechMute::default_instance_ = new CDOTAUserMsg_UnitEvent_SpeechMute();
  CDOTAUserMsg_UnitEvent_AddGesture::default_instance_ = new CDOTAUserMsg_UnitEvent_AddGesture();
  CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance_ = new CDOTAUserMsg_UnitEvent_RemoveGesture();
  CDOTAUserMsg_UnitEvent_BloodImpact::default_instance_ = new CDOTAUserMsg_UnitEvent_BloodImpact();
  CDOTAUserMsg_UnitEvent_FadeGesture::default_instance_ = new CDOTAUserMsg_UnitEvent_FadeGesture();
  CDOTAUserMsg_ItemPurchased::default_instance_ = new CDOTAUserMsg_ItemPurchased();
  CDOTAUserMsg_ItemFound::default_instance_ = new CDOTAUserMsg_ItemFound();
  CDOTAUserMsg_ParticleManager::default_instance_ = new CDOTAUserMsg_ParticleManager();
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_ = new CDOTAUserMsg_ParticleManager_ReleaseParticleIndex();
  CDOTAUserMsg_ParticleManager_CreateParticle::default_instance_ = new CDOTAUserMsg_ParticleManager_CreateParticle();
  CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance_ = new CDOTAUserMsg_ParticleManager_DestroyParticle();
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_ = new CDOTAUserMsg_ParticleManager_DestroyParticleInvolving();
  CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticle();
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleFwd();
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleOrient();
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleFallback();
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleOffset();
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleEnt();
  CDOTAUserMsg_ParticleManager_UpdateParticleLatency::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleLatency();
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_ = new CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw();
  CDOTAUserMsg_OverheadEvent::default_instance_ = new CDOTAUserMsg_OverheadEvent();
  CDOTAUserMsg_TutorialTipInfo::default_instance_ = new CDOTAUserMsg_TutorialTipInfo();
  CDOTAUserMsg_AIDebugLine::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_Ping::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ChatEvent::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_CombatLogData::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_CombatLogShowDeath::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_BotChat::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_CombatHeroPositions::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MiniKillCamInfo::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_GlobalLightColor::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_GlobalLightDirection::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_LocationPing::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MinimapEvent::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MapLine::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_MinimapDebugPoint::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_CreateLinearProjectile::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_DestroyLinearProjectile::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_DodgeTrackingProjectiles::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_SpectatorPlayerClick::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_NevermoreRequiem::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_InvalidCommand::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_HudError::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_SharedCooldown::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_SetNextAutobuyItem::default_instance_->InitAsDefaultInstance();
  CDOTAResponseQuerySerialized::default_instance_->InitAsDefaultInstance();
  CDOTAResponseQuerySerialized_Fact::default_instance_->InitAsDefaultInstance();
  CDOTASpeechMatchOnClient::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent_Speech::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent_SpeechMute::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent_AddGesture::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent_BloodImpact::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_UnitEvent_FadeGesture::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ItemPurchased::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ItemFound::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_CreateParticle::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleLatency::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_OverheadEvent::default_instance_->InitAsDefaultInstance();
  CDOTAUserMsg_TutorialTipInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fusermessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fusermessages_2eproto {
  StaticDescriptorInitializer_dota_5fusermessages_2eproto() {
    protobuf_AddDesc_dota_5fusermessages_2eproto();
  }
} static_descriptor_initializer_dota_5fusermessages_2eproto_;

const ::google::protobuf::EnumDescriptor* EDotaUserMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDotaUserMessages_descriptor_;
}
bool EDotaUserMessages_IsValid(int value) {
  switch(value) {
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_CHAT_MESSAGE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_CHAT_MESSAGE_descriptor_;
}
bool DOTA_CHAT_MESSAGE_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_NO_BATTLE_POINTS_REASONS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_NO_BATTLE_POINTS_REASONS_descriptor_;
}
bool DOTA_NO_BATTLE_POINTS_REASONS_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_CHAT_INFORMATIONAL_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_CHAT_INFORMATIONAL_descriptor_;
}
bool DOTA_CHAT_INFORMATIONAL_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_COMBATLOG_TYPES_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_COMBATLOG_TYPES_descriptor_;
}
bool DOTA_COMBATLOG_TYPES_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EDotaEntityMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDotaEntityMessages_descriptor_;
}
bool EDotaEntityMessages_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_PARTICLE_MESSAGE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_PARTICLE_MESSAGE_descriptor_;
}
bool DOTA_PARTICLE_MESSAGE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* DOTA_OVERHEAD_ALERT_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_OVERHEAD_ALERT_descriptor_;
}
bool DOTA_OVERHEAD_ALERT_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_AIDebugLine::kMessageFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_AIDebugLine::CDOTAUserMsg_AIDebugLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_AIDebugLine::InitAsDefaultInstance() {
}

CDOTAUserMsg_AIDebugLine::CDOTAUserMsg_AIDebugLine(const CDOTAUserMsg_AIDebugLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_AIDebugLine::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_AIDebugLine::~CDOTAUserMsg_AIDebugLine() {
  SharedDtor();
}

void CDOTAUserMsg_AIDebugLine::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_AIDebugLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_AIDebugLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_AIDebugLine_descriptor_;
}

const CDOTAUserMsg_AIDebugLine& CDOTAUserMsg_AIDebugLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_AIDebugLine* CDOTAUserMsg_AIDebugLine::default_instance_ = NULL;

CDOTAUserMsg_AIDebugLine* CDOTAUserMsg_AIDebugLine::New() const {
  return new CDOTAUserMsg_AIDebugLine;
}

void CDOTAUserMsg_AIDebugLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_AIDebugLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_AIDebugLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_AIDebugLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_AIDebugLine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_AIDebugLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_AIDebugLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_AIDebugLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_AIDebugLine::MergeFrom(const CDOTAUserMsg_AIDebugLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_AIDebugLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_AIDebugLine::CopyFrom(const CDOTAUserMsg_AIDebugLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_AIDebugLine::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_AIDebugLine::Swap(CDOTAUserMsg_AIDebugLine* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_AIDebugLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_AIDebugLine_descriptor_;
  metadata.reflection = CDOTAUserMsg_AIDebugLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_Ping::kMessageFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_Ping::CDOTAUserMsg_Ping()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_Ping::InitAsDefaultInstance() {
}

CDOTAUserMsg_Ping::CDOTAUserMsg_Ping(const CDOTAUserMsg_Ping& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_Ping::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_Ping::~CDOTAUserMsg_Ping() {
  SharedDtor();
}

void CDOTAUserMsg_Ping::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_Ping::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_Ping::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_Ping_descriptor_;
}

const CDOTAUserMsg_Ping& CDOTAUserMsg_Ping::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_Ping* CDOTAUserMsg_Ping::default_instance_ = NULL;

CDOTAUserMsg_Ping* CDOTAUserMsg_Ping::New() const {
  return new CDOTAUserMsg_Ping;
}

void CDOTAUserMsg_Ping::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_Ping::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_Ping::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_Ping::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_Ping* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_Ping*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_Ping::MergeFrom(const CDOTAUserMsg_Ping& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_Ping::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_Ping::CopyFrom(const CDOTAUserMsg_Ping& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_Ping::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_Ping::Swap(CDOTAUserMsg_Ping* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_Ping::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_Ping_descriptor_;
  metadata.reflection = CDOTAUserMsg_Ping_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_ChatEvent::kTypeFieldNumber;
const int CDOTAUserMsg_ChatEvent::kValueFieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid1FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid2FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid3FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid4FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid5FieldNumber;
const int CDOTAUserMsg_ChatEvent::kPlayerid6FieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ChatEvent::CDOTAUserMsg_ChatEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ChatEvent::InitAsDefaultInstance() {
}

CDOTAUserMsg_ChatEvent::CDOTAUserMsg_ChatEvent(const CDOTAUserMsg_ChatEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ChatEvent::SharedCtor() {
  _cached_size_ = 0;
  type_ = -1;
  value_ = 0u;
  playerid_1_ = -1;
  playerid_2_ = -1;
  playerid_3_ = -1;
  playerid_4_ = -1;
  playerid_5_ = -1;
  playerid_6_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ChatEvent::~CDOTAUserMsg_ChatEvent() {
  SharedDtor();
}

void CDOTAUserMsg_ChatEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ChatEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ChatEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ChatEvent_descriptor_;
}

const CDOTAUserMsg_ChatEvent& CDOTAUserMsg_ChatEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ChatEvent* CDOTAUserMsg_ChatEvent::default_instance_ = NULL;

CDOTAUserMsg_ChatEvent* CDOTAUserMsg_ChatEvent::New() const {
  return new CDOTAUserMsg_ChatEvent;
}

void CDOTAUserMsg_ChatEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = -1;
    value_ = 0u;
    playerid_1_ = -1;
    playerid_2_ = -1;
    playerid_3_ = -1;
    playerid_4_ = -1;
    playerid_5_ = -1;
    playerid_6_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ChatEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_CHAT_MESSAGE_IsValid(value)) {
            set_type(static_cast< DOTA_CHAT_MESSAGE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional uint32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playerid_1;
        break;
      }
      
      // optional sint32 playerid_1 = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid_1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_1_)));
          set_has_playerid_1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerid_2;
        break;
      }
      
      // optional sint32 playerid_2 = 4 [default = -1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid_2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_2_)));
          set_has_playerid_2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_playerid_3;
        break;
      }
      
      // optional sint32 playerid_3 = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid_3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_3_)));
          set_has_playerid_3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_playerid_4;
        break;
      }
      
      // optional sint32 playerid_4 = 6 [default = -1];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid_4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_4_)));
          set_has_playerid_4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_playerid_5;
        break;
      }
      
      // optional sint32 playerid_5 = 7 [default = -1];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid_5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_5_)));
          set_has_playerid_5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_playerid_6;
        break;
      }
      
      // optional sint32 playerid_6 = 8 [default = -1];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid_6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &playerid_6_)));
          set_has_playerid_6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ChatEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional uint32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }
  
  // optional sint32 playerid_1 = 3 [default = -1];
  if (has_playerid_1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->playerid_1(), output);
  }
  
  // optional sint32 playerid_2 = 4 [default = -1];
  if (has_playerid_2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->playerid_2(), output);
  }
  
  // optional sint32 playerid_3 = 5 [default = -1];
  if (has_playerid_3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->playerid_3(), output);
  }
  
  // optional sint32 playerid_4 = 6 [default = -1];
  if (has_playerid_4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->playerid_4(), output);
  }
  
  // optional sint32 playerid_5 = 7 [default = -1];
  if (has_playerid_5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(7, this->playerid_5(), output);
  }
  
  // optional sint32 playerid_6 = 8 [default = -1];
  if (has_playerid_6()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(8, this->playerid_6(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ChatEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional uint32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }
  
  // optional sint32 playerid_1 = 3 [default = -1];
  if (has_playerid_1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->playerid_1(), target);
  }
  
  // optional sint32 playerid_2 = 4 [default = -1];
  if (has_playerid_2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->playerid_2(), target);
  }
  
  // optional sint32 playerid_3 = 5 [default = -1];
  if (has_playerid_3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->playerid_3(), target);
  }
  
  // optional sint32 playerid_4 = 6 [default = -1];
  if (has_playerid_4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->playerid_4(), target);
  }
  
  // optional sint32 playerid_5 = 7 [default = -1];
  if (has_playerid_5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(7, this->playerid_5(), target);
  }
  
  // optional sint32 playerid_6 = 8 [default = -1];
  if (has_playerid_6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(8, this->playerid_6(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ChatEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DOTA_CHAT_MESSAGE type = 1 [default = CHAT_MESSAGE_INVALID];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }
    
    // optional sint32 playerid_1 = 3 [default = -1];
    if (has_playerid_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_1());
    }
    
    // optional sint32 playerid_2 = 4 [default = -1];
    if (has_playerid_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_2());
    }
    
    // optional sint32 playerid_3 = 5 [default = -1];
    if (has_playerid_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_3());
    }
    
    // optional sint32 playerid_4 = 6 [default = -1];
    if (has_playerid_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_4());
    }
    
    // optional sint32 playerid_5 = 7 [default = -1];
    if (has_playerid_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_5());
    }
    
    // optional sint32 playerid_6 = 8 [default = -1];
    if (has_playerid_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->playerid_6());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ChatEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ChatEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ChatEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ChatEvent::MergeFrom(const CDOTAUserMsg_ChatEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_playerid_1()) {
      set_playerid_1(from.playerid_1());
    }
    if (from.has_playerid_2()) {
      set_playerid_2(from.playerid_2());
    }
    if (from.has_playerid_3()) {
      set_playerid_3(from.playerid_3());
    }
    if (from.has_playerid_4()) {
      set_playerid_4(from.playerid_4());
    }
    if (from.has_playerid_5()) {
      set_playerid_5(from.playerid_5());
    }
    if (from.has_playerid_6()) {
      set_playerid_6(from.playerid_6());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ChatEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ChatEvent::CopyFrom(const CDOTAUserMsg_ChatEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ChatEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CDOTAUserMsg_ChatEvent::Swap(CDOTAUserMsg_ChatEvent* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(playerid_1_, other->playerid_1_);
    std::swap(playerid_2_, other->playerid_2_);
    std::swap(playerid_3_, other->playerid_3_);
    std::swap(playerid_4_, other->playerid_4_);
    std::swap(playerid_5_, other->playerid_5_);
    std::swap(playerid_6_, other->playerid_6_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ChatEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ChatEvent_descriptor_;
  metadata.reflection = CDOTAUserMsg_ChatEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_CombatLogData::kTypeFieldNumber;
const int CDOTAUserMsg_CombatLogData::kTargetNameFieldNumber;
const int CDOTAUserMsg_CombatLogData::kAttackerNameFieldNumber;
const int CDOTAUserMsg_CombatLogData::kAttackerIllusionFieldNumber;
const int CDOTAUserMsg_CombatLogData::kTargetIllusionFieldNumber;
const int CDOTAUserMsg_CombatLogData::kInflictorNameFieldNumber;
const int CDOTAUserMsg_CombatLogData::kValueFieldNumber;
const int CDOTAUserMsg_CombatLogData::kHealthFieldNumber;
const int CDOTAUserMsg_CombatLogData::kTimeFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_CombatLogData::CDOTAUserMsg_CombatLogData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_CombatLogData::InitAsDefaultInstance() {
}

CDOTAUserMsg_CombatLogData::CDOTAUserMsg_CombatLogData(const CDOTAUserMsg_CombatLogData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_CombatLogData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  target_name_ = 0u;
  attacker_name_ = 0u;
  attacker_illusion_ = false;
  target_illusion_ = false;
  inflictor_name_ = 0u;
  value_ = 0;
  health_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_CombatLogData::~CDOTAUserMsg_CombatLogData() {
  SharedDtor();
}

void CDOTAUserMsg_CombatLogData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_CombatLogData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CombatLogData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_CombatLogData_descriptor_;
}

const CDOTAUserMsg_CombatLogData& CDOTAUserMsg_CombatLogData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_CombatLogData* CDOTAUserMsg_CombatLogData::default_instance_ = NULL;

CDOTAUserMsg_CombatLogData* CDOTAUserMsg_CombatLogData::New() const {
  return new CDOTAUserMsg_CombatLogData;
}

void CDOTAUserMsg_CombatLogData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    target_name_ = 0u;
    attacker_name_ = 0u;
    attacker_illusion_ = false;
    target_illusion_ = false;
    inflictor_name_ = 0u;
    value_ = 0;
    health_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_CombatLogData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_COMBATLOG_TYPES_IsValid(value)) {
            set_type(static_cast< DOTA_COMBATLOG_TYPES >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_target_name;
        break;
      }
      
      // optional uint32 target_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &target_name_)));
          set_has_target_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attacker_name;
        break;
      }
      
      // optional uint32 attacker_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_name_)));
          set_has_attacker_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attacker_illusion;
        break;
      }
      
      // optional bool attacker_illusion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attacker_illusion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &attacker_illusion_)));
          set_has_attacker_illusion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_target_illusion;
        break;
      }
      
      // optional bool target_illusion = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_illusion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &target_illusion_)));
          set_has_target_illusion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_inflictor_name;
        break;
      }
      
      // optional uint32 inflictor_name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inflictor_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inflictor_name_)));
          set_has_inflictor_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_value;
        break;
      }
      
      // optional int32 value = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_health;
        break;
      }
      
      // optional int32 health = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_time;
        break;
      }
      
      // optional float time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_CombatLogData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // optional uint32 target_name = 2;
  if (has_target_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->target_name(), output);
  }
  
  // optional uint32 attacker_name = 3;
  if (has_attacker_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->attacker_name(), output);
  }
  
  // optional bool attacker_illusion = 4;
  if (has_attacker_illusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->attacker_illusion(), output);
  }
  
  // optional bool target_illusion = 5;
  if (has_target_illusion()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->target_illusion(), output);
  }
  
  // optional uint32 inflictor_name = 6;
  if (has_inflictor_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->inflictor_name(), output);
  }
  
  // optional int32 value = 7;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->value(), output);
  }
  
  // optional int32 health = 8;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->health(), output);
  }
  
  // optional float time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_CombatLogData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // optional uint32 target_name = 2;
  if (has_target_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->target_name(), target);
  }
  
  // optional uint32 attacker_name = 3;
  if (has_attacker_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->attacker_name(), target);
  }
  
  // optional bool attacker_illusion = 4;
  if (has_attacker_illusion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->attacker_illusion(), target);
  }
  
  // optional bool target_illusion = 5;
  if (has_target_illusion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->target_illusion(), target);
  }
  
  // optional uint32 inflictor_name = 6;
  if (has_inflictor_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->inflictor_name(), target);
  }
  
  // optional int32 value = 7;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->value(), target);
  }
  
  // optional int32 health = 8;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->health(), target);
  }
  
  // optional float time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_CombatLogData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_DAMAGE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional uint32 target_name = 2;
    if (has_target_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->target_name());
    }
    
    // optional uint32 attacker_name = 3;
    if (has_attacker_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker_name());
    }
    
    // optional bool attacker_illusion = 4;
    if (has_attacker_illusion()) {
      total_size += 1 + 1;
    }
    
    // optional bool target_illusion = 5;
    if (has_target_illusion()) {
      total_size += 1 + 1;
    }
    
    // optional uint32 inflictor_name = 6;
    if (has_inflictor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inflictor_name());
    }
    
    // optional int32 value = 7;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int32 health = 8;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float time = 9;
    if (has_time()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CombatLogData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_CombatLogData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_CombatLogData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CombatLogData::MergeFrom(const CDOTAUserMsg_CombatLogData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_target_name()) {
      set_target_name(from.target_name());
    }
    if (from.has_attacker_name()) {
      set_attacker_name(from.attacker_name());
    }
    if (from.has_attacker_illusion()) {
      set_attacker_illusion(from.attacker_illusion());
    }
    if (from.has_target_illusion()) {
      set_target_illusion(from.target_illusion());
    }
    if (from.has_inflictor_name()) {
      set_inflictor_name(from.inflictor_name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_CombatLogData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CombatLogData::CopyFrom(const CDOTAUserMsg_CombatLogData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CombatLogData::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_CombatLogData::Swap(CDOTAUserMsg_CombatLogData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(target_name_, other->target_name_);
    std::swap(attacker_name_, other->attacker_name_);
    std::swap(attacker_illusion_, other->attacker_illusion_);
    std::swap(target_illusion_, other->target_illusion_);
    std::swap(inflictor_name_, other->inflictor_name_);
    std::swap(value_, other->value_);
    std::swap(health_, other->health_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_CombatLogData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_CombatLogData_descriptor_;
  metadata.reflection = CDOTAUserMsg_CombatLogData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAUserMsg_CombatLogShowDeath::CDOTAUserMsg_CombatLogShowDeath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_CombatLogShowDeath::InitAsDefaultInstance() {
}

CDOTAUserMsg_CombatLogShowDeath::CDOTAUserMsg_CombatLogShowDeath(const CDOTAUserMsg_CombatLogShowDeath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_CombatLogShowDeath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_CombatLogShowDeath::~CDOTAUserMsg_CombatLogShowDeath() {
  SharedDtor();
}

void CDOTAUserMsg_CombatLogShowDeath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_CombatLogShowDeath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CombatLogShowDeath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_CombatLogShowDeath_descriptor_;
}

const CDOTAUserMsg_CombatLogShowDeath& CDOTAUserMsg_CombatLogShowDeath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_CombatLogShowDeath* CDOTAUserMsg_CombatLogShowDeath::default_instance_ = NULL;

CDOTAUserMsg_CombatLogShowDeath* CDOTAUserMsg_CombatLogShowDeath::New() const {
  return new CDOTAUserMsg_CombatLogShowDeath;
}

void CDOTAUserMsg_CombatLogShowDeath::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_CombatLogShowDeath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_CombatLogShowDeath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_CombatLogShowDeath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_CombatLogShowDeath::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CombatLogShowDeath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_CombatLogShowDeath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_CombatLogShowDeath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CombatLogShowDeath::MergeFrom(const CDOTAUserMsg_CombatLogShowDeath& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_CombatLogShowDeath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CombatLogShowDeath::CopyFrom(const CDOTAUserMsg_CombatLogShowDeath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CombatLogShowDeath::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_CombatLogShowDeath::Swap(CDOTAUserMsg_CombatLogShowDeath* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_CombatLogShowDeath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_CombatLogShowDeath_descriptor_;
  metadata.reflection = CDOTAUserMsg_CombatLogShowDeath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_BotChat::kPlayerIdFieldNumber;
const int CDOTAUserMsg_BotChat::kFormatFieldNumber;
const int CDOTAUserMsg_BotChat::kMessageFieldNumber;
const int CDOTAUserMsg_BotChat::kTargetFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_BotChat::CDOTAUserMsg_BotChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_BotChat::InitAsDefaultInstance() {
}

CDOTAUserMsg_BotChat::CDOTAUserMsg_BotChat(const CDOTAUserMsg_BotChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_BotChat::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  target_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_BotChat::~CDOTAUserMsg_BotChat() {
  SharedDtor();
}

void CDOTAUserMsg_BotChat::SharedDtor() {
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    delete format_;
  }
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (target_ != &::google::protobuf::internal::kEmptyString) {
    delete target_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_BotChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_BotChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_BotChat_descriptor_;
}

const CDOTAUserMsg_BotChat& CDOTAUserMsg_BotChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_BotChat* CDOTAUserMsg_BotChat::default_instance_ = NULL;

CDOTAUserMsg_BotChat* CDOTAUserMsg_BotChat::New() const {
  return new CDOTAUserMsg_BotChat;
}

void CDOTAUserMsg_BotChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0u;
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::kEmptyString) {
        format_->clear();
      }
    }
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
    if (has_target()) {
      if (target_ != &::google::protobuf::internal::kEmptyString) {
        target_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_BotChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_format;
        break;
      }
      
      // optional string format = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_message;
        break;
      }
      
      // optional string message = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_target;
        break;
      }
      
      // optional string target = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_target:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_target()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->target().data(), this->target().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_BotChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }
  
  // optional string format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->format(), output);
  }
  
  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->message(), output);
  }
  
  // optional string target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->target(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_BotChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }
  
  // optional string format = 2;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->format(), target);
  }
  
  // optional string message = 3;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }
  
  // optional string target = 4;
  if (has_target()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->target().data(), this->target().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->target(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_BotChat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }
    
    // optional string format = 2;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }
    
    // optional string message = 3;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
    // optional string target = 4;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->target());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_BotChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_BotChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_BotChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_BotChat::MergeFrom(const CDOTAUserMsg_BotChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_BotChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_BotChat::CopyFrom(const CDOTAUserMsg_BotChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_BotChat::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_BotChat::Swap(CDOTAUserMsg_BotChat* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(format_, other->format_);
    std::swap(message_, other->message_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_BotChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_BotChat_descriptor_;
  metadata.reflection = CDOTAUserMsg_BotChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_CombatHeroPositions::kIndexFieldNumber;
const int CDOTAUserMsg_CombatHeroPositions::kTimeFieldNumber;
const int CDOTAUserMsg_CombatHeroPositions::kWorldPosFieldNumber;
const int CDOTAUserMsg_CombatHeroPositions::kHealthFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_CombatHeroPositions::CDOTAUserMsg_CombatHeroPositions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_CombatHeroPositions::InitAsDefaultInstance() {
  world_pos_ = const_cast< ::CMsgVector2D*>(&::CMsgVector2D::default_instance());
}

CDOTAUserMsg_CombatHeroPositions::CDOTAUserMsg_CombatHeroPositions(const CDOTAUserMsg_CombatHeroPositions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_CombatHeroPositions::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  time_ = 0;
  world_pos_ = NULL;
  health_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_CombatHeroPositions::~CDOTAUserMsg_CombatHeroPositions() {
  SharedDtor();
}

void CDOTAUserMsg_CombatHeroPositions::SharedDtor() {
  if (this != default_instance_) {
    delete world_pos_;
  }
}

void CDOTAUserMsg_CombatHeroPositions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CombatHeroPositions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_CombatHeroPositions_descriptor_;
}

const CDOTAUserMsg_CombatHeroPositions& CDOTAUserMsg_CombatHeroPositions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_CombatHeroPositions* CDOTAUserMsg_CombatHeroPositions::default_instance_ = NULL;

CDOTAUserMsg_CombatHeroPositions* CDOTAUserMsg_CombatHeroPositions::New() const {
  return new CDOTAUserMsg_CombatHeroPositions;
}

void CDOTAUserMsg_CombatHeroPositions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    time_ = 0;
    if (has_world_pos()) {
      if (world_pos_ != NULL) world_pos_->::CMsgVector2D::Clear();
    }
    health_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_CombatHeroPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }
      
      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_world_pos;
        break;
      }
      
      // optional .CMsgVector2D world_pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_world_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_world_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_health;
        break;
      }
      
      // optional int32 health = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_health:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &health_)));
          set_has_health();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_CombatHeroPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }
  
  // optional .CMsgVector2D world_pos = 3;
  if (has_world_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->world_pos(), output);
  }
  
  // optional int32 health = 4;
  if (has_health()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->health(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_CombatHeroPositions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }
  
  // optional .CMsgVector2D world_pos = 3;
  if (has_world_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->world_pos(), target);
  }
  
  // optional int32 health = 4;
  if (has_health()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->health(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_CombatHeroPositions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // optional .CMsgVector2D world_pos = 3;
    if (has_world_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->world_pos());
    }
    
    // optional int32 health = 4;
    if (has_health()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->health());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CombatHeroPositions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_CombatHeroPositions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_CombatHeroPositions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CombatHeroPositions::MergeFrom(const CDOTAUserMsg_CombatHeroPositions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_world_pos()) {
      mutable_world_pos()->::CMsgVector2D::MergeFrom(from.world_pos());
    }
    if (from.has_health()) {
      set_health(from.health());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_CombatHeroPositions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CombatHeroPositions::CopyFrom(const CDOTAUserMsg_CombatHeroPositions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CombatHeroPositions::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_CombatHeroPositions::Swap(CDOTAUserMsg_CombatHeroPositions* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(time_, other->time_);
    std::swap(world_pos_, other->world_pos_);
    std::swap(health_, other->health_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_CombatHeroPositions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_CombatHeroPositions_descriptor_;
  metadata.reflection = CDOTAUserMsg_CombatHeroPositions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::kAbilityFieldNumber;
const int CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::kDamageFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::InitAsDefaultInstance() {
}

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SharedCtor() {
  _cached_size_ = 0;
  ability_ = 0u;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::~CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability() {
  SharedDtor();
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor_;
}

const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::default_instance_ = NULL;

CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::New() const {
  return new CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ability_ = 0u;
    damage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ability = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ability_)));
          set_has_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }
      
      // optional int32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ability = 1;
  if (has_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ability(), output);
  }
  
  // optional int32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->damage(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ability = 1;
  if (has_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ability(), target);
  }
  
  // optional int32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->damage(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ability = 1;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ability());
    }
    
    // optional int32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::MergeFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ability()) {
      set_ability(from.ability());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::Swap(CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability* other) {
  if (other != this) {
    std::swap(ability_, other->ability_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_descriptor_;
  metadata.reflection = CDOTAUserMsg_MiniKillCamInfo_Attacker_Ability_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_MiniKillCamInfo_Attacker::kAttackerFieldNumber;
const int CDOTAUserMsg_MiniKillCamInfo_Attacker::kTotalDamageFieldNumber;
const int CDOTAUserMsg_MiniKillCamInfo_Attacker::kAbilitiesFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MiniKillCamInfo_Attacker::CDOTAUserMsg_MiniKillCamInfo_Attacker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::InitAsDefaultInstance() {
}

CDOTAUserMsg_MiniKillCamInfo_Attacker::CDOTAUserMsg_MiniKillCamInfo_Attacker(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SharedCtor() {
  _cached_size_ = 0;
  attacker_ = 0u;
  total_damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MiniKillCamInfo_Attacker::~CDOTAUserMsg_MiniKillCamInfo_Attacker() {
  SharedDtor();
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo_Attacker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_;
}

const CDOTAUserMsg_MiniKillCamInfo_Attacker& CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_MiniKillCamInfo_Attacker* CDOTAUserMsg_MiniKillCamInfo_Attacker::default_instance_ = NULL;

CDOTAUserMsg_MiniKillCamInfo_Attacker* CDOTAUserMsg_MiniKillCamInfo_Attacker::New() const {
  return new CDOTAUserMsg_MiniKillCamInfo_Attacker;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    attacker_ = 0u;
    total_damage_ = 0;
  }
  abilities_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 attacker = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attacker_)));
          set_has_attacker();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total_damage;
        break;
      }
      
      // optional int32 total_damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_damage_)));
          set_has_total_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_abilities;
        break;
      }
      
      // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_abilities:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_abilities()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_abilities;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 attacker = 1;
  if (has_attacker()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->attacker(), output);
  }
  
  // optional int32 total_damage = 2;
  if (has_total_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total_damage(), output);
  }
  
  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  for (int i = 0; i < this->abilities_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->abilities(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_MiniKillCamInfo_Attacker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 attacker = 1;
  if (has_attacker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->attacker(), target);
  }
  
  // optional int32 total_damage = 2;
  if (has_total_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total_damage(), target);
  }
  
  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  for (int i = 0; i < this->abilities_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->abilities(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_MiniKillCamInfo_Attacker::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 attacker = 1;
    if (has_attacker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attacker());
    }
    
    // optional int32 total_damage = 2;
    if (has_total_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total_damage());
    }
    
  }
  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker.Ability abilities = 3;
  total_size += 1 * this->abilities_size();
  for (int i = 0; i < this->abilities_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->abilities(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MiniKillCamInfo_Attacker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MiniKillCamInfo_Attacker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::MergeFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from) {
  GOOGLE_CHECK_NE(&from, this);
  abilities_.MergeFrom(from.abilities_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_attacker()) {
      set_attacker(from.attacker());
    }
    if (from.has_total_damage()) {
      set_total_damage(from.total_damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo_Attacker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo_Attacker::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_MiniKillCamInfo_Attacker::Swap(CDOTAUserMsg_MiniKillCamInfo_Attacker* other) {
  if (other != this) {
    std::swap(attacker_, other->attacker_);
    std::swap(total_damage_, other->total_damage_);
    abilities_.Swap(&other->abilities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MiniKillCamInfo_Attacker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MiniKillCamInfo_Attacker_descriptor_;
  metadata.reflection = CDOTAUserMsg_MiniKillCamInfo_Attacker_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_MiniKillCamInfo::kAttackersFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MiniKillCamInfo::CDOTAUserMsg_MiniKillCamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_MiniKillCamInfo::InitAsDefaultInstance() {
}

CDOTAUserMsg_MiniKillCamInfo::CDOTAUserMsg_MiniKillCamInfo(const CDOTAUserMsg_MiniKillCamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MiniKillCamInfo::~CDOTAUserMsg_MiniKillCamInfo() {
  SharedDtor();
}

void CDOTAUserMsg_MiniKillCamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_MiniKillCamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MiniKillCamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MiniKillCamInfo_descriptor_;
}

const CDOTAUserMsg_MiniKillCamInfo& CDOTAUserMsg_MiniKillCamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_MiniKillCamInfo* CDOTAUserMsg_MiniKillCamInfo::default_instance_ = NULL;

CDOTAUserMsg_MiniKillCamInfo* CDOTAUserMsg_MiniKillCamInfo::New() const {
  return new CDOTAUserMsg_MiniKillCamInfo;
}

void CDOTAUserMsg_MiniKillCamInfo::Clear() {
  attackers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MiniKillCamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_attackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_attackers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_attackers;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_MiniKillCamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  for (int i = 0; i < this->attackers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attackers(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_MiniKillCamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  for (int i = 0; i < this->attackers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->attackers(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_MiniKillCamInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .CDOTAUserMsg_MiniKillCamInfo.Attacker attackers = 1;
  total_size += 1 * this->attackers_size();
  for (int i = 0; i < this->attackers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attackers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MiniKillCamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MiniKillCamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MiniKillCamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MiniKillCamInfo::MergeFrom(const CDOTAUserMsg_MiniKillCamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackers_.MergeFrom(from.attackers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MiniKillCamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MiniKillCamInfo::CopyFrom(const CDOTAUserMsg_MiniKillCamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MiniKillCamInfo::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_MiniKillCamInfo::Swap(CDOTAUserMsg_MiniKillCamInfo* other) {
  if (other != this) {
    attackers_.Swap(&other->attackers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MiniKillCamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MiniKillCamInfo_descriptor_;
  metadata.reflection = CDOTAUserMsg_MiniKillCamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_GlobalLightColor::kColorFieldNumber;
const int CDOTAUserMsg_GlobalLightColor::kDurationFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_GlobalLightColor::CDOTAUserMsg_GlobalLightColor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_GlobalLightColor::InitAsDefaultInstance() {
}

CDOTAUserMsg_GlobalLightColor::CDOTAUserMsg_GlobalLightColor(const CDOTAUserMsg_GlobalLightColor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_GlobalLightColor::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0u;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_GlobalLightColor::~CDOTAUserMsg_GlobalLightColor() {
  SharedDtor();
}

void CDOTAUserMsg_GlobalLightColor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_GlobalLightColor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlobalLightColor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_GlobalLightColor_descriptor_;
}

const CDOTAUserMsg_GlobalLightColor& CDOTAUserMsg_GlobalLightColor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_GlobalLightColor* CDOTAUserMsg_GlobalLightColor::default_instance_ = NULL;

CDOTAUserMsg_GlobalLightColor* CDOTAUserMsg_GlobalLightColor::New() const {
  return new CDOTAUserMsg_GlobalLightColor;
}

void CDOTAUserMsg_GlobalLightColor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    color_ = 0u;
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_GlobalLightColor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }
      
      // optional float duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_GlobalLightColor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }
  
  // optional float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_GlobalLightColor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->color(), target);
  }
  
  // optional float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_GlobalLightColor::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }
    
    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_GlobalLightColor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_GlobalLightColor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_GlobalLightColor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GlobalLightColor::MergeFrom(const CDOTAUserMsg_GlobalLightColor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_GlobalLightColor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GlobalLightColor::CopyFrom(const CDOTAUserMsg_GlobalLightColor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlobalLightColor::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_GlobalLightColor::Swap(CDOTAUserMsg_GlobalLightColor* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_GlobalLightColor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_GlobalLightColor_descriptor_;
  metadata.reflection = CDOTAUserMsg_GlobalLightColor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_GlobalLightDirection::kDirectionFieldNumber;
const int CDOTAUserMsg_GlobalLightDirection::kDurationFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_GlobalLightDirection::CDOTAUserMsg_GlobalLightDirection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_GlobalLightDirection::InitAsDefaultInstance() {
  direction_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_GlobalLightDirection::CDOTAUserMsg_GlobalLightDirection(const CDOTAUserMsg_GlobalLightDirection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_GlobalLightDirection::SharedCtor() {
  _cached_size_ = 0;
  direction_ = NULL;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_GlobalLightDirection::~CDOTAUserMsg_GlobalLightDirection() {
  SharedDtor();
}

void CDOTAUserMsg_GlobalLightDirection::SharedDtor() {
  if (this != default_instance_) {
    delete direction_;
  }
}

void CDOTAUserMsg_GlobalLightDirection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_GlobalLightDirection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_GlobalLightDirection_descriptor_;
}

const CDOTAUserMsg_GlobalLightDirection& CDOTAUserMsg_GlobalLightDirection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_GlobalLightDirection* CDOTAUserMsg_GlobalLightDirection::default_instance_ = NULL;

CDOTAUserMsg_GlobalLightDirection* CDOTAUserMsg_GlobalLightDirection::New() const {
  return new CDOTAUserMsg_GlobalLightDirection;
}

void CDOTAUserMsg_GlobalLightDirection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_direction()) {
      if (direction_ != NULL) direction_->::CMsgVector::Clear();
    }
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_GlobalLightDirection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVector direction = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }
      
      // optional float duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_GlobalLightDirection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgVector direction = 1;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->direction(), output);
  }
  
  // optional float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_GlobalLightDirection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgVector direction = 1;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->direction(), target);
  }
  
  // optional float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_GlobalLightDirection::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVector direction = 1;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }
    
    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_GlobalLightDirection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_GlobalLightDirection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_GlobalLightDirection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_GlobalLightDirection::MergeFrom(const CDOTAUserMsg_GlobalLightDirection& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_direction()) {
      mutable_direction()->::CMsgVector::MergeFrom(from.direction());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_GlobalLightDirection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_GlobalLightDirection::CopyFrom(const CDOTAUserMsg_GlobalLightDirection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_GlobalLightDirection::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_GlobalLightDirection::Swap(CDOTAUserMsg_GlobalLightDirection* other) {
  if (other != this) {
    std::swap(direction_, other->direction_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_GlobalLightDirection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_GlobalLightDirection_descriptor_;
  metadata.reflection = CDOTAUserMsg_GlobalLightDirection_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_LocationPing::kPlayerIdFieldNumber;
const int CDOTAUserMsg_LocationPing::kLocationPingFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_LocationPing::CDOTAUserMsg_LocationPing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_LocationPing::InitAsDefaultInstance() {
  location_ping_ = const_cast< ::CDOTAMsg_LocationPing*>(&::CDOTAMsg_LocationPing::default_instance());
}

CDOTAUserMsg_LocationPing::CDOTAUserMsg_LocationPing(const CDOTAUserMsg_LocationPing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_LocationPing::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0u;
  location_ping_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_LocationPing::~CDOTAUserMsg_LocationPing() {
  SharedDtor();
}

void CDOTAUserMsg_LocationPing::SharedDtor() {
  if (this != default_instance_) {
    delete location_ping_;
  }
}

void CDOTAUserMsg_LocationPing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_LocationPing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_LocationPing_descriptor_;
}

const CDOTAUserMsg_LocationPing& CDOTAUserMsg_LocationPing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_LocationPing* CDOTAUserMsg_LocationPing::default_instance_ = NULL;

CDOTAUserMsg_LocationPing* CDOTAUserMsg_LocationPing::New() const {
  return new CDOTAUserMsg_LocationPing;
}

void CDOTAUserMsg_LocationPing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0u;
    if (has_location_ping()) {
      if (location_ping_ != NULL) location_ping_->::CDOTAMsg_LocationPing::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_LocationPing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_location_ping;
        break;
      }
      
      // optional .CDOTAMsg_LocationPing location_ping = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location_ping:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location_ping()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_LocationPing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->player_id(), output);
  }
  
  // optional .CDOTAMsg_LocationPing location_ping = 2;
  if (has_location_ping()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->location_ping(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_LocationPing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->player_id(), target);
  }
  
  // optional .CDOTAMsg_LocationPing location_ping = 2;
  if (has_location_ping()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->location_ping(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_LocationPing::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_id());
    }
    
    // optional .CDOTAMsg_LocationPing location_ping = 2;
    if (has_location_ping()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location_ping());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_LocationPing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_LocationPing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_LocationPing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_LocationPing::MergeFrom(const CDOTAUserMsg_LocationPing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_location_ping()) {
      mutable_location_ping()->::CDOTAMsg_LocationPing::MergeFrom(from.location_ping());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_LocationPing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_LocationPing::CopyFrom(const CDOTAUserMsg_LocationPing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_LocationPing::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_LocationPing::Swap(CDOTAUserMsg_LocationPing* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(location_ping_, other->location_ping_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_LocationPing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_LocationPing_descriptor_;
  metadata.reflection = CDOTAUserMsg_LocationPing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_MinimapEvent::kEventTypeFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kEntityHandleFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kXFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kYFieldNumber;
const int CDOTAUserMsg_MinimapEvent::kDurationFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MinimapEvent::CDOTAUserMsg_MinimapEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_MinimapEvent::InitAsDefaultInstance() {
}

CDOTAUserMsg_MinimapEvent::CDOTAUserMsg_MinimapEvent(const CDOTAUserMsg_MinimapEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_MinimapEvent::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0;
  entity_handle_ = 0;
  x_ = 0;
  y_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MinimapEvent::~CDOTAUserMsg_MinimapEvent() {
  SharedDtor();
}

void CDOTAUserMsg_MinimapEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_MinimapEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MinimapEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MinimapEvent_descriptor_;
}

const CDOTAUserMsg_MinimapEvent& CDOTAUserMsg_MinimapEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_MinimapEvent* CDOTAUserMsg_MinimapEvent::default_instance_ = NULL;

CDOTAUserMsg_MinimapEvent* CDOTAUserMsg_MinimapEvent::New() const {
  return new CDOTAUserMsg_MinimapEvent;
}

void CDOTAUserMsg_MinimapEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 0;
    entity_handle_ = 0;
    x_ = 0;
    y_ = 0;
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MinimapEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entity_handle;
        break;
      }
      
      // optional int32 entity_handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }
      
      // optional int32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_y;
        break;
      }
      
      // optional int32 y = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_duration;
        break;
      }
      
      // optional int32 duration = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_MinimapEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_type(), output);
  }
  
  // optional int32 entity_handle = 2;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entity_handle(), output);
  }
  
  // optional int32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->x(), output);
  }
  
  // optional int32 y = 4;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y(), output);
  }
  
  // optional int32 duration = 5;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->duration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_MinimapEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_type(), target);
  }
  
  // optional int32 entity_handle = 2;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entity_handle(), target);
  }
  
  // optional int32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->x(), target);
  }
  
  // optional int32 y = 4;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y(), target);
  }
  
  // optional int32 duration = 5;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->duration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_MinimapEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }
    
    // optional int32 entity_handle = 2;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }
    
    // optional int32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }
    
    // optional int32 y = 4;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }
    
    // optional int32 duration = 5;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->duration());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MinimapEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MinimapEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MinimapEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MinimapEvent::MergeFrom(const CDOTAUserMsg_MinimapEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MinimapEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MinimapEvent::CopyFrom(const CDOTAUserMsg_MinimapEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MinimapEvent::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_MinimapEvent::Swap(CDOTAUserMsg_MinimapEvent* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MinimapEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MinimapEvent_descriptor_;
  metadata.reflection = CDOTAUserMsg_MinimapEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_MapLine::kPlayerIdFieldNumber;
const int CDOTAUserMsg_MapLine::kMaplineFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MapLine::CDOTAUserMsg_MapLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_MapLine::InitAsDefaultInstance() {
  mapline_ = const_cast< ::CDOTAMsg_MapLine*>(&::CDOTAMsg_MapLine::default_instance());
}

CDOTAUserMsg_MapLine::CDOTAUserMsg_MapLine(const CDOTAUserMsg_MapLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_MapLine::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = 0;
  mapline_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MapLine::~CDOTAUserMsg_MapLine() {
  SharedDtor();
}

void CDOTAUserMsg_MapLine::SharedDtor() {
  if (this != default_instance_) {
    delete mapline_;
  }
}

void CDOTAUserMsg_MapLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MapLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MapLine_descriptor_;
}

const CDOTAUserMsg_MapLine& CDOTAUserMsg_MapLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_MapLine* CDOTAUserMsg_MapLine::default_instance_ = NULL;

CDOTAUserMsg_MapLine* CDOTAUserMsg_MapLine::New() const {
  return new CDOTAUserMsg_MapLine;
}

void CDOTAUserMsg_MapLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = 0;
    if (has_mapline()) {
      if (mapline_ != NULL) mapline_->::CDOTAMsg_MapLine::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MapLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mapline;
        break;
      }
      
      // optional .CDOTAMsg_MapLine mapline = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mapline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mapline()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_MapLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_id(), output);
  }
  
  // optional .CDOTAMsg_MapLine mapline = 2;
  if (has_mapline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mapline(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_MapLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_id(), target);
  }
  
  // optional .CDOTAMsg_MapLine mapline = 2;
  if (has_mapline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mapline(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_MapLine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }
    
    // optional .CDOTAMsg_MapLine mapline = 2;
    if (has_mapline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mapline());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MapLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MapLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MapLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MapLine::MergeFrom(const CDOTAUserMsg_MapLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_mapline()) {
      mutable_mapline()->::CDOTAMsg_MapLine::MergeFrom(from.mapline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MapLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MapLine::CopyFrom(const CDOTAUserMsg_MapLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MapLine::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_MapLine::Swap(CDOTAUserMsg_MapLine* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(mapline_, other->mapline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MapLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MapLine_descriptor_;
  metadata.reflection = CDOTAUserMsg_MapLine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_MinimapDebugPoint::kLocationFieldNumber;
const int CDOTAUserMsg_MinimapDebugPoint::kColorFieldNumber;
const int CDOTAUserMsg_MinimapDebugPoint::kSizeFieldNumber;
const int CDOTAUserMsg_MinimapDebugPoint::kDurationFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_MinimapDebugPoint::CDOTAUserMsg_MinimapDebugPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_MinimapDebugPoint::InitAsDefaultInstance() {
  location_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_MinimapDebugPoint::CDOTAUserMsg_MinimapDebugPoint(const CDOTAUserMsg_MinimapDebugPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_MinimapDebugPoint::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  color_ = 0u;
  size_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_MinimapDebugPoint::~CDOTAUserMsg_MinimapDebugPoint() {
  SharedDtor();
}

void CDOTAUserMsg_MinimapDebugPoint::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
  }
}

void CDOTAUserMsg_MinimapDebugPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_MinimapDebugPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_MinimapDebugPoint_descriptor_;
}

const CDOTAUserMsg_MinimapDebugPoint& CDOTAUserMsg_MinimapDebugPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_MinimapDebugPoint* CDOTAUserMsg_MinimapDebugPoint::default_instance_ = NULL;

CDOTAUserMsg_MinimapDebugPoint* CDOTAUserMsg_MinimapDebugPoint::New() const {
  return new CDOTAUserMsg_MinimapDebugPoint;
}

void CDOTAUserMsg_MinimapDebugPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_location()) {
      if (location_ != NULL) location_->::CMsgVector::Clear();
    }
    color_ = 0u;
    size_ = 0;
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_MinimapDebugPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVector location = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_color;
        break;
      }
      
      // optional uint32 color = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }
      
      // optional int32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }
      
      // optional float duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_MinimapDebugPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgVector location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(), output);
  }
  
  // optional uint32 color = 2;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->color(), output);
  }
  
  // optional int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }
  
  // optional float duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_MinimapDebugPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgVector location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }
  
  // optional uint32 color = 2;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->color(), target);
  }
  
  // optional int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }
  
  // optional float duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_MinimapDebugPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVector location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }
    
    // optional uint32 color = 2;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }
    
    // optional int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_MinimapDebugPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_MinimapDebugPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_MinimapDebugPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_MinimapDebugPoint::MergeFrom(const CDOTAUserMsg_MinimapDebugPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::CMsgVector::MergeFrom(from.location());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_MinimapDebugPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_MinimapDebugPoint::CopyFrom(const CDOTAUserMsg_MinimapDebugPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_MinimapDebugPoint::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_MinimapDebugPoint::Swap(CDOTAUserMsg_MinimapDebugPoint* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(color_, other->color_);
    std::swap(size_, other->size_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_MinimapDebugPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_MinimapDebugPoint_descriptor_;
  metadata.reflection = CDOTAUserMsg_MinimapDebugPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_CreateLinearProjectile::kOriginFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kVelocityFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kLatencyFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kEntindexFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kParticleIndexFieldNumber;
const int CDOTAUserMsg_CreateLinearProjectile::kHandleFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_CreateLinearProjectile::CDOTAUserMsg_CreateLinearProjectile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_CreateLinearProjectile::InitAsDefaultInstance() {
  origin_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  velocity_ = const_cast< ::CMsgVector2D*>(&::CMsgVector2D::default_instance());
}

CDOTAUserMsg_CreateLinearProjectile::CDOTAUserMsg_CreateLinearProjectile(const CDOTAUserMsg_CreateLinearProjectile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_CreateLinearProjectile::SharedCtor() {
  _cached_size_ = 0;
  origin_ = NULL;
  velocity_ = NULL;
  latency_ = 0;
  entindex_ = 0;
  particle_index_ = 0;
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_CreateLinearProjectile::~CDOTAUserMsg_CreateLinearProjectile() {
  SharedDtor();
}

void CDOTAUserMsg_CreateLinearProjectile::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
    delete velocity_;
  }
}

void CDOTAUserMsg_CreateLinearProjectile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_CreateLinearProjectile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_CreateLinearProjectile_descriptor_;
}

const CDOTAUserMsg_CreateLinearProjectile& CDOTAUserMsg_CreateLinearProjectile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_CreateLinearProjectile* CDOTAUserMsg_CreateLinearProjectile::default_instance_ = NULL;

CDOTAUserMsg_CreateLinearProjectile* CDOTAUserMsg_CreateLinearProjectile::New() const {
  return new CDOTAUserMsg_CreateLinearProjectile;
}

void CDOTAUserMsg_CreateLinearProjectile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_origin()) {
      if (origin_ != NULL) origin_->::CMsgVector::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::CMsgVector2D::Clear();
    }
    latency_ = 0;
    entindex_ = 0;
    particle_index_ = 0;
    handle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_CreateLinearProjectile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CMsgVector origin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_velocity;
        break;
      }
      
      // optional .CMsgVector2D velocity = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_latency;
        break;
      }
      
      // optional int32 latency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_latency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latency_)));
          set_has_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_entindex;
        break;
      }
      
      // optional int32 entindex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_particle_index;
        break;
      }
      
      // optional int32 particle_index = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_particle_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &particle_index_)));
          set_has_particle_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_handle;
        break;
      }
      
      // optional int32 handle = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_CreateLinearProjectile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CMsgVector origin = 1;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->origin(), output);
  }
  
  // optional .CMsgVector2D velocity = 2;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->velocity(), output);
  }
  
  // optional int32 latency = 3;
  if (has_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->latency(), output);
  }
  
  // optional int32 entindex = 4;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->entindex(), output);
  }
  
  // optional int32 particle_index = 5;
  if (has_particle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->particle_index(), output);
  }
  
  // optional int32 handle = 6;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_CreateLinearProjectile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CMsgVector origin = 1;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->origin(), target);
  }
  
  // optional .CMsgVector2D velocity = 2;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->velocity(), target);
  }
  
  // optional int32 latency = 3;
  if (has_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->latency(), target);
  }
  
  // optional int32 entindex = 4;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->entindex(), target);
  }
  
  // optional int32 particle_index = 5;
  if (has_particle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->particle_index(), target);
  }
  
  // optional int32 handle = 6;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_CreateLinearProjectile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CMsgVector origin = 1;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }
    
    // optional .CMsgVector2D velocity = 2;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }
    
    // optional int32 latency = 3;
    if (has_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->latency());
    }
    
    // optional int32 entindex = 4;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }
    
    // optional int32 particle_index = 5;
    if (has_particle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->particle_index());
    }
    
    // optional int32 handle = 6;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_CreateLinearProjectile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_CreateLinearProjectile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_CreateLinearProjectile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_CreateLinearProjectile::MergeFrom(const CDOTAUserMsg_CreateLinearProjectile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_origin()) {
      mutable_origin()->::CMsgVector::MergeFrom(from.origin());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::CMsgVector2D::MergeFrom(from.velocity());
    }
    if (from.has_latency()) {
      set_latency(from.latency());
    }
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
    if (from.has_particle_index()) {
      set_particle_index(from.particle_index());
    }
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_CreateLinearProjectile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_CreateLinearProjectile::CopyFrom(const CDOTAUserMsg_CreateLinearProjectile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_CreateLinearProjectile::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_CreateLinearProjectile::Swap(CDOTAUserMsg_CreateLinearProjectile* other) {
  if (other != this) {
    std::swap(origin_, other->origin_);
    std::swap(velocity_, other->velocity_);
    std::swap(latency_, other->latency_);
    std::swap(entindex_, other->entindex_);
    std::swap(particle_index_, other->particle_index_);
    std::swap(handle_, other->handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_CreateLinearProjectile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_CreateLinearProjectile_descriptor_;
  metadata.reflection = CDOTAUserMsg_CreateLinearProjectile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_DestroyLinearProjectile::kHandleFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_DestroyLinearProjectile::CDOTAUserMsg_DestroyLinearProjectile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_DestroyLinearProjectile::InitAsDefaultInstance() {
}

CDOTAUserMsg_DestroyLinearProjectile::CDOTAUserMsg_DestroyLinearProjectile(const CDOTAUserMsg_DestroyLinearProjectile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_DestroyLinearProjectile::SharedCtor() {
  _cached_size_ = 0;
  handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_DestroyLinearProjectile::~CDOTAUserMsg_DestroyLinearProjectile() {
  SharedDtor();
}

void CDOTAUserMsg_DestroyLinearProjectile::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_DestroyLinearProjectile::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_DestroyLinearProjectile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_DestroyLinearProjectile_descriptor_;
}

const CDOTAUserMsg_DestroyLinearProjectile& CDOTAUserMsg_DestroyLinearProjectile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_DestroyLinearProjectile* CDOTAUserMsg_DestroyLinearProjectile::default_instance_ = NULL;

CDOTAUserMsg_DestroyLinearProjectile* CDOTAUserMsg_DestroyLinearProjectile::New() const {
  return new CDOTAUserMsg_DestroyLinearProjectile;
}

void CDOTAUserMsg_DestroyLinearProjectile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    handle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_DestroyLinearProjectile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &handle_)));
          set_has_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_DestroyLinearProjectile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 handle = 1;
  if (has_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_DestroyLinearProjectile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 handle = 1;
  if (has_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_DestroyLinearProjectile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 handle = 1;
    if (has_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_DestroyLinearProjectile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_DestroyLinearProjectile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_DestroyLinearProjectile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_DestroyLinearProjectile::MergeFrom(const CDOTAUserMsg_DestroyLinearProjectile& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_handle()) {
      set_handle(from.handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_DestroyLinearProjectile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_DestroyLinearProjectile::CopyFrom(const CDOTAUserMsg_DestroyLinearProjectile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DestroyLinearProjectile::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_DestroyLinearProjectile::Swap(CDOTAUserMsg_DestroyLinearProjectile* other) {
  if (other != this) {
    std::swap(handle_, other->handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_DestroyLinearProjectile::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_DestroyLinearProjectile_descriptor_;
  metadata.reflection = CDOTAUserMsg_DestroyLinearProjectile_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_DodgeTrackingProjectiles::kEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_DodgeTrackingProjectiles::CDOTAUserMsg_DodgeTrackingProjectiles()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_DodgeTrackingProjectiles::InitAsDefaultInstance() {
}

CDOTAUserMsg_DodgeTrackingProjectiles::CDOTAUserMsg_DodgeTrackingProjectiles(const CDOTAUserMsg_DodgeTrackingProjectiles& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SharedCtor() {
  _cached_size_ = 0;
  entindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_DodgeTrackingProjectiles::~CDOTAUserMsg_DodgeTrackingProjectiles() {
  SharedDtor();
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_DodgeTrackingProjectiles::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_DodgeTrackingProjectiles_descriptor_;
}

const CDOTAUserMsg_DodgeTrackingProjectiles& CDOTAUserMsg_DodgeTrackingProjectiles::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_DodgeTrackingProjectiles* CDOTAUserMsg_DodgeTrackingProjectiles::default_instance_ = NULL;

CDOTAUserMsg_DodgeTrackingProjectiles* CDOTAUserMsg_DodgeTrackingProjectiles::New() const {
  return new CDOTAUserMsg_DodgeTrackingProjectiles;
}

void CDOTAUserMsg_DodgeTrackingProjectiles::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_DodgeTrackingProjectiles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_DodgeTrackingProjectiles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 entindex = 1;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_DodgeTrackingProjectiles::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 entindex = 1;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_DodgeTrackingProjectiles::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 entindex = 1;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_DodgeTrackingProjectiles::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_DodgeTrackingProjectiles* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_DodgeTrackingProjectiles*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_DodgeTrackingProjectiles::MergeFrom(const CDOTAUserMsg_DodgeTrackingProjectiles& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_DodgeTrackingProjectiles::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_DodgeTrackingProjectiles::CopyFrom(const CDOTAUserMsg_DodgeTrackingProjectiles& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_DodgeTrackingProjectiles::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CDOTAUserMsg_DodgeTrackingProjectiles::Swap(CDOTAUserMsg_DodgeTrackingProjectiles* other) {
  if (other != this) {
    std::swap(entindex_, other->entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_DodgeTrackingProjectiles::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_DodgeTrackingProjectiles_descriptor_;
  metadata.reflection = CDOTAUserMsg_DodgeTrackingProjectiles_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_SpectatorPlayerClick::kEntindexFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerClick::kOrderTypeFieldNumber;
const int CDOTAUserMsg_SpectatorPlayerClick::kTargetIndexFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_SpectatorPlayerClick::CDOTAUserMsg_SpectatorPlayerClick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_SpectatorPlayerClick::InitAsDefaultInstance() {
}

CDOTAUserMsg_SpectatorPlayerClick::CDOTAUserMsg_SpectatorPlayerClick(const CDOTAUserMsg_SpectatorPlayerClick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_SpectatorPlayerClick::SharedCtor() {
  _cached_size_ = 0;
  entindex_ = 0;
  order_type_ = 0;
  target_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_SpectatorPlayerClick::~CDOTAUserMsg_SpectatorPlayerClick() {
  SharedDtor();
}

void CDOTAUserMsg_SpectatorPlayerClick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_SpectatorPlayerClick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SpectatorPlayerClick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_SpectatorPlayerClick_descriptor_;
}

const CDOTAUserMsg_SpectatorPlayerClick& CDOTAUserMsg_SpectatorPlayerClick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_SpectatorPlayerClick* CDOTAUserMsg_SpectatorPlayerClick::default_instance_ = NULL;

CDOTAUserMsg_SpectatorPlayerClick* CDOTAUserMsg_SpectatorPlayerClick::New() const {
  return new CDOTAUserMsg_SpectatorPlayerClick;
}

void CDOTAUserMsg_SpectatorPlayerClick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entindex_ = 0;
    order_type_ = 0;
    target_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_SpectatorPlayerClick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 entindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_order_type;
        break;
      }
      
      // optional int32 order_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_order_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_type_)));
          set_has_order_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_index;
        break;
      }
      
      // optional int32 target_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_index_)));
          set_has_target_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_SpectatorPlayerClick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 entindex = 1;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entindex(), output);
  }
  
  // optional int32 order_type = 2;
  if (has_order_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->order_type(), output);
  }
  
  // optional int32 target_index = 3;
  if (has_target_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_SpectatorPlayerClick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 entindex = 1;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entindex(), target);
  }
  
  // optional int32 order_type = 2;
  if (has_order_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->order_type(), target);
  }
  
  // optional int32 target_index = 3;
  if (has_target_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_SpectatorPlayerClick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 entindex = 1;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }
    
    // optional int32 order_type = 2;
    if (has_order_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_type());
    }
    
    // optional int32 target_index = 3;
    if (has_target_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SpectatorPlayerClick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_SpectatorPlayerClick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_SpectatorPlayerClick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SpectatorPlayerClick::MergeFrom(const CDOTAUserMsg_SpectatorPlayerClick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
    if (from.has_order_type()) {
      set_order_type(from.order_type());
    }
    if (from.has_target_index()) {
      set_target_index(from.target_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_SpectatorPlayerClick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SpectatorPlayerClick::CopyFrom(const CDOTAUserMsg_SpectatorPlayerClick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SpectatorPlayerClick::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CDOTAUserMsg_SpectatorPlayerClick::Swap(CDOTAUserMsg_SpectatorPlayerClick* other) {
  if (other != this) {
    std::swap(entindex_, other->entindex_);
    std::swap(order_type_, other->order_type_);
    std::swap(target_index_, other->target_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_SpectatorPlayerClick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_SpectatorPlayerClick_descriptor_;
  metadata.reflection = CDOTAUserMsg_SpectatorPlayerClick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_NevermoreRequiem::kEntityHandleFieldNumber;
const int CDOTAUserMsg_NevermoreRequiem::kLinesFieldNumber;
const int CDOTAUserMsg_NevermoreRequiem::kOriginFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_NevermoreRequiem::CDOTAUserMsg_NevermoreRequiem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_NevermoreRequiem::InitAsDefaultInstance() {
  origin_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_NevermoreRequiem::CDOTAUserMsg_NevermoreRequiem(const CDOTAUserMsg_NevermoreRequiem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_NevermoreRequiem::SharedCtor() {
  _cached_size_ = 0;
  entity_handle_ = 0;
  lines_ = 0;
  origin_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_NevermoreRequiem::~CDOTAUserMsg_NevermoreRequiem() {
  SharedDtor();
}

void CDOTAUserMsg_NevermoreRequiem::SharedDtor() {
  if (this != default_instance_) {
    delete origin_;
  }
}

void CDOTAUserMsg_NevermoreRequiem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_NevermoreRequiem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_NevermoreRequiem_descriptor_;
}

const CDOTAUserMsg_NevermoreRequiem& CDOTAUserMsg_NevermoreRequiem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_NevermoreRequiem* CDOTAUserMsg_NevermoreRequiem::default_instance_ = NULL;

CDOTAUserMsg_NevermoreRequiem* CDOTAUserMsg_NevermoreRequiem::New() const {
  return new CDOTAUserMsg_NevermoreRequiem;
}

void CDOTAUserMsg_NevermoreRequiem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entity_handle_ = 0;
    lines_ = 0;
    if (has_origin()) {
      if (origin_ != NULL) origin_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_NevermoreRequiem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity_handle = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lines;
        break;
      }
      
      // optional int32 lines = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lines:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lines_)));
          set_has_lines();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_origin;
        break;
      }
      
      // optional .CMsgVector origin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_NevermoreRequiem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 entity_handle = 1;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_handle(), output);
  }
  
  // optional int32 lines = 2;
  if (has_lines()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lines(), output);
  }
  
  // optional .CMsgVector origin = 3;
  if (has_origin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->origin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_NevermoreRequiem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 entity_handle = 1;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_handle(), target);
  }
  
  // optional int32 lines = 2;
  if (has_lines()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lines(), target);
  }
  
  // optional .CMsgVector origin = 3;
  if (has_origin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->origin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_NevermoreRequiem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entity_handle = 1;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }
    
    // optional int32 lines = 2;
    if (has_lines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lines());
    }
    
    // optional .CMsgVector origin = 3;
    if (has_origin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_NevermoreRequiem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_NevermoreRequiem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_NevermoreRequiem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_NevermoreRequiem::MergeFrom(const CDOTAUserMsg_NevermoreRequiem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
    if (from.has_lines()) {
      set_lines(from.lines());
    }
    if (from.has_origin()) {
      mutable_origin()->::CMsgVector::MergeFrom(from.origin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_NevermoreRequiem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_NevermoreRequiem::CopyFrom(const CDOTAUserMsg_NevermoreRequiem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_NevermoreRequiem::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_NevermoreRequiem::Swap(CDOTAUserMsg_NevermoreRequiem* other) {
  if (other != this) {
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(lines_, other->lines_);
    std::swap(origin_, other->origin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_NevermoreRequiem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_NevermoreRequiem_descriptor_;
  metadata.reflection = CDOTAUserMsg_NevermoreRequiem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_InvalidCommand::kMessageFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_InvalidCommand::CDOTAUserMsg_InvalidCommand()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_InvalidCommand::InitAsDefaultInstance() {
}

CDOTAUserMsg_InvalidCommand::CDOTAUserMsg_InvalidCommand(const CDOTAUserMsg_InvalidCommand& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_InvalidCommand::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_InvalidCommand::~CDOTAUserMsg_InvalidCommand() {
  SharedDtor();
}

void CDOTAUserMsg_InvalidCommand::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_InvalidCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_InvalidCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_InvalidCommand_descriptor_;
}

const CDOTAUserMsg_InvalidCommand& CDOTAUserMsg_InvalidCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_InvalidCommand* CDOTAUserMsg_InvalidCommand::default_instance_ = NULL;

CDOTAUserMsg_InvalidCommand* CDOTAUserMsg_InvalidCommand::New() const {
  return new CDOTAUserMsg_InvalidCommand;
}

void CDOTAUserMsg_InvalidCommand::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_InvalidCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_InvalidCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_InvalidCommand::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_InvalidCommand::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_InvalidCommand::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_InvalidCommand* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_InvalidCommand*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_InvalidCommand::MergeFrom(const CDOTAUserMsg_InvalidCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_InvalidCommand::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_InvalidCommand::CopyFrom(const CDOTAUserMsg_InvalidCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_InvalidCommand::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_InvalidCommand::Swap(CDOTAUserMsg_InvalidCommand* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_InvalidCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_InvalidCommand_descriptor_;
  metadata.reflection = CDOTAUserMsg_InvalidCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_HudError::kOrderIdFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_HudError::CDOTAUserMsg_HudError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_HudError::InitAsDefaultInstance() {
}

CDOTAUserMsg_HudError::CDOTAUserMsg_HudError(const CDOTAUserMsg_HudError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_HudError::SharedCtor() {
  _cached_size_ = 0;
  order_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_HudError::~CDOTAUserMsg_HudError() {
  SharedDtor();
}

void CDOTAUserMsg_HudError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_HudError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_HudError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_HudError_descriptor_;
}

const CDOTAUserMsg_HudError& CDOTAUserMsg_HudError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_HudError* CDOTAUserMsg_HudError::default_instance_ = NULL;

CDOTAUserMsg_HudError* CDOTAUserMsg_HudError::New() const {
  return new CDOTAUserMsg_HudError;
}

void CDOTAUserMsg_HudError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    order_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_HudError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 order_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_HudError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 order_id = 1;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order_id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_HudError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 order_id = 1;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order_id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_HudError::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 order_id = 1;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->order_id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_HudError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_HudError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_HudError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_HudError::MergeFrom(const CDOTAUserMsg_HudError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_HudError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_HudError::CopyFrom(const CDOTAUserMsg_HudError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_HudError::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_HudError::Swap(CDOTAUserMsg_HudError* other) {
  if (other != this) {
    std::swap(order_id_, other->order_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_HudError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_HudError_descriptor_;
  metadata.reflection = CDOTAUserMsg_HudError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_SharedCooldown::kEntindexFieldNumber;
const int CDOTAUserMsg_SharedCooldown::kNameFieldNumber;
const int CDOTAUserMsg_SharedCooldown::kCooldownFieldNumber;
const int CDOTAUserMsg_SharedCooldown::kNameIndexFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_SharedCooldown::CDOTAUserMsg_SharedCooldown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_SharedCooldown::InitAsDefaultInstance() {
}

CDOTAUserMsg_SharedCooldown::CDOTAUserMsg_SharedCooldown(const CDOTAUserMsg_SharedCooldown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_SharedCooldown::SharedCtor() {
  _cached_size_ = 0;
  entindex_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cooldown_ = 0;
  name_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_SharedCooldown::~CDOTAUserMsg_SharedCooldown() {
  SharedDtor();
}

void CDOTAUserMsg_SharedCooldown::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_SharedCooldown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SharedCooldown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_SharedCooldown_descriptor_;
}

const CDOTAUserMsg_SharedCooldown& CDOTAUserMsg_SharedCooldown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_SharedCooldown* CDOTAUserMsg_SharedCooldown::default_instance_ = NULL;

CDOTAUserMsg_SharedCooldown* CDOTAUserMsg_SharedCooldown::New() const {
  return new CDOTAUserMsg_SharedCooldown;
}

void CDOTAUserMsg_SharedCooldown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entindex_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    cooldown_ = 0;
    name_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_SharedCooldown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entindex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entindex_)));
          set_has_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_cooldown;
        break;
      }
      
      // optional float cooldown = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cooldown:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cooldown_)));
          set_has_cooldown();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_name_index;
        break;
      }
      
      // optional int32 name_index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_index_)));
          set_has_name_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_SharedCooldown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 entindex = 1;
  if (has_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entindex(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional float cooldown = 3;
  if (has_cooldown()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->cooldown(), output);
  }
  
  // optional int32 name_index = 4;
  if (has_name_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->name_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_SharedCooldown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 entindex = 1;
  if (has_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entindex(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional float cooldown = 3;
  if (has_cooldown()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->cooldown(), target);
  }
  
  // optional int32 name_index = 4;
  if (has_name_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->name_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_SharedCooldown::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 entindex = 1;
    if (has_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entindex());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional float cooldown = 3;
    if (has_cooldown()) {
      total_size += 1 + 4;
    }
    
    // optional int32 name_index = 4;
    if (has_name_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SharedCooldown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_SharedCooldown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_SharedCooldown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SharedCooldown::MergeFrom(const CDOTAUserMsg_SharedCooldown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entindex()) {
      set_entindex(from.entindex());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_cooldown()) {
      set_cooldown(from.cooldown());
    }
    if (from.has_name_index()) {
      set_name_index(from.name_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_SharedCooldown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SharedCooldown::CopyFrom(const CDOTAUserMsg_SharedCooldown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SharedCooldown::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_SharedCooldown::Swap(CDOTAUserMsg_SharedCooldown* other) {
  if (other != this) {
    std::swap(entindex_, other->entindex_);
    std::swap(name_, other->name_);
    std::swap(cooldown_, other->cooldown_);
    std::swap(name_index_, other->name_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_SharedCooldown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_SharedCooldown_descriptor_;
  metadata.reflection = CDOTAUserMsg_SharedCooldown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_SetNextAutobuyItem::kNameFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_SetNextAutobuyItem::CDOTAUserMsg_SetNextAutobuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_SetNextAutobuyItem::InitAsDefaultInstance() {
}

CDOTAUserMsg_SetNextAutobuyItem::CDOTAUserMsg_SetNextAutobuyItem(const CDOTAUserMsg_SetNextAutobuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_SetNextAutobuyItem::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_SetNextAutobuyItem::~CDOTAUserMsg_SetNextAutobuyItem() {
  SharedDtor();
}

void CDOTAUserMsg_SetNextAutobuyItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_SetNextAutobuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_SetNextAutobuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_SetNextAutobuyItem_descriptor_;
}

const CDOTAUserMsg_SetNextAutobuyItem& CDOTAUserMsg_SetNextAutobuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_SetNextAutobuyItem* CDOTAUserMsg_SetNextAutobuyItem::default_instance_ = NULL;

CDOTAUserMsg_SetNextAutobuyItem* CDOTAUserMsg_SetNextAutobuyItem::New() const {
  return new CDOTAUserMsg_SetNextAutobuyItem;
}

void CDOTAUserMsg_SetNextAutobuyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_SetNextAutobuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_SetNextAutobuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_SetNextAutobuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_SetNextAutobuyItem::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_SetNextAutobuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_SetNextAutobuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_SetNextAutobuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_SetNextAutobuyItem::MergeFrom(const CDOTAUserMsg_SetNextAutobuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_SetNextAutobuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_SetNextAutobuyItem::CopyFrom(const CDOTAUserMsg_SetNextAutobuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_SetNextAutobuyItem::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_SetNextAutobuyItem::Swap(CDOTAUserMsg_SetNextAutobuyItem* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_SetNextAutobuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_SetNextAutobuyItem_descriptor_;
  metadata.reflection = CDOTAUserMsg_SetNextAutobuyItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* CDOTAResponseQuerySerialized_Fact_ValueType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAResponseQuerySerialized_Fact_ValueType_descriptor_;
}
bool CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::NUMERIC;
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::STRING;
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::ValueType_MIN;
const CDOTAResponseQuerySerialized_Fact_ValueType CDOTAResponseQuerySerialized_Fact::ValueType_MAX;
const int CDOTAResponseQuerySerialized_Fact::ValueType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int CDOTAResponseQuerySerialized_Fact::kKeyFieldNumber;
const int CDOTAResponseQuerySerialized_Fact::kValtypeFieldNumber;
const int CDOTAResponseQuerySerialized_Fact::kValNumericFieldNumber;
const int CDOTAResponseQuerySerialized_Fact::kValStringFieldNumber;
#endif  // !_MSC_VER

CDOTAResponseQuerySerialized_Fact::CDOTAResponseQuerySerialized_Fact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAResponseQuerySerialized_Fact::InitAsDefaultInstance() {
}

CDOTAResponseQuerySerialized_Fact::CDOTAResponseQuerySerialized_Fact(const CDOTAResponseQuerySerialized_Fact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAResponseQuerySerialized_Fact::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  valtype_ = 1;
  val_numeric_ = 0;
  val_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAResponseQuerySerialized_Fact::~CDOTAResponseQuerySerialized_Fact() {
  SharedDtor();
}

void CDOTAResponseQuerySerialized_Fact::SharedDtor() {
  if (val_string_ != &::google::protobuf::internal::kEmptyString) {
    delete val_string_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAResponseQuerySerialized_Fact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAResponseQuerySerialized_Fact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAResponseQuerySerialized_Fact_descriptor_;
}

const CDOTAResponseQuerySerialized_Fact& CDOTAResponseQuerySerialized_Fact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAResponseQuerySerialized_Fact* CDOTAResponseQuerySerialized_Fact::default_instance_ = NULL;

CDOTAResponseQuerySerialized_Fact* CDOTAResponseQuerySerialized_Fact::New() const {
  return new CDOTAResponseQuerySerialized_Fact;
}

void CDOTAResponseQuerySerialized_Fact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    valtype_ = 1;
    val_numeric_ = 0;
    if (has_val_string()) {
      if (val_string_ != &::google::protobuf::internal::kEmptyString) {
        val_string_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAResponseQuerySerialized_Fact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_valtype;
        break;
      }
      
      // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CDOTAResponseQuerySerialized_Fact_ValueType_IsValid(value)) {
            set_valtype(static_cast< ::CDOTAResponseQuerySerialized_Fact_ValueType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_val_numeric;
        break;
      }
      
      // optional float val_numeric = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_val_numeric:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &val_numeric_)));
          set_has_val_numeric();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_val_string;
        break;
      }
      
      // optional string val_string = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_val_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->val_string().data(), this->val_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAResponseQuerySerialized_Fact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }
  
  // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
  if (has_valtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->valtype(), output);
  }
  
  // optional float val_numeric = 3;
  if (has_val_numeric()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->val_numeric(), output);
  }
  
  // optional string val_string = 4;
  if (has_val_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->val_string(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAResponseQuerySerialized_Fact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }
  
  // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
  if (has_valtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->valtype(), target);
  }
  
  // optional float val_numeric = 3;
  if (has_val_numeric()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->val_numeric(), target);
  }
  
  // optional string val_string = 4;
  if (has_val_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->val_string().data(), this->val_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->val_string(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAResponseQuerySerialized_Fact::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }
    
    // required .CDOTAResponseQuerySerialized.Fact.ValueType valtype = 2 [default = NUMERIC];
    if (has_valtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->valtype());
    }
    
    // optional float val_numeric = 3;
    if (has_val_numeric()) {
      total_size += 1 + 4;
    }
    
    // optional string val_string = 4;
    if (has_val_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->val_string());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAResponseQuerySerialized_Fact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAResponseQuerySerialized_Fact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAResponseQuerySerialized_Fact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAResponseQuerySerialized_Fact::MergeFrom(const CDOTAResponseQuerySerialized_Fact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_valtype()) {
      set_valtype(from.valtype());
    }
    if (from.has_val_numeric()) {
      set_val_numeric(from.val_numeric());
    }
    if (from.has_val_string()) {
      set_val_string(from.val_string());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAResponseQuerySerialized_Fact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAResponseQuerySerialized_Fact::CopyFrom(const CDOTAResponseQuerySerialized_Fact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAResponseQuerySerialized_Fact::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CDOTAResponseQuerySerialized_Fact::Swap(CDOTAResponseQuerySerialized_Fact* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(valtype_, other->valtype_);
    std::swap(val_numeric_, other->val_numeric_);
    std::swap(val_string_, other->val_string_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAResponseQuerySerialized_Fact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAResponseQuerySerialized_Fact_descriptor_;
  metadata.reflection = CDOTAResponseQuerySerialized_Fact_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAResponseQuerySerialized::kFactsFieldNumber;
#endif  // !_MSC_VER

CDOTAResponseQuerySerialized::CDOTAResponseQuerySerialized()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAResponseQuerySerialized::InitAsDefaultInstance() {
}

CDOTAResponseQuerySerialized::CDOTAResponseQuerySerialized(const CDOTAResponseQuerySerialized& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAResponseQuerySerialized::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAResponseQuerySerialized::~CDOTAResponseQuerySerialized() {
  SharedDtor();
}

void CDOTAResponseQuerySerialized::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAResponseQuerySerialized::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAResponseQuerySerialized::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAResponseQuerySerialized_descriptor_;
}

const CDOTAResponseQuerySerialized& CDOTAResponseQuerySerialized::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAResponseQuerySerialized* CDOTAResponseQuerySerialized::default_instance_ = NULL;

CDOTAResponseQuerySerialized* CDOTAResponseQuerySerialized::New() const {
  return new CDOTAResponseQuerySerialized;
}

void CDOTAResponseQuerySerialized::Clear() {
  facts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAResponseQuerySerialized::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_facts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_facts()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_facts;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAResponseQuerySerialized::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
  for (int i = 0; i < this->facts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->facts(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAResponseQuerySerialized::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
  for (int i = 0; i < this->facts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->facts(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAResponseQuerySerialized::ByteSize() const {
  int total_size = 0;
  
  // repeated .CDOTAResponseQuerySerialized.Fact facts = 1;
  total_size += 1 * this->facts_size();
  for (int i = 0; i < this->facts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->facts(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAResponseQuerySerialized::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAResponseQuerySerialized* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAResponseQuerySerialized*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAResponseQuerySerialized::MergeFrom(const CDOTAResponseQuerySerialized& from) {
  GOOGLE_CHECK_NE(&from, this);
  facts_.MergeFrom(from.facts_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAResponseQuerySerialized::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAResponseQuerySerialized::CopyFrom(const CDOTAResponseQuerySerialized& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAResponseQuerySerialized::IsInitialized() const {
  
  for (int i = 0; i < facts_size(); i++) {
    if (!this->facts(i).IsInitialized()) return false;
  }
  return true;
}

void CDOTAResponseQuerySerialized::Swap(CDOTAResponseQuerySerialized* other) {
  if (other != this) {
    facts_.Swap(&other->facts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAResponseQuerySerialized::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAResponseQuerySerialized_descriptor_;
  metadata.reflection = CDOTAResponseQuerySerialized_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTASpeechMatchOnClient::kConceptFieldNumber;
const int CDOTASpeechMatchOnClient::kRecipientTypeFieldNumber;
const int CDOTASpeechMatchOnClient::kResponsequeryFieldNumber;
const int CDOTASpeechMatchOnClient::kRandomseedFieldNumber;
#endif  // !_MSC_VER

CDOTASpeechMatchOnClient::CDOTASpeechMatchOnClient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTASpeechMatchOnClient::InitAsDefaultInstance() {
  responsequery_ = const_cast< ::CDOTAResponseQuerySerialized*>(&::CDOTAResponseQuerySerialized::default_instance());
}

CDOTASpeechMatchOnClient::CDOTASpeechMatchOnClient(const CDOTASpeechMatchOnClient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTASpeechMatchOnClient::SharedCtor() {
  _cached_size_ = 0;
  concept_ = 0;
  recipient_type_ = 0;
  responsequery_ = NULL;
  randomseed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTASpeechMatchOnClient::~CDOTASpeechMatchOnClient() {
  SharedDtor();
}

void CDOTASpeechMatchOnClient::SharedDtor() {
  if (this != default_instance_) {
    delete responsequery_;
  }
}

void CDOTASpeechMatchOnClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTASpeechMatchOnClient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTASpeechMatchOnClient_descriptor_;
}

const CDOTASpeechMatchOnClient& CDOTASpeechMatchOnClient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTASpeechMatchOnClient* CDOTASpeechMatchOnClient::default_instance_ = NULL;

CDOTASpeechMatchOnClient* CDOTASpeechMatchOnClient::New() const {
  return new CDOTASpeechMatchOnClient;
}

void CDOTASpeechMatchOnClient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    concept_ = 0;
    recipient_type_ = 0;
    if (has_responsequery()) {
      if (responsequery_ != NULL) responsequery_->::CDOTAResponseQuerySerialized::Clear();
    }
    randomseed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTASpeechMatchOnClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 concept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &concept_)));
          set_has_concept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_recipient_type;
        break;
      }
      
      // optional int32 recipient_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recipient_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recipient_type_)));
          set_has_recipient_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_responsequery;
        break;
      }
      
      // optional .CDOTAResponseQuerySerialized responsequery = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_responsequery:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_responsequery()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_randomseed;
        break;
      }
      
      // optional sfixed32 randomseed = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_randomseed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &randomseed_)));
          set_has_randomseed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTASpeechMatchOnClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 concept = 1;
  if (has_concept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->concept(), output);
  }
  
  // optional int32 recipient_type = 2;
  if (has_recipient_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recipient_type(), output);
  }
  
  // optional .CDOTAResponseQuerySerialized responsequery = 3;
  if (has_responsequery()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->responsequery(), output);
  }
  
  // optional sfixed32 randomseed = 4 [default = 0];
  if (has_randomseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(4, this->randomseed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTASpeechMatchOnClient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 concept = 1;
  if (has_concept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->concept(), target);
  }
  
  // optional int32 recipient_type = 2;
  if (has_recipient_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recipient_type(), target);
  }
  
  // optional .CDOTAResponseQuerySerialized responsequery = 3;
  if (has_responsequery()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->responsequery(), target);
  }
  
  // optional sfixed32 randomseed = 4 [default = 0];
  if (has_randomseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(4, this->randomseed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTASpeechMatchOnClient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 concept = 1;
    if (has_concept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->concept());
    }
    
    // optional int32 recipient_type = 2;
    if (has_recipient_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recipient_type());
    }
    
    // optional .CDOTAResponseQuerySerialized responsequery = 3;
    if (has_responsequery()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->responsequery());
    }
    
    // optional sfixed32 randomseed = 4 [default = 0];
    if (has_randomseed()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTASpeechMatchOnClient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTASpeechMatchOnClient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTASpeechMatchOnClient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTASpeechMatchOnClient::MergeFrom(const CDOTASpeechMatchOnClient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_concept()) {
      set_concept(from.concept());
    }
    if (from.has_recipient_type()) {
      set_recipient_type(from.recipient_type());
    }
    if (from.has_responsequery()) {
      mutable_responsequery()->::CDOTAResponseQuerySerialized::MergeFrom(from.responsequery());
    }
    if (from.has_randomseed()) {
      set_randomseed(from.randomseed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTASpeechMatchOnClient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTASpeechMatchOnClient::CopyFrom(const CDOTASpeechMatchOnClient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTASpeechMatchOnClient::IsInitialized() const {
  
  if (has_responsequery()) {
    if (!this->responsequery().IsInitialized()) return false;
  }
  return true;
}

void CDOTASpeechMatchOnClient::Swap(CDOTASpeechMatchOnClient* other) {
  if (other != this) {
    std::swap(concept_, other->concept_);
    std::swap(recipient_type_, other->recipient_type_);
    std::swap(responsequery_, other->responsequery_);
    std::swap(randomseed_, other->randomseed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTASpeechMatchOnClient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTASpeechMatchOnClient_descriptor_;
  metadata.reflection = CDOTASpeechMatchOnClient_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent_Speech::kConceptFieldNumber;
const int CDOTAUserMsg_UnitEvent_Speech::kResponseFieldNumber;
const int CDOTAUserMsg_UnitEvent_Speech::kRecipientTypeFieldNumber;
const int CDOTAUserMsg_UnitEvent_Speech::kLevelFieldNumber;
const int CDOTAUserMsg_UnitEvent_Speech::kMuteableFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent_Speech::CDOTAUserMsg_UnitEvent_Speech()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_UnitEvent_Speech::InitAsDefaultInstance() {
}

CDOTAUserMsg_UnitEvent_Speech::CDOTAUserMsg_UnitEvent_Speech(const CDOTAUserMsg_UnitEvent_Speech& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_Speech::SharedCtor() {
  _cached_size_ = 0;
  concept_ = 0;
  response_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  recipient_type_ = 0;
  level_ = 0;
  muteable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent_Speech::~CDOTAUserMsg_UnitEvent_Speech() {
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_Speech::SharedDtor() {
  if (response_ != &::google::protobuf::internal::kEmptyString) {
    delete response_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UnitEvent_Speech::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_Speech::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_Speech_descriptor_;
}

const CDOTAUserMsg_UnitEvent_Speech& CDOTAUserMsg_UnitEvent_Speech::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_UnitEvent_Speech* CDOTAUserMsg_UnitEvent_Speech::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent_Speech* CDOTAUserMsg_UnitEvent_Speech::New() const {
  return new CDOTAUserMsg_UnitEvent_Speech;
}

void CDOTAUserMsg_UnitEvent_Speech::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    concept_ = 0;
    if (has_response()) {
      if (response_ != &::google::protobuf::internal::kEmptyString) {
        response_->clear();
      }
    }
    recipient_type_ = 0;
    level_ = 0;
    muteable_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent_Speech::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 concept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &concept_)));
          set_has_concept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_response;
        break;
      }
      
      // optional string response = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_response:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response().data(), this->response().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_recipient_type;
        break;
      }
      
      // optional int32 recipient_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recipient_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recipient_type_)));
          set_has_recipient_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }
      
      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_muteable;
        break;
      }
      
      // optional bool muteable = 5 [default = false];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_muteable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &muteable_)));
          set_has_muteable();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_Speech::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 concept = 1;
  if (has_concept()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->concept(), output);
  }
  
  // optional string response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->response(), output);
  }
  
  // optional int32 recipient_type = 3;
  if (has_recipient_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->recipient_type(), output);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }
  
  // optional bool muteable = 5 [default = false];
  if (has_muteable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->muteable(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_Speech::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 concept = 1;
  if (has_concept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->concept(), target);
  }
  
  // optional string response = 2;
  if (has_response()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response().data(), this->response().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->response(), target);
  }
  
  // optional int32 recipient_type = 3;
  if (has_recipient_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->recipient_type(), target);
  }
  
  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }
  
  // optional bool muteable = 5 [default = false];
  if (has_muteable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->muteable(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_UnitEvent_Speech::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 concept = 1;
    if (has_concept()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->concept());
    }
    
    // optional string response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response());
    }
    
    // optional int32 recipient_type = 3;
    if (has_recipient_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recipient_type());
    }
    
    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // optional bool muteable = 5 [default = false];
    if (has_muteable()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_Speech::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_Speech* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent_Speech*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_Speech::MergeFrom(const CDOTAUserMsg_UnitEvent_Speech& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_concept()) {
      set_concept(from.concept());
    }
    if (from.has_response()) {
      set_response(from.response());
    }
    if (from.has_recipient_type()) {
      set_recipient_type(from.recipient_type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_muteable()) {
      set_muteable(from.muteable());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent_Speech::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_Speech::CopyFrom(const CDOTAUserMsg_UnitEvent_Speech& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_Speech::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_UnitEvent_Speech::Swap(CDOTAUserMsg_UnitEvent_Speech* other) {
  if (other != this) {
    std::swap(concept_, other->concept_);
    std::swap(response_, other->response_);
    std::swap(recipient_type_, other->recipient_type_);
    std::swap(level_, other->level_);
    std::swap(muteable_, other->muteable_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_Speech::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_Speech_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_Speech_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent_SpeechMute::kDelayFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent_SpeechMute::CDOTAUserMsg_UnitEvent_SpeechMute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_UnitEvent_SpeechMute::InitAsDefaultInstance() {
}

CDOTAUserMsg_UnitEvent_SpeechMute::CDOTAUserMsg_UnitEvent_SpeechMute(const CDOTAUserMsg_UnitEvent_SpeechMute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SharedCtor() {
  _cached_size_ = 0;
  delay_ = 0.5f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent_SpeechMute::~CDOTAUserMsg_UnitEvent_SpeechMute() {
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_SpeechMute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_SpeechMute_descriptor_;
}

const CDOTAUserMsg_UnitEvent_SpeechMute& CDOTAUserMsg_UnitEvent_SpeechMute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_UnitEvent_SpeechMute* CDOTAUserMsg_UnitEvent_SpeechMute::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent_SpeechMute* CDOTAUserMsg_UnitEvent_SpeechMute::New() const {
  return new CDOTAUserMsg_UnitEvent_SpeechMute;
}

void CDOTAUserMsg_UnitEvent_SpeechMute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    delay_ = 0.5f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent_SpeechMute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float delay = 1 [default = 0.5];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_SpeechMute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float delay = 1 [default = 0.5];
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->delay(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_SpeechMute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float delay = 1 [default = 0.5];
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->delay(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_UnitEvent_SpeechMute::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float delay = 1 [default = 0.5];
    if (has_delay()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_SpeechMute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent_SpeechMute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(const CDOTAUserMsg_UnitEvent_SpeechMute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent_SpeechMute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_SpeechMute::CopyFrom(const CDOTAUserMsg_UnitEvent_SpeechMute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_SpeechMute::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_UnitEvent_SpeechMute::Swap(CDOTAUserMsg_UnitEvent_SpeechMute* other) {
  if (other != this) {
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_SpeechMute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_SpeechMute_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_SpeechMute_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent_AddGesture::kActivityFieldNumber;
const int CDOTAUserMsg_UnitEvent_AddGesture::kSlotFieldNumber;
const int CDOTAUserMsg_UnitEvent_AddGesture::kFadeInFieldNumber;
const int CDOTAUserMsg_UnitEvent_AddGesture::kFadeOutFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent_AddGesture::CDOTAUserMsg_UnitEvent_AddGesture()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_UnitEvent_AddGesture::InitAsDefaultInstance() {
}

CDOTAUserMsg_UnitEvent_AddGesture::CDOTAUserMsg_UnitEvent_AddGesture(const CDOTAUserMsg_UnitEvent_AddGesture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_AddGesture::SharedCtor() {
  _cached_size_ = 0;
  activity_ = -1;
  slot_ = 0;
  fade_in_ = 0;
  fade_out_ = 0.1f;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent_AddGesture::~CDOTAUserMsg_UnitEvent_AddGesture() {
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_AddGesture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UnitEvent_AddGesture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_AddGesture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_AddGesture_descriptor_;
}

const CDOTAUserMsg_UnitEvent_AddGesture& CDOTAUserMsg_UnitEvent_AddGesture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_UnitEvent_AddGesture* CDOTAUserMsg_UnitEvent_AddGesture::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent_AddGesture* CDOTAUserMsg_UnitEvent_AddGesture::New() const {
  return new CDOTAUserMsg_UnitEvent_AddGesture;
}

void CDOTAUserMsg_UnitEvent_AddGesture::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_ = -1;
    slot_ = 0;
    fade_in_ = 0;
    fade_out_ = 0.1f;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent_AddGesture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Activity activity = 1 [default = ACT_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Activity_IsValid(value)) {
            set_activity(static_cast< Activity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_slot;
        break;
      }
      
      // optional int32 slot = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_)));
          set_has_slot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_fade_in;
        break;
      }
      
      // optional float fade_in = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fade_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_in_)));
          set_has_fade_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_fade_out;
        break;
      }
      
      // optional float fade_out = 4 [default = 0.1];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fade_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_out_)));
          set_has_fade_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_AddGesture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Activity activity = 1 [default = ACT_INVALID];
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->activity(), output);
  }
  
  // optional int32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->slot(), output);
  }
  
  // optional float fade_in = 3 [default = 0];
  if (has_fade_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fade_in(), output);
  }
  
  // optional float fade_out = 4 [default = 0.1];
  if (has_fade_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fade_out(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_AddGesture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Activity activity = 1 [default = ACT_INVALID];
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->activity(), target);
  }
  
  // optional int32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->slot(), target);
  }
  
  // optional float fade_in = 3 [default = 0];
  if (has_fade_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fade_in(), target);
  }
  
  // optional float fade_out = 4 [default = 0.1];
  if (has_fade_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fade_out(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_UnitEvent_AddGesture::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Activity activity = 1 [default = ACT_INVALID];
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity());
    }
    
    // optional int32 slot = 2;
    if (has_slot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot());
    }
    
    // optional float fade_in = 3 [default = 0];
    if (has_fade_in()) {
      total_size += 1 + 4;
    }
    
    // optional float fade_out = 4 [default = 0.1];
    if (has_fade_out()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_AddGesture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent_AddGesture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(const CDOTAUserMsg_UnitEvent_AddGesture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity()) {
      set_activity(from.activity());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
    if (from.has_fade_in()) {
      set_fade_in(from.fade_in());
    }
    if (from.has_fade_out()) {
      set_fade_out(from.fade_out());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent_AddGesture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_AddGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_AddGesture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_AddGesture::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_UnitEvent_AddGesture::Swap(CDOTAUserMsg_UnitEvent_AddGesture* other) {
  if (other != this) {
    std::swap(activity_, other->activity_);
    std::swap(slot_, other->slot_);
    std::swap(fade_in_, other->fade_in_);
    std::swap(fade_out_, other->fade_out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_AddGesture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_AddGesture_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_AddGesture_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent_RemoveGesture::kActivityFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent_RemoveGesture::CDOTAUserMsg_UnitEvent_RemoveGesture()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::InitAsDefaultInstance() {
}

CDOTAUserMsg_UnitEvent_RemoveGesture::CDOTAUserMsg_UnitEvent_RemoveGesture(const CDOTAUserMsg_UnitEvent_RemoveGesture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SharedCtor() {
  _cached_size_ = 0;
  activity_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent_RemoveGesture::~CDOTAUserMsg_UnitEvent_RemoveGesture() {
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_RemoveGesture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor_;
}

const CDOTAUserMsg_UnitEvent_RemoveGesture& CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_UnitEvent_RemoveGesture* CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent_RemoveGesture* CDOTAUserMsg_UnitEvent_RemoveGesture::New() const {
  return new CDOTAUserMsg_UnitEvent_RemoveGesture;
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent_RemoveGesture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Activity activity = 1 [default = ACT_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Activity_IsValid(value)) {
            set_activity(static_cast< Activity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Activity activity = 1 [default = ACT_INVALID];
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->activity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_RemoveGesture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Activity activity = 1 [default = ACT_INVALID];
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->activity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_UnitEvent_RemoveGesture::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Activity activity = 1 [default = ACT_INVALID];
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_RemoveGesture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent_RemoveGesture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(const CDOTAUserMsg_UnitEvent_RemoveGesture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity()) {
      set_activity(from.activity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_RemoveGesture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_RemoveGesture::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_UnitEvent_RemoveGesture::Swap(CDOTAUserMsg_UnitEvent_RemoveGesture* other) {
  if (other != this) {
    std::swap(activity_, other->activity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_RemoveGesture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_RemoveGesture_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_RemoveGesture_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent_BloodImpact::kScaleFieldNumber;
const int CDOTAUserMsg_UnitEvent_BloodImpact::kXNormalFieldNumber;
const int CDOTAUserMsg_UnitEvent_BloodImpact::kYNormalFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent_BloodImpact::CDOTAUserMsg_UnitEvent_BloodImpact()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_UnitEvent_BloodImpact::InitAsDefaultInstance() {
}

CDOTAUserMsg_UnitEvent_BloodImpact::CDOTAUserMsg_UnitEvent_BloodImpact(const CDOTAUserMsg_UnitEvent_BloodImpact& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SharedCtor() {
  _cached_size_ = 0;
  scale_ = 0;
  x_normal_ = 0;
  y_normal_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent_BloodImpact::~CDOTAUserMsg_UnitEvent_BloodImpact() {
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_BloodImpact::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_BloodImpact_descriptor_;
}

const CDOTAUserMsg_UnitEvent_BloodImpact& CDOTAUserMsg_UnitEvent_BloodImpact::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_UnitEvent_BloodImpact* CDOTAUserMsg_UnitEvent_BloodImpact::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent_BloodImpact* CDOTAUserMsg_UnitEvent_BloodImpact::New() const {
  return new CDOTAUserMsg_UnitEvent_BloodImpact;
}

void CDOTAUserMsg_UnitEvent_BloodImpact::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scale_ = 0;
    x_normal_ = 0;
    y_normal_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent_BloodImpact::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 scale = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_x_normal;
        break;
      }
      
      // optional int32 x_normal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_normal_)));
          set_has_x_normal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_y_normal;
        break;
      }
      
      // optional int32 y_normal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_y_normal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_normal_)));
          set_has_y_normal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_BloodImpact::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 scale = 1;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->scale(), output);
  }
  
  // optional int32 x_normal = 2;
  if (has_x_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x_normal(), output);
  }
  
  // optional int32 y_normal = 3;
  if (has_y_normal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y_normal(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_BloodImpact::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 scale = 1;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->scale(), target);
  }
  
  // optional int32 x_normal = 2;
  if (has_x_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x_normal(), target);
  }
  
  // optional int32 y_normal = 3;
  if (has_y_normal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y_normal(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_UnitEvent_BloodImpact::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 scale = 1;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scale());
    }
    
    // optional int32 x_normal = 2;
    if (has_x_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x_normal());
    }
    
    // optional int32 y_normal = 3;
    if (has_y_normal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y_normal());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_BloodImpact* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent_BloodImpact*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(const CDOTAUserMsg_UnitEvent_BloodImpact& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_x_normal()) {
      set_x_normal(from.x_normal());
    }
    if (from.has_y_normal()) {
      set_y_normal(from.y_normal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent_BloodImpact::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_BloodImpact::CopyFrom(const CDOTAUserMsg_UnitEvent_BloodImpact& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_BloodImpact::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_UnitEvent_BloodImpact::Swap(CDOTAUserMsg_UnitEvent_BloodImpact* other) {
  if (other != this) {
    std::swap(scale_, other->scale_);
    std::swap(x_normal_, other->x_normal_);
    std::swap(y_normal_, other->y_normal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_BloodImpact::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_BloodImpact_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_BloodImpact_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent_FadeGesture::kActivityFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent_FadeGesture::CDOTAUserMsg_UnitEvent_FadeGesture()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_UnitEvent_FadeGesture::InitAsDefaultInstance() {
}

CDOTAUserMsg_UnitEvent_FadeGesture::CDOTAUserMsg_UnitEvent_FadeGesture(const CDOTAUserMsg_UnitEvent_FadeGesture& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SharedCtor() {
  _cached_size_ = 0;
  activity_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent_FadeGesture::~CDOTAUserMsg_UnitEvent_FadeGesture() {
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent_FadeGesture::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_FadeGesture_descriptor_;
}

const CDOTAUserMsg_UnitEvent_FadeGesture& CDOTAUserMsg_UnitEvent_FadeGesture::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_UnitEvent_FadeGesture* CDOTAUserMsg_UnitEvent_FadeGesture::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent_FadeGesture* CDOTAUserMsg_UnitEvent_FadeGesture::New() const {
  return new CDOTAUserMsg_UnitEvent_FadeGesture;
}

void CDOTAUserMsg_UnitEvent_FadeGesture::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activity_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent_FadeGesture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Activity activity = 1 [default = ACT_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (Activity_IsValid(value)) {
            set_activity(static_cast< Activity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_UnitEvent_FadeGesture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .Activity activity = 1 [default = ACT_INVALID];
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->activity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent_FadeGesture::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .Activity activity = 1 [default = ACT_INVALID];
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->activity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_UnitEvent_FadeGesture::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .Activity activity = 1 [default = ACT_INVALID];
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->activity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent_FadeGesture* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent_FadeGesture*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(const CDOTAUserMsg_UnitEvent_FadeGesture& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activity()) {
      set_activity(from.activity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent_FadeGesture::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent_FadeGesture::CopyFrom(const CDOTAUserMsg_UnitEvent_FadeGesture& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent_FadeGesture::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_UnitEvent_FadeGesture::Swap(CDOTAUserMsg_UnitEvent_FadeGesture* other) {
  if (other != this) {
    std::swap(activity_, other->activity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent_FadeGesture::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_FadeGesture_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_FadeGesture_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_UnitEvent::kMsgTypeFieldNumber;
const int CDOTAUserMsg_UnitEvent::kEntityIndexFieldNumber;
const int CDOTAUserMsg_UnitEvent::kSpeechFieldNumber;
const int CDOTAUserMsg_UnitEvent::kSpeechMuteFieldNumber;
const int CDOTAUserMsg_UnitEvent::kAddGestureFieldNumber;
const int CDOTAUserMsg_UnitEvent::kRemoveGestureFieldNumber;
const int CDOTAUserMsg_UnitEvent::kBloodImpactFieldNumber;
const int CDOTAUserMsg_UnitEvent::kFadeGestureFieldNumber;
const int CDOTAUserMsg_UnitEvent::kSpeechMatchOnClientFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_UnitEvent::CDOTAUserMsg_UnitEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_UnitEvent::InitAsDefaultInstance() {
  speech_ = const_cast< ::CDOTAUserMsg_UnitEvent_Speech*>(&::CDOTAUserMsg_UnitEvent_Speech::default_instance());
  speech_mute_ = const_cast< ::CDOTAUserMsg_UnitEvent_SpeechMute*>(&::CDOTAUserMsg_UnitEvent_SpeechMute::default_instance());
  add_gesture_ = const_cast< ::CDOTAUserMsg_UnitEvent_AddGesture*>(&::CDOTAUserMsg_UnitEvent_AddGesture::default_instance());
  remove_gesture_ = const_cast< ::CDOTAUserMsg_UnitEvent_RemoveGesture*>(&::CDOTAUserMsg_UnitEvent_RemoveGesture::default_instance());
  blood_impact_ = const_cast< ::CDOTAUserMsg_UnitEvent_BloodImpact*>(&::CDOTAUserMsg_UnitEvent_BloodImpact::default_instance());
  fade_gesture_ = const_cast< ::CDOTAUserMsg_UnitEvent_FadeGesture*>(&::CDOTAUserMsg_UnitEvent_FadeGesture::default_instance());
  speech_match_on_client_ = const_cast< ::CDOTASpeechMatchOnClient*>(&::CDOTASpeechMatchOnClient::default_instance());
}

CDOTAUserMsg_UnitEvent::CDOTAUserMsg_UnitEvent(const CDOTAUserMsg_UnitEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent::SharedCtor() {
  _cached_size_ = 0;
  msg_type_ = 0;
  entity_index_ = 0;
  speech_ = NULL;
  speech_mute_ = NULL;
  add_gesture_ = NULL;
  remove_gesture_ = NULL;
  blood_impact_ = NULL;
  fade_gesture_ = NULL;
  speech_match_on_client_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_UnitEvent::~CDOTAUserMsg_UnitEvent() {
  SharedDtor();
}

void CDOTAUserMsg_UnitEvent::SharedDtor() {
  if (this != default_instance_) {
    delete speech_;
    delete speech_mute_;
    delete add_gesture_;
    delete remove_gesture_;
    delete blood_impact_;
    delete fade_gesture_;
    delete speech_match_on_client_;
  }
}

void CDOTAUserMsg_UnitEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_UnitEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_UnitEvent_descriptor_;
}

const CDOTAUserMsg_UnitEvent& CDOTAUserMsg_UnitEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_UnitEvent* CDOTAUserMsg_UnitEvent::default_instance_ = NULL;

CDOTAUserMsg_UnitEvent* CDOTAUserMsg_UnitEvent::New() const {
  return new CDOTAUserMsg_UnitEvent;
}

void CDOTAUserMsg_UnitEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    msg_type_ = 0;
    entity_index_ = 0;
    if (has_speech()) {
      if (speech_ != NULL) speech_->::CDOTAUserMsg_UnitEvent_Speech::Clear();
    }
    if (has_speech_mute()) {
      if (speech_mute_ != NULL) speech_mute_->::CDOTAUserMsg_UnitEvent_SpeechMute::Clear();
    }
    if (has_add_gesture()) {
      if (add_gesture_ != NULL) add_gesture_->::CDOTAUserMsg_UnitEvent_AddGesture::Clear();
    }
    if (has_remove_gesture()) {
      if (remove_gesture_ != NULL) remove_gesture_->::CDOTAUserMsg_UnitEvent_RemoveGesture::Clear();
    }
    if (has_blood_impact()) {
      if (blood_impact_ != NULL) blood_impact_->::CDOTAUserMsg_UnitEvent_BloodImpact::Clear();
    }
    if (has_fade_gesture()) {
      if (fade_gesture_ != NULL) fade_gesture_->::CDOTAUserMsg_UnitEvent_FadeGesture::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_speech_match_on_client()) {
      if (speech_match_on_client_ != NULL) speech_match_on_client_->::CDOTASpeechMatchOnClient::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_UnitEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (EDotaEntityMessages_IsValid(value)) {
            set_msg_type(static_cast< EDotaEntityMessages >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entity_index;
        break;
      }
      
      // required int32 entity_index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entity_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
          set_has_entity_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_speech;
        break;
      }
      
      // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speech:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speech()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_speech_mute;
        break;
      }
      
      // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speech_mute:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speech_mute()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_add_gesture;
        break;
      }
      
      // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_add_gesture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_add_gesture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_remove_gesture;
        break;
      }
      
      // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_remove_gesture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_gesture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_blood_impact;
        break;
      }
      
      // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blood_impact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blood_impact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_fade_gesture;
        break;
      }
      
      // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fade_gesture:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fade_gesture()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_speech_match_on_client;
        break;
      }
      
      // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_speech_match_on_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speech_match_on_client()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_UnitEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
  if (has_msg_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->msg_type(), output);
  }
  
  // required int32 entity_index = 2;
  if (has_entity_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entity_index(), output);
  }
  
  // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
  if (has_speech()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->speech(), output);
  }
  
  // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
  if (has_speech_mute()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->speech_mute(), output);
  }
  
  // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
  if (has_add_gesture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->add_gesture(), output);
  }
  
  // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
  if (has_remove_gesture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->remove_gesture(), output);
  }
  
  // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
  if (has_blood_impact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->blood_impact(), output);
  }
  
  // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
  if (has_fade_gesture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->fade_gesture(), output);
  }
  
  // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
  if (has_speech_match_on_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->speech_match_on_client(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_UnitEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
  if (has_msg_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->msg_type(), target);
  }
  
  // required int32 entity_index = 2;
  if (has_entity_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entity_index(), target);
  }
  
  // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
  if (has_speech()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->speech(), target);
  }
  
  // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
  if (has_speech_mute()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->speech_mute(), target);
  }
  
  // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
  if (has_add_gesture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->add_gesture(), target);
  }
  
  // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
  if (has_remove_gesture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->remove_gesture(), target);
  }
  
  // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
  if (has_blood_impact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->blood_impact(), target);
  }
  
  // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
  if (has_fade_gesture()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->fade_gesture(), target);
  }
  
  // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
  if (has_speech_match_on_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->speech_match_on_client(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_UnitEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .EDotaEntityMessages msg_type = 1 [default = DOTA_UNIT_SPEECH];
    if (has_msg_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->msg_type());
    }
    
    // required int32 entity_index = 2;
    if (has_entity_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_index());
    }
    
    // optional .CDOTAUserMsg_UnitEvent.Speech speech = 3;
    if (has_speech()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speech());
    }
    
    // optional .CDOTAUserMsg_UnitEvent.SpeechMute speech_mute = 4;
    if (has_speech_mute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speech_mute());
    }
    
    // optional .CDOTAUserMsg_UnitEvent.AddGesture add_gesture = 5;
    if (has_add_gesture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->add_gesture());
    }
    
    // optional .CDOTAUserMsg_UnitEvent.RemoveGesture remove_gesture = 6;
    if (has_remove_gesture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->remove_gesture());
    }
    
    // optional .CDOTAUserMsg_UnitEvent.BloodImpact blood_impact = 7;
    if (has_blood_impact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blood_impact());
    }
    
    // optional .CDOTAUserMsg_UnitEvent.FadeGesture fade_gesture = 8;
    if (has_fade_gesture()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fade_gesture());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CDOTASpeechMatchOnClient speech_match_on_client = 9;
    if (has_speech_match_on_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->speech_match_on_client());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_UnitEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_UnitEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_UnitEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_UnitEvent::MergeFrom(const CDOTAUserMsg_UnitEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg_type()) {
      set_msg_type(from.msg_type());
    }
    if (from.has_entity_index()) {
      set_entity_index(from.entity_index());
    }
    if (from.has_speech()) {
      mutable_speech()->::CDOTAUserMsg_UnitEvent_Speech::MergeFrom(from.speech());
    }
    if (from.has_speech_mute()) {
      mutable_speech_mute()->::CDOTAUserMsg_UnitEvent_SpeechMute::MergeFrom(from.speech_mute());
    }
    if (from.has_add_gesture()) {
      mutable_add_gesture()->::CDOTAUserMsg_UnitEvent_AddGesture::MergeFrom(from.add_gesture());
    }
    if (from.has_remove_gesture()) {
      mutable_remove_gesture()->::CDOTAUserMsg_UnitEvent_RemoveGesture::MergeFrom(from.remove_gesture());
    }
    if (from.has_blood_impact()) {
      mutable_blood_impact()->::CDOTAUserMsg_UnitEvent_BloodImpact::MergeFrom(from.blood_impact());
    }
    if (from.has_fade_gesture()) {
      mutable_fade_gesture()->::CDOTAUserMsg_UnitEvent_FadeGesture::MergeFrom(from.fade_gesture());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_speech_match_on_client()) {
      mutable_speech_match_on_client()->::CDOTASpeechMatchOnClient::MergeFrom(from.speech_match_on_client());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_UnitEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_UnitEvent::CopyFrom(const CDOTAUserMsg_UnitEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_UnitEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_speech_match_on_client()) {
    if (!this->speech_match_on_client().IsInitialized()) return false;
  }
  return true;
}

void CDOTAUserMsg_UnitEvent::Swap(CDOTAUserMsg_UnitEvent* other) {
  if (other != this) {
    std::swap(msg_type_, other->msg_type_);
    std::swap(entity_index_, other->entity_index_);
    std::swap(speech_, other->speech_);
    std::swap(speech_mute_, other->speech_mute_);
    std::swap(add_gesture_, other->add_gesture_);
    std::swap(remove_gesture_, other->remove_gesture_);
    std::swap(blood_impact_, other->blood_impact_);
    std::swap(fade_gesture_, other->fade_gesture_);
    std::swap(speech_match_on_client_, other->speech_match_on_client_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_UnitEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_UnitEvent_descriptor_;
  metadata.reflection = CDOTAUserMsg_UnitEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_ItemPurchased::kItemIndexFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ItemPurchased::CDOTAUserMsg_ItemPurchased()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ItemPurchased::InitAsDefaultInstance() {
}

CDOTAUserMsg_ItemPurchased::CDOTAUserMsg_ItemPurchased(const CDOTAUserMsg_ItemPurchased& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemPurchased::SharedCtor() {
  _cached_size_ = 0;
  item_index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ItemPurchased::~CDOTAUserMsg_ItemPurchased() {
  SharedDtor();
}

void CDOTAUserMsg_ItemPurchased::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ItemPurchased::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemPurchased::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ItemPurchased_descriptor_;
}

const CDOTAUserMsg_ItemPurchased& CDOTAUserMsg_ItemPurchased::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ItemPurchased* CDOTAUserMsg_ItemPurchased::default_instance_ = NULL;

CDOTAUserMsg_ItemPurchased* CDOTAUserMsg_ItemPurchased::New() const {
  return new CDOTAUserMsg_ItemPurchased;
}

void CDOTAUserMsg_ItemPurchased::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    item_index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ItemPurchased::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 item_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_index_)));
          set_has_item_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ItemPurchased::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 item_index = 1;
  if (has_item_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->item_index(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ItemPurchased::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 item_index = 1;
  if (has_item_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->item_index(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ItemPurchased::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 item_index = 1;
    if (has_item_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_index());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ItemPurchased::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ItemPurchased* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ItemPurchased*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ItemPurchased::MergeFrom(const CDOTAUserMsg_ItemPurchased& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_item_index()) {
      set_item_index(from.item_index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ItemPurchased::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemPurchased::CopyFrom(const CDOTAUserMsg_ItemPurchased& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemPurchased::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ItemPurchased::Swap(CDOTAUserMsg_ItemPurchased* other) {
  if (other != this) {
    std::swap(item_index_, other->item_index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ItemPurchased::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ItemPurchased_descriptor_;
  metadata.reflection = CDOTAUserMsg_ItemPurchased_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_ItemFound::kPlayerFieldNumber;
const int CDOTAUserMsg_ItemFound::kQualityFieldNumber;
const int CDOTAUserMsg_ItemFound::kRarityFieldNumber;
const int CDOTAUserMsg_ItemFound::kMethodFieldNumber;
const int CDOTAUserMsg_ItemFound::kItemdefFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ItemFound::CDOTAUserMsg_ItemFound()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ItemFound::InitAsDefaultInstance() {
}

CDOTAUserMsg_ItemFound::CDOTAUserMsg_ItemFound(const CDOTAUserMsg_ItemFound& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemFound::SharedCtor() {
  _cached_size_ = 0;
  player_ = 0;
  quality_ = 0;
  rarity_ = 0;
  method_ = 0;
  itemdef_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ItemFound::~CDOTAUserMsg_ItemFound() {
  SharedDtor();
}

void CDOTAUserMsg_ItemFound::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ItemFound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ItemFound::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ItemFound_descriptor_;
}

const CDOTAUserMsg_ItemFound& CDOTAUserMsg_ItemFound::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ItemFound* CDOTAUserMsg_ItemFound::default_instance_ = NULL;

CDOTAUserMsg_ItemFound* CDOTAUserMsg_ItemFound::New() const {
  return new CDOTAUserMsg_ItemFound;
}

void CDOTAUserMsg_ItemFound::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_ = 0;
    quality_ = 0;
    rarity_ = 0;
    method_ = 0;
    itemdef_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ItemFound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }
      
      // optional int32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rarity;
        break;
      }
      
      // optional int32 rarity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rarity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rarity_)));
          set_has_rarity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_method;
        break;
      }
      
      // optional int32 method = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_method:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &method_)));
          set_has_method();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemdef;
        break;
      }
      
      // optional int32 itemdef = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemdef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemdef_)));
          set_has_itemdef();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ItemFound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }
  
  // optional int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }
  
  // optional int32 rarity = 3;
  if (has_rarity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rarity(), output);
  }
  
  // optional int32 method = 4;
  if (has_method()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->method(), output);
  }
  
  // optional int32 itemdef = 5;
  if (has_itemdef()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itemdef(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ItemFound::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }
  
  // optional int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }
  
  // optional int32 rarity = 3;
  if (has_rarity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rarity(), target);
  }
  
  // optional int32 method = 4;
  if (has_method()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->method(), target);
  }
  
  // optional int32 itemdef = 5;
  if (has_itemdef()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itemdef(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ItemFound::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }
    
    // optional int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }
    
    // optional int32 rarity = 3;
    if (has_rarity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rarity());
    }
    
    // optional int32 method = 4;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->method());
    }
    
    // optional int32 itemdef = 5;
    if (has_itemdef()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemdef());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ItemFound::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ItemFound* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ItemFound*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ItemFound::MergeFrom(const CDOTAUserMsg_ItemFound& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_rarity()) {
      set_rarity(from.rarity());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_itemdef()) {
      set_itemdef(from.itemdef());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ItemFound::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ItemFound::CopyFrom(const CDOTAUserMsg_ItemFound& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ItemFound::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ItemFound::Swap(CDOTAUserMsg_ItemFound* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(quality_, other->quality_);
    std::swap(rarity_, other->rarity_);
    std::swap(method_, other->method_);
    std::swap(itemdef_, other->itemdef_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ItemFound::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ItemFound_descriptor_;
  metadata.reflection = CDOTAUserMsg_ItemFound_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::InitAsDefaultInstance() {
}

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::~CDOTAUserMsg_ParticleManager_ReleaseParticleIndex() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_;
}

const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::New() const {
  return new CDOTAUserMsg_ParticleManager_ReleaseParticleIndex;
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const CDOTAUserMsg_ParticleManager_ReleaseParticleIndex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::Swap(CDOTAUserMsg_ParticleManager_ReleaseParticleIndex* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_ReleaseParticleIndex_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_CreateParticle::kParticleNameIndexFieldNumber;
const int CDOTAUserMsg_ParticleManager_CreateParticle::kAttachTypeFieldNumber;
const int CDOTAUserMsg_ParticleManager_CreateParticle::kEntityHandleFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_CreateParticle::CDOTAUserMsg_ParticleManager_CreateParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager_CreateParticle::InitAsDefaultInstance() {
}

CDOTAUserMsg_ParticleManager_CreateParticle::CDOTAUserMsg_ParticleManager_CreateParticle(const CDOTAUserMsg_ParticleManager_CreateParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_CreateParticle::SharedCtor() {
  _cached_size_ = 0;
  particle_name_index_ = 0;
  attach_type_ = 0;
  entity_handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_CreateParticle::~CDOTAUserMsg_ParticleManager_CreateParticle() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_CreateParticle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ParticleManager_CreateParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_CreateParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_CreateParticle_descriptor_;
}

const CDOTAUserMsg_ParticleManager_CreateParticle& CDOTAUserMsg_ParticleManager_CreateParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_CreateParticle* CDOTAUserMsg_ParticleManager_CreateParticle::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_CreateParticle* CDOTAUserMsg_ParticleManager_CreateParticle::New() const {
  return new CDOTAUserMsg_ParticleManager_CreateParticle;
}

void CDOTAUserMsg_ParticleManager_CreateParticle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    particle_name_index_ = 0;
    attach_type_ = 0;
    entity_handle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_CreateParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 particle_name_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &particle_name_index_)));
          set_has_particle_name_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attach_type;
        break;
      }
      
      // optional int32 attach_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_type_)));
          set_has_attach_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_entity_handle;
        break;
      }
      
      // optional int32 entity_handle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_CreateParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 particle_name_index = 1;
  if (has_particle_name_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->particle_name_index(), output);
  }
  
  // optional int32 attach_type = 2;
  if (has_attach_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attach_type(), output);
  }
  
  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_CreateParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 particle_name_index = 1;
  if (has_particle_name_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->particle_name_index(), target);
  }
  
  // optional int32 attach_type = 2;
  if (has_attach_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attach_type(), target);
  }
  
  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager_CreateParticle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 particle_name_index = 1;
    if (has_particle_name_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->particle_name_index());
    }
    
    // optional int32 attach_type = 2;
    if (has_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_type());
    }
    
    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_CreateParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_CreateParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_CreateParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_CreateParticle::MergeFrom(const CDOTAUserMsg_ParticleManager_CreateParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_particle_name_index()) {
      set_particle_name_index(from.particle_name_index());
    }
    if (from.has_attach_type()) {
      set_attach_type(from.attach_type());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_CreateParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_CreateParticle::CopyFrom(const CDOTAUserMsg_ParticleManager_CreateParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_CreateParticle::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ParticleManager_CreateParticle::Swap(CDOTAUserMsg_ParticleManager_CreateParticle* other) {
  if (other != this) {
    std::swap(particle_name_index_, other->particle_name_index_);
    std::swap(attach_type_, other->attach_type_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_CreateParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_CreateParticle_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_CreateParticle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_DestroyParticle::kDestroyImmediatelyFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_DestroyParticle::CDOTAUserMsg_ParticleManager_DestroyParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::InitAsDefaultInstance() {
}

CDOTAUserMsg_ParticleManager_DestroyParticle::CDOTAUserMsg_ParticleManager_DestroyParticle(const CDOTAUserMsg_ParticleManager_DestroyParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::SharedCtor() {
  _cached_size_ = 0;
  destroy_immediately_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_DestroyParticle::~CDOTAUserMsg_ParticleManager_DestroyParticle() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_DestroyParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor_;
}

const CDOTAUserMsg_ParticleManager_DestroyParticle& CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_DestroyParticle* CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_DestroyParticle* CDOTAUserMsg_ParticleManager_DestroyParticle::New() const {
  return new CDOTAUserMsg_ParticleManager_DestroyParticle;
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    destroy_immediately_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_DestroyParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_immediately_)));
          set_has_destroy_immediately();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_immediately(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_DestroyParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_immediately(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager_DestroyParticle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool destroy_immediately = 1;
    if (has_destroy_immediately()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_DestroyParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_DestroyParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::MergeFrom(const CDOTAUserMsg_ParticleManager_DestroyParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destroy_immediately()) {
      set_destroy_immediately(from.destroy_immediately());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::CopyFrom(const CDOTAUserMsg_ParticleManager_DestroyParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_DestroyParticle::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ParticleManager_DestroyParticle::Swap(CDOTAUserMsg_ParticleManager_DestroyParticle* other) {
  if (other != this) {
    std::swap(destroy_immediately_, other->destroy_immediately_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_DestroyParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_DestroyParticle_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_DestroyParticle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::kDestroyImmediatelyFieldNumber;
const int CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::kEntityHandleFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::InitAsDefaultInstance() {
}

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SharedCtor() {
  _cached_size_ = 0;
  destroy_immediately_ = false;
  entity_handle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::~CDOTAUserMsg_ParticleManager_DestroyParticleInvolving() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_;
}

const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::New() const {
  return new CDOTAUserMsg_ParticleManager_DestroyParticleInvolving;
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    destroy_immediately_ = false;
    entity_handle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_immediately_)));
          set_has_destroy_immediately();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_entity_handle;
        break;
      }
      
      // optional int32 entity_handle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_immediately(), output);
  }
  
  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool destroy_immediately = 1;
  if (has_destroy_immediately()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_immediately(), target);
  }
  
  // optional int32 entity_handle = 3;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool destroy_immediately = 1;
    if (has_destroy_immediately()) {
      total_size += 1 + 1;
    }
    
    // optional int32 entity_handle = 3;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destroy_immediately()) {
      set_destroy_immediately(from.destroy_immediately());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const CDOTAUserMsg_ParticleManager_DestroyParticleInvolving& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::Swap(CDOTAUserMsg_ParticleManager_DestroyParticleInvolving* other) {
  if (other != this) {
    std::swap(destroy_immediately_, other->destroy_immediately_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_DestroyParticleInvolving_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticle::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticle::kPositionFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticle::CDOTAUserMsg_ParticleManager_UpdateParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::InitAsDefaultInstance() {
  position_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_ParticleManager_UpdateParticle::CDOTAUserMsg_ParticleManager_UpdateParticle(const CDOTAUserMsg_ParticleManager_UpdateParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticle::~CDOTAUserMsg_ParticleManager_UpdateParticle() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticle& CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticle* CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticle* CDOTAUserMsg_ParticleManager_UpdateParticle::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticle;
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    control_point_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // optional .CMsgVector position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }
  
  // optional .CMsgVector position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }
  
  // optional .CMsgVector position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }
    
    // optional .CMsgVector position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_position()) {
      mutable_position()->::CMsgVector::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticle::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticle::Swap(CDOTAUserMsg_ParticleManager_UpdateParticle* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticle_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticle_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleFwd::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleFwd::kForwardFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleFwd::CDOTAUserMsg_ParticleManager_UpdateParticleFwd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::InitAsDefaultInstance() {
  forward_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_ParticleManager_UpdateParticleFwd::CDOTAUserMsg_ParticleManager_UpdateParticleFwd(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  forward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleFwd::~CDOTAUserMsg_ParticleManager_UpdateParticleFwd() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SharedDtor() {
  if (this != default_instance_) {
    delete forward_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleFwd* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleFwd* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleFwd;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    control_point_ = 0;
    if (has_forward()) {
      if (forward_ != NULL) forward_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleFwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_forward;
        break;
      }
      
      // optional .CMsgVector forward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }
  
  // optional .CMsgVector forward = 2;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->forward(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleFwd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }
  
  // optional .CMsgVector forward = 2;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forward(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleFwd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }
    
    // optional .CMsgVector forward = 2;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forward());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleFwd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleFwd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_forward()) {
      mutable_forward()->::CMsgVector::MergeFrom(from.forward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFwd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleFwd::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFwd::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleFwd* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(forward_, other->forward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleFwd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleFwd_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleFwd_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::kForwardFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::kRightFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::kUpFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleOrient::CDOTAUserMsg_ParticleManager_UpdateParticleOrient()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::InitAsDefaultInstance() {
  forward_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  right_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  up_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_ParticleManager_UpdateParticleOrient::CDOTAUserMsg_ParticleManager_UpdateParticleOrient(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  forward_ = NULL;
  right_ = NULL;
  up_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleOrient::~CDOTAUserMsg_ParticleManager_UpdateParticleOrient() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SharedDtor() {
  if (this != default_instance_) {
    delete forward_;
    delete right_;
    delete up_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleOrient* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleOrient* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleOrient;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    control_point_ = 0;
    if (has_forward()) {
      if (forward_ != NULL) forward_->::CMsgVector::Clear();
    }
    if (has_right()) {
      if (right_ != NULL) right_->::CMsgVector::Clear();
    }
    if (has_up()) {
      if (up_ != NULL) up_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_forward;
        break;
      }
      
      // optional .CMsgVector forward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_forward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_forward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_right;
        break;
      }
      
      // optional .CMsgVector right = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_right:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_right()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_up;
        break;
      }
      
      // optional .CMsgVector up = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_up:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_up()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }
  
  // optional .CMsgVector forward = 2;
  if (has_forward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->forward(), output);
  }
  
  // optional .CMsgVector right = 3;
  if (has_right()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->right(), output);
  }
  
  // optional .CMsgVector up = 4;
  if (has_up()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->up(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleOrient::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }
  
  // optional .CMsgVector forward = 2;
  if (has_forward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->forward(), target);
  }
  
  // optional .CMsgVector right = 3;
  if (has_right()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->right(), target);
  }
  
  // optional .CMsgVector up = 4;
  if (has_up()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->up(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleOrient::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }
    
    // optional .CMsgVector forward = 2;
    if (has_forward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->forward());
    }
    
    // optional .CMsgVector right = 3;
    if (has_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right());
    }
    
    // optional .CMsgVector up = 4;
    if (has_up()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->up());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleOrient* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleOrient*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_forward()) {
      mutable_forward()->::CMsgVector::MergeFrom(from.forward());
    }
    if (from.has_right()) {
      mutable_right()->::CMsgVector::MergeFrom(from.right());
    }
    if (from.has_up()) {
      mutable_up()->::CMsgVector::MergeFrom(from.up());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOrient& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleOrient::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOrient::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleOrient* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(forward_, other->forward_);
    std::swap(right_, other->right_);
    std::swap(up_, other->up_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleOrient::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleOrient_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleOrient_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleFallback::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleFallback::kPositionFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleFallback::CDOTAUserMsg_ParticleManager_UpdateParticleFallback()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::InitAsDefaultInstance() {
  position_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_ParticleManager_UpdateParticleFallback::CDOTAUserMsg_ParticleManager_UpdateParticleFallback(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleFallback::~CDOTAUserMsg_ParticleManager_UpdateParticleFallback() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleFallback* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleFallback* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleFallback;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    control_point_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleFallback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }
      
      // optional .CMsgVector position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }
  
  // optional .CMsgVector position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleFallback::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }
  
  // optional .CMsgVector position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleFallback::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }
    
    // optional .CMsgVector position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleFallback* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleFallback*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_position()) {
      mutable_position()->::CMsgVector::MergeFrom(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleFallback& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleFallback::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleFallback::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleFallback* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleFallback::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleFallback_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleFallback_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleOffset::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleOffset::kOriginOffsetFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleOffset::CDOTAUserMsg_ParticleManager_UpdateParticleOffset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::InitAsDefaultInstance() {
  origin_offset_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_ParticleManager_UpdateParticleOffset::CDOTAUserMsg_ParticleManager_UpdateParticleOffset(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  origin_offset_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleOffset::~CDOTAUserMsg_ParticleManager_UpdateParticleOffset() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SharedDtor() {
  if (this != default_instance_) {
    delete origin_offset_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleOffset* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleOffset* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleOffset;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    control_point_ = 0;
    if (has_origin_offset()) {
      if (origin_offset_ != NULL) origin_offset_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_origin_offset;
        break;
      }
      
      // optional .CMsgVector origin_offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_origin_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_origin_offset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }
  
  // optional .CMsgVector origin_offset = 2;
  if (has_origin_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->origin_offset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleOffset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }
  
  // optional .CMsgVector origin_offset = 2;
  if (has_origin_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->origin_offset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleOffset::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }
    
    // optional .CMsgVector origin_offset = 2;
    if (has_origin_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->origin_offset());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleOffset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleOffset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_origin_offset()) {
      mutable_origin_offset()->::CMsgVector::MergeFrom(from.origin_offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleOffset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleOffset::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleOffset::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleOffset* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(origin_offset_, other->origin_offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleOffset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleOffset_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleOffset_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kControlPointFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kEntityHandleFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kAttachTypeFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kAttachmentFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::kFallbackPositionFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleEnt::CDOTAUserMsg_ParticleManager_UpdateParticleEnt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::InitAsDefaultInstance() {
  fallback_position_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAUserMsg_ParticleManager_UpdateParticleEnt::CDOTAUserMsg_ParticleManager_UpdateParticleEnt(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SharedCtor() {
  _cached_size_ = 0;
  control_point_ = 0;
  entity_handle_ = 0;
  attach_type_ = 0;
  attachment_ = 0;
  fallback_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleEnt::~CDOTAUserMsg_ParticleManager_UpdateParticleEnt() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SharedDtor() {
  if (this != default_instance_) {
    delete fallback_position_;
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleEnt* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleEnt* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleEnt;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    control_point_ = 0;
    entity_handle_ = 0;
    attach_type_ = 0;
    attachment_ = 0;
    if (has_fallback_position()) {
      if (fallback_position_ != NULL) fallback_position_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
          set_has_control_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_entity_handle;
        break;
      }
      
      // optional int32 entity_handle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_entity_handle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
          set_has_entity_handle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attach_type;
        break;
      }
      
      // optional int32 attach_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attach_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_type_)));
          set_has_attach_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attachment;
        break;
      }
      
      // optional int32 attachment = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attachment:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_)));
          set_has_attachment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_fallback_position;
        break;
      }
      
      // optional .CMsgVector fallback_position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fallback_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fallback_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 control_point = 1;
  if (has_control_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }
  
  // optional int32 entity_handle = 2;
  if (has_entity_handle()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entity_handle(), output);
  }
  
  // optional int32 attach_type = 3;
  if (has_attach_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attach_type(), output);
  }
  
  // optional int32 attachment = 4;
  if (has_attachment()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attachment(), output);
  }
  
  // optional .CMsgVector fallback_position = 5;
  if (has_fallback_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->fallback_position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleEnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 control_point = 1;
  if (has_control_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }
  
  // optional int32 entity_handle = 2;
  if (has_entity_handle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entity_handle(), target);
  }
  
  // optional int32 attach_type = 3;
  if (has_attach_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attach_type(), target);
  }
  
  // optional int32 attachment = 4;
  if (has_attachment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attachment(), target);
  }
  
  // optional .CMsgVector fallback_position = 5;
  if (has_fallback_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->fallback_position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleEnt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 control_point = 1;
    if (has_control_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }
    
    // optional int32 entity_handle = 2;
    if (has_entity_handle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }
    
    // optional int32 attach_type = 3;
    if (has_attach_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_type());
    }
    
    // optional int32 attachment = 4;
    if (has_attachment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment());
    }
    
    // optional .CMsgVector fallback_position = 5;
    if (has_fallback_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fallback_position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleEnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleEnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_control_point()) {
      set_control_point(from.control_point());
    }
    if (from.has_entity_handle()) {
      set_entity_handle(from.entity_handle());
    }
    if (from.has_attach_type()) {
      set_attach_type(from.attach_type());
    }
    if (from.has_attachment()) {
      set_attachment(from.attachment());
    }
    if (from.has_fallback_position()) {
      mutable_fallback_position()->::CMsgVector::MergeFrom(from.fallback_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleEnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleEnt::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleEnt::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleEnt* other) {
  if (other != this) {
    std::swap(control_point_, other->control_point_);
    std::swap(entity_handle_, other->entity_handle_);
    std::swap(attach_type_, other->attach_type_);
    std::swap(attachment_, other->attachment_);
    std::swap(fallback_position_, other->fallback_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleEnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleEnt_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleEnt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleLatency::kPlayerLatencyFieldNumber;
const int CDOTAUserMsg_ParticleManager_UpdateParticleLatency::kTickFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleLatency::CDOTAUserMsg_ParticleManager_UpdateParticleLatency()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleLatency::InitAsDefaultInstance() {
}

CDOTAUserMsg_ParticleManager_UpdateParticleLatency::CDOTAUserMsg_ParticleManager_UpdateParticleLatency(const CDOTAUserMsg_ParticleManager_UpdateParticleLatency& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleLatency::SharedCtor() {
  _cached_size_ = 0;
  player_latency_ = 0;
  tick_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleLatency::~CDOTAUserMsg_ParticleManager_UpdateParticleLatency() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleLatency::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleLatency::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleLatency::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleLatency_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleLatency& CDOTAUserMsg_ParticleManager_UpdateParticleLatency::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleLatency* CDOTAUserMsg_ParticleManager_UpdateParticleLatency::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleLatency* CDOTAUserMsg_ParticleManager_UpdateParticleLatency::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleLatency;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleLatency::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_latency_ = 0;
    tick_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleLatency::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player_latency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_latency_)));
          set_has_player_latency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tick;
        break;
      }
      
      // optional int32 tick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tick:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tick_)));
          set_has_tick();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleLatency::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player_latency = 1;
  if (has_player_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player_latency(), output);
  }
  
  // optional int32 tick = 2;
  if (has_tick()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tick(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleLatency::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player_latency = 1;
  if (has_player_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player_latency(), target);
  }
  
  // optional int32 tick = 2;
  if (has_tick()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tick(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleLatency::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player_latency = 1;
    if (has_player_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_latency());
    }
    
    // optional int32 tick = 2;
    if (has_tick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tick());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleLatency::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleLatency* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleLatency*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleLatency::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleLatency& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_latency()) {
      set_player_latency(from.player_latency());
    }
    if (from.has_tick()) {
      set_tick(from.tick());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleLatency::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleLatency::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleLatency& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleLatency::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleLatency::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleLatency* other) {
  if (other != this) {
    std::swap(player_latency_, other->player_latency_);
    std::swap(tick_, other->tick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleLatency::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleLatency_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleLatency_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::kShouldDrawFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::InitAsDefaultInstance() {
}

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedCtor() {
  _cached_size_ = 0;
  should_draw_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::~CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_;
}

const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::New() const {
  return new CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    should_draw_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool should_draw = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_draw_)));
          set_has_should_draw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool should_draw = 1;
  if (has_should_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->should_draw(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool should_draw = 1;
  if (has_should_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->should_draw(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool should_draw = 1;
    if (has_should_draw()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_should_draw()) {
      set_should_draw(from.should_draw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::Swap(CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw* other) {
  if (other != this) {
    std::swap(should_draw_, other->should_draw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDOTAUserMsg_ParticleManager::kTypeFieldNumber;
const int CDOTAUserMsg_ParticleManager::kIndexFieldNumber;
const int CDOTAUserMsg_ParticleManager::kReleaseParticleIndexFieldNumber;
const int CDOTAUserMsg_ParticleManager::kCreateParticleFieldNumber;
const int CDOTAUserMsg_ParticleManager::kDestroyParticleFieldNumber;
const int CDOTAUserMsg_ParticleManager::kDestroyParticleInvolvingFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleFwdFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleOrientFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleFallbackFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleOffsetFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleEntFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleLatencyFieldNumber;
const int CDOTAUserMsg_ParticleManager::kUpdateParticleShouldDrawFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_ParticleManager::CDOTAUserMsg_ParticleManager()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_ParticleManager::InitAsDefaultInstance() {
  release_particle_index_ = const_cast< ::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex*>(&::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::default_instance());
  create_particle_ = const_cast< ::CDOTAUserMsg_ParticleManager_CreateParticle*>(&::CDOTAUserMsg_ParticleManager_CreateParticle::default_instance());
  destroy_particle_ = const_cast< ::CDOTAUserMsg_ParticleManager_DestroyParticle*>(&::CDOTAUserMsg_ParticleManager_DestroyParticle::default_instance());
  destroy_particle_involving_ = const_cast< ::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving*>(&::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::default_instance());
  update_particle_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticle*>(&::CDOTAUserMsg_ParticleManager_UpdateParticle::default_instance());
  update_particle_fwd_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleFwd*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleFwd::default_instance());
  update_particle_orient_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleOrient*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleOrient::default_instance());
  update_particle_fallback_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleFallback*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleFallback::default_instance());
  update_particle_offset_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleOffset*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleOffset::default_instance());
  update_particle_ent_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleEnt*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleEnt::default_instance());
  update_particle_latency_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleLatency*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleLatency::default_instance());
  update_particle_should_draw_ = const_cast< ::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw*>(&::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance());
}

CDOTAUserMsg_ParticleManager::CDOTAUserMsg_ParticleManager(const CDOTAUserMsg_ParticleManager& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  index_ = 0u;
  release_particle_index_ = NULL;
  create_particle_ = NULL;
  destroy_particle_ = NULL;
  destroy_particle_involving_ = NULL;
  update_particle_ = NULL;
  update_particle_fwd_ = NULL;
  update_particle_orient_ = NULL;
  update_particle_fallback_ = NULL;
  update_particle_offset_ = NULL;
  update_particle_ent_ = NULL;
  update_particle_latency_ = NULL;
  update_particle_should_draw_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_ParticleManager::~CDOTAUserMsg_ParticleManager() {
  SharedDtor();
}

void CDOTAUserMsg_ParticleManager::SharedDtor() {
  if (this != default_instance_) {
    delete release_particle_index_;
    delete create_particle_;
    delete destroy_particle_;
    delete destroy_particle_involving_;
    delete update_particle_;
    delete update_particle_fwd_;
    delete update_particle_orient_;
    delete update_particle_fallback_;
    delete update_particle_offset_;
    delete update_particle_ent_;
    delete update_particle_latency_;
    delete update_particle_should_draw_;
  }
}

void CDOTAUserMsg_ParticleManager::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_ParticleManager::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_ParticleManager_descriptor_;
}

const CDOTAUserMsg_ParticleManager& CDOTAUserMsg_ParticleManager::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_ParticleManager* CDOTAUserMsg_ParticleManager::default_instance_ = NULL;

CDOTAUserMsg_ParticleManager* CDOTAUserMsg_ParticleManager::New() const {
  return new CDOTAUserMsg_ParticleManager;
}

void CDOTAUserMsg_ParticleManager::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    index_ = 0u;
    if (has_release_particle_index()) {
      if (release_particle_index_ != NULL) release_particle_index_->::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::Clear();
    }
    if (has_create_particle()) {
      if (create_particle_ != NULL) create_particle_->::CDOTAUserMsg_ParticleManager_CreateParticle::Clear();
    }
    if (has_destroy_particle()) {
      if (destroy_particle_ != NULL) destroy_particle_->::CDOTAUserMsg_ParticleManager_DestroyParticle::Clear();
    }
    if (has_destroy_particle_involving()) {
      if (destroy_particle_involving_ != NULL) destroy_particle_involving_->::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::Clear();
    }
    if (has_update_particle()) {
      if (update_particle_ != NULL) update_particle_->::CDOTAUserMsg_ParticleManager_UpdateParticle::Clear();
    }
    if (has_update_particle_fwd()) {
      if (update_particle_fwd_ != NULL) update_particle_fwd_->::CDOTAUserMsg_ParticleManager_UpdateParticleFwd::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_update_particle_orient()) {
      if (update_particle_orient_ != NULL) update_particle_orient_->::CDOTAUserMsg_ParticleManager_UpdateParticleOrient::Clear();
    }
    if (has_update_particle_fallback()) {
      if (update_particle_fallback_ != NULL) update_particle_fallback_->::CDOTAUserMsg_ParticleManager_UpdateParticleFallback::Clear();
    }
    if (has_update_particle_offset()) {
      if (update_particle_offset_ != NULL) update_particle_offset_->::CDOTAUserMsg_ParticleManager_UpdateParticleOffset::Clear();
    }
    if (has_update_particle_ent()) {
      if (update_particle_ent_ != NULL) update_particle_ent_->::CDOTAUserMsg_ParticleManager_UpdateParticleEnt::Clear();
    }
    if (has_update_particle_latency()) {
      if (update_particle_latency_ != NULL) update_particle_latency_->::CDOTAUserMsg_ParticleManager_UpdateParticleLatency::Clear();
    }
    if (has_update_particle_should_draw()) {
      if (update_particle_should_draw_ != NULL) update_particle_should_draw_->::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_ParticleManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_PARTICLE_MESSAGE_IsValid(value)) {
            set_type(static_cast< DOTA_PARTICLE_MESSAGE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }
      
      // required uint32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_release_particle_index;
        break;
      }
      
      // optional .CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_release_particle_index:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_release_particle_index()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_create_particle;
        break;
      }
      
      // optional .CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_create_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_particle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_destroy_particle;
        break;
      }
      
      // optional .CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destroy_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy_particle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_destroy_particle_involving;
        break;
      }
      
      // optional .CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destroy_particle_involving:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destroy_particle_involving()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_update_particle;
        break;
      }
      
      // optional .CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_particle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_update_particle_fwd;
        break;
      }
      
      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_particle_fwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_fwd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_update_particle_orient;
        break;
      }
      
      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_particle_orient:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_orient()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_update_particle_fallback;
        break;
      }
      
      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_particle_fallback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_fallback()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_update_particle_offset;
        break;
      }
      
      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_particle_offset:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_offset()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_update_particle_ent;
        break;
      }
      
      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_particle_ent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_ent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_update_particle_latency;
        break;
      }
      
      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_particle_latency:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_latency()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_update_particle_should_draw;
        break;
      }
      
      // optional .CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_update_particle_should_draw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_update_particle_should_draw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_ParticleManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }
  
  // required uint32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (has_release_particle_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->release_particle_index(), output);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (has_create_particle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->create_particle(), output);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (has_destroy_particle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->destroy_particle(), output);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (has_destroy_particle_involving()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->destroy_particle_involving(), output);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (has_update_particle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->update_particle(), output);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (has_update_particle_fwd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->update_particle_fwd(), output);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (has_update_particle_orient()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->update_particle_orient(), output);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (has_update_particle_fallback()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->update_particle_fallback(), output);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (has_update_particle_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->update_particle_offset(), output);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (has_update_particle_ent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->update_particle_ent(), output);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;
  if (has_update_particle_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->update_particle_latency(), output);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (has_update_particle_should_draw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->update_particle_should_draw(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_ParticleManager::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }
  
  // required uint32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (has_release_particle_index()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->release_particle_index(), target);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (has_create_particle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->create_particle(), target);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (has_destroy_particle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->destroy_particle(), target);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (has_destroy_particle_involving()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->destroy_particle_involving(), target);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (has_update_particle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->update_particle(), target);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (has_update_particle_fwd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->update_particle_fwd(), target);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (has_update_particle_orient()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->update_particle_orient(), target);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (has_update_particle_fallback()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->update_particle_fallback(), target);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (has_update_particle_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->update_particle_offset(), target);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (has_update_particle_ent()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->update_particle_ent(), target);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;
  if (has_update_particle_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->update_particle_latency(), target);
  }
  
  // optional .CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (has_update_particle_should_draw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->update_particle_should_draw(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_ParticleManager::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DOTA_PARTICLE_MESSAGE type = 1 [default = DOTA_PARTICLE_MANAGER_EVENT_CREATE];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // required uint32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // optional .CDOTAUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
    if (has_release_particle_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->release_particle_index());
    }
    
    // optional .CDOTAUserMsg_ParticleManager.CreateParticle create_particle = 4;
    if (has_create_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->create_particle());
    }
    
    // optional .CDOTAUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
    if (has_destroy_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroy_particle());
    }
    
    // optional .CDOTAUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
    if (has_destroy_particle_involving()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destroy_particle_involving());
    }
    
    // optional .CDOTAUserMsg_ParticleManager.UpdateParticle update_particle = 7;
    if (has_update_particle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle());
    }
    
    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
    if (has_update_particle_fwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_fwd());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
    if (has_update_particle_orient()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_orient());
    }
    
    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
    if (has_update_particle_fallback()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_fallback());
    }
    
    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
    if (has_update_particle_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_offset());
    }
    
    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
    if (has_update_particle_ent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_ent());
    }
    
    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleLatency update_particle_latency = 13;
    if (has_update_particle_latency()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_latency());
    }
    
    // optional .CDOTAUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
    if (has_update_particle_should_draw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->update_particle_should_draw());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_ParticleManager::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_ParticleManager* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_ParticleManager*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_ParticleManager::MergeFrom(const CDOTAUserMsg_ParticleManager& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_release_particle_index()) {
      mutable_release_particle_index()->::CDOTAUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(from.release_particle_index());
    }
    if (from.has_create_particle()) {
      mutable_create_particle()->::CDOTAUserMsg_ParticleManager_CreateParticle::MergeFrom(from.create_particle());
    }
    if (from.has_destroy_particle()) {
      mutable_destroy_particle()->::CDOTAUserMsg_ParticleManager_DestroyParticle::MergeFrom(from.destroy_particle());
    }
    if (from.has_destroy_particle_involving()) {
      mutable_destroy_particle_involving()->::CDOTAUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(from.destroy_particle_involving());
    }
    if (from.has_update_particle()) {
      mutable_update_particle()->::CDOTAUserMsg_ParticleManager_UpdateParticle::MergeFrom(from.update_particle());
    }
    if (from.has_update_particle_fwd()) {
      mutable_update_particle_fwd()->::CDOTAUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(from.update_particle_fwd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_update_particle_orient()) {
      mutable_update_particle_orient()->::CDOTAUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(from.update_particle_orient());
    }
    if (from.has_update_particle_fallback()) {
      mutable_update_particle_fallback()->::CDOTAUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(from.update_particle_fallback());
    }
    if (from.has_update_particle_offset()) {
      mutable_update_particle_offset()->::CDOTAUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(from.update_particle_offset());
    }
    if (from.has_update_particle_ent()) {
      mutable_update_particle_ent()->::CDOTAUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(from.update_particle_ent());
    }
    if (from.has_update_particle_latency()) {
      mutable_update_particle_latency()->::CDOTAUserMsg_ParticleManager_UpdateParticleLatency::MergeFrom(from.update_particle_latency());
    }
    if (from.has_update_particle_should_draw()) {
      mutable_update_particle_should_draw()->::CDOTAUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(from.update_particle_should_draw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_ParticleManager::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_ParticleManager::CopyFrom(const CDOTAUserMsg_ParticleManager& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_ParticleManager::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CDOTAUserMsg_ParticleManager::Swap(CDOTAUserMsg_ParticleManager* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(index_, other->index_);
    std::swap(release_particle_index_, other->release_particle_index_);
    std::swap(create_particle_, other->create_particle_);
    std::swap(destroy_particle_, other->destroy_particle_);
    std::swap(destroy_particle_involving_, other->destroy_particle_involving_);
    std::swap(update_particle_, other->update_particle_);
    std::swap(update_particle_fwd_, other->update_particle_fwd_);
    std::swap(update_particle_orient_, other->update_particle_orient_);
    std::swap(update_particle_fallback_, other->update_particle_fallback_);
    std::swap(update_particle_offset_, other->update_particle_offset_);
    std::swap(update_particle_ent_, other->update_particle_ent_);
    std::swap(update_particle_latency_, other->update_particle_latency_);
    std::swap(update_particle_should_draw_, other->update_particle_should_draw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_ParticleManager::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_ParticleManager_descriptor_;
  metadata.reflection = CDOTAUserMsg_ParticleManager_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_OverheadEvent::kMessageTypeFieldNumber;
const int CDOTAUserMsg_OverheadEvent::kValueFieldNumber;
const int CDOTAUserMsg_OverheadEvent::kTargetPlayerEntindexFieldNumber;
const int CDOTAUserMsg_OverheadEvent::kTargetEntindexFieldNumber;
const int CDOTAUserMsg_OverheadEvent::kSourcePlayerEntindexFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_OverheadEvent::CDOTAUserMsg_OverheadEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_OverheadEvent::InitAsDefaultInstance() {
}

CDOTAUserMsg_OverheadEvent::CDOTAUserMsg_OverheadEvent(const CDOTAUserMsg_OverheadEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_OverheadEvent::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = 0;
  value_ = 0;
  target_player_entindex_ = 0;
  target_entindex_ = 0;
  source_player_entindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_OverheadEvent::~CDOTAUserMsg_OverheadEvent() {
  SharedDtor();
}

void CDOTAUserMsg_OverheadEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_OverheadEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_OverheadEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_OverheadEvent_descriptor_;
}

const CDOTAUserMsg_OverheadEvent& CDOTAUserMsg_OverheadEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_OverheadEvent* CDOTAUserMsg_OverheadEvent::default_instance_ = NULL;

CDOTAUserMsg_OverheadEvent* CDOTAUserMsg_OverheadEvent::New() const {
  return new CDOTAUserMsg_OverheadEvent;
}

void CDOTAUserMsg_OverheadEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_type_ = 0;
    value_ = 0;
    target_player_entindex_ = 0;
    target_entindex_ = 0;
    source_player_entindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_OverheadEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_OVERHEAD_ALERT_IsValid(value)) {
            set_message_type(static_cast< DOTA_OVERHEAD_ALERT >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }
      
      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target_player_entindex;
        break;
      }
      
      // optional int32 target_player_entindex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_player_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_player_entindex_)));
          set_has_target_player_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_target_entindex;
        break;
      }
      
      // optional int32 target_entindex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_entindex_)));
          set_has_target_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_source_player_entindex;
        break;
      }
      
      // optional int32 source_player_entindex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_player_entindex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_player_entindex_)));
          set_has_source_player_entindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_OverheadEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }
  
  // optional int32 target_player_entindex = 3;
  if (has_target_player_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_player_entindex(), output);
  }
  
  // optional int32 target_entindex = 4;
  if (has_target_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->target_entindex(), output);
  }
  
  // optional int32 source_player_entindex = 5;
  if (has_source_player_entindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->source_player_entindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_OverheadEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type(), target);
  }
  
  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }
  
  // optional int32 target_player_entindex = 3;
  if (has_target_player_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target_player_entindex(), target);
  }
  
  // optional int32 target_entindex = 4;
  if (has_target_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->target_entindex(), target);
  }
  
  // optional int32 source_player_entindex = 5;
  if (has_source_player_entindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->source_player_entindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_OverheadEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DOTA_OVERHEAD_ALERT message_type = 1 [default = OVERHEAD_ALERT_GOLD];
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
    }
    
    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }
    
    // optional int32 target_player_entindex = 3;
    if (has_target_player_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_player_entindex());
    }
    
    // optional int32 target_entindex = 4;
    if (has_target_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_entindex());
    }
    
    // optional int32 source_player_entindex = 5;
    if (has_source_player_entindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->source_player_entindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_OverheadEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_OverheadEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_OverheadEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_OverheadEvent::MergeFrom(const CDOTAUserMsg_OverheadEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_target_player_entindex()) {
      set_target_player_entindex(from.target_player_entindex());
    }
    if (from.has_target_entindex()) {
      set_target_entindex(from.target_entindex());
    }
    if (from.has_source_player_entindex()) {
      set_source_player_entindex(from.source_player_entindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_OverheadEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_OverheadEvent::CopyFrom(const CDOTAUserMsg_OverheadEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_OverheadEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CDOTAUserMsg_OverheadEvent::Swap(CDOTAUserMsg_OverheadEvent* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(value_, other->value_);
    std::swap(target_player_entindex_, other->target_player_entindex_);
    std::swap(target_entindex_, other->target_entindex_);
    std::swap(source_player_entindex_, other->source_player_entindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_OverheadEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_OverheadEvent_descriptor_;
  metadata.reflection = CDOTAUserMsg_OverheadEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAUserMsg_TutorialTipInfo::kNameFieldNumber;
const int CDOTAUserMsg_TutorialTipInfo::kProgressFieldNumber;
#endif  // !_MSC_VER

CDOTAUserMsg_TutorialTipInfo::CDOTAUserMsg_TutorialTipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAUserMsg_TutorialTipInfo::InitAsDefaultInstance() {
}

CDOTAUserMsg_TutorialTipInfo::CDOTAUserMsg_TutorialTipInfo(const CDOTAUserMsg_TutorialTipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialTipInfo::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  progress_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAUserMsg_TutorialTipInfo::~CDOTAUserMsg_TutorialTipInfo() {
  SharedDtor();
}

void CDOTAUserMsg_TutorialTipInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CDOTAUserMsg_TutorialTipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAUserMsg_TutorialTipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAUserMsg_TutorialTipInfo_descriptor_;
}

const CDOTAUserMsg_TutorialTipInfo& CDOTAUserMsg_TutorialTipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fusermessages_2eproto();  return *default_instance_;
}

CDOTAUserMsg_TutorialTipInfo* CDOTAUserMsg_TutorialTipInfo::default_instance_ = NULL;

CDOTAUserMsg_TutorialTipInfo* CDOTAUserMsg_TutorialTipInfo::New() const {
  return new CDOTAUserMsg_TutorialTipInfo;
}

void CDOTAUserMsg_TutorialTipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    progress_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAUserMsg_TutorialTipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_progress;
        break;
      }
      
      // optional int32 progress = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAUserMsg_TutorialTipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional int32 progress = 2;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->progress(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAUserMsg_TutorialTipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional int32 progress = 2;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->progress(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAUserMsg_TutorialTipInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional int32 progress = 2;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAUserMsg_TutorialTipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAUserMsg_TutorialTipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAUserMsg_TutorialTipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAUserMsg_TutorialTipInfo::MergeFrom(const CDOTAUserMsg_TutorialTipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAUserMsg_TutorialTipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAUserMsg_TutorialTipInfo::CopyFrom(const CDOTAUserMsg_TutorialTipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAUserMsg_TutorialTipInfo::IsInitialized() const {
  
  return true;
}

void CDOTAUserMsg_TutorialTipInfo::Swap(CDOTAUserMsg_TutorialTipInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(progress_, other->progress_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAUserMsg_TutorialTipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAUserMsg_TutorialTipInfo_descriptor_;
  metadata.reflection = CDOTAUserMsg_TutorialTipInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
