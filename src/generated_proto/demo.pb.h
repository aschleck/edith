// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: demo.proto

#ifndef PROTOBUF_demo_2eproto__INCLUDED
#define PROTOBUF_demo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "google/protobuf/descriptor.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_demo_2eproto();
void protobuf_AssignDesc_demo_2eproto();
void protobuf_ShutdownFile_demo_2eproto();

class CDemoFileHeader;
class CGameInfo;
class CGameInfo_CDotaGameInfo;
class CGameInfo_CDotaGameInfo_CPlayerInfo;
class CDemoFileInfo;
class CDemoPacket;
class CDemoFullPacket;
class CDemoSyncTick;
class CDemoConsoleCmd;
class CDemoSendTables;
class CDemoClassInfo;
class CDemoClassInfo_class_t;
class CDemoCustomData;
class CDemoCustomDataCallbacks;
class CDemoStringTables;
class CDemoStringTables_items_t;
class CDemoStringTables_table_t;
class CDemoStop;
class CDemoUserCmd;

enum EDemoCommands {
  DEM_Error = -1,
  DEM_Stop = 0,
  DEM_FileHeader = 1,
  DEM_FileInfo = 2,
  DEM_SyncTick = 3,
  DEM_SendTables = 4,
  DEM_ClassInfo = 5,
  DEM_StringTables = 6,
  DEM_Packet = 7,
  DEM_SignonPacket = 8,
  DEM_ConsoleCmd = 9,
  DEM_CustomData = 10,
  DEM_CustomDataCallbacks = 11,
  DEM_UserCmd = 12,
  DEM_FullPacket = 13,
  DEM_Max = 14,
  DEM_IsCompressed = 112
};
bool EDemoCommands_IsValid(int value);
const EDemoCommands EDemoCommands_MIN = DEM_Error;
const EDemoCommands EDemoCommands_MAX = DEM_IsCompressed;
const int EDemoCommands_ARRAYSIZE = EDemoCommands_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDemoCommands_descriptor();
inline const ::std::string& EDemoCommands_Name(EDemoCommands value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDemoCommands_descriptor(), value);
}
inline bool EDemoCommands_Parse(
    const ::std::string& name, EDemoCommands* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDemoCommands>(
    EDemoCommands_descriptor(), name, value);
}
// ===================================================================

class CDemoFileHeader : public ::google::protobuf::Message {
 public:
  CDemoFileHeader();
  virtual ~CDemoFileHeader();
  
  CDemoFileHeader(const CDemoFileHeader& from);
  
  inline CDemoFileHeader& operator=(const CDemoFileHeader& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoFileHeader& default_instance();
  
  void Swap(CDemoFileHeader* other);
  
  // implements Message ----------------------------------------------
  
  CDemoFileHeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoFileHeader& from);
  void MergeFrom(const CDemoFileHeader& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string demo_file_stamp = 1;
  inline bool has_demo_file_stamp() const;
  inline void clear_demo_file_stamp();
  static const int kDemoFileStampFieldNumber = 1;
  inline const ::std::string& demo_file_stamp() const;
  inline void set_demo_file_stamp(const ::std::string& value);
  inline void set_demo_file_stamp(const char* value);
  inline void set_demo_file_stamp(const char* value, size_t size);
  inline ::std::string* mutable_demo_file_stamp();
  inline ::std::string* release_demo_file_stamp();
  
  // optional int32 network_protocol = 2;
  inline bool has_network_protocol() const;
  inline void clear_network_protocol();
  static const int kNetworkProtocolFieldNumber = 2;
  inline ::google::protobuf::int32 network_protocol() const;
  inline void set_network_protocol(::google::protobuf::int32 value);
  
  // optional string server_name = 3;
  inline bool has_server_name() const;
  inline void clear_server_name();
  static const int kServerNameFieldNumber = 3;
  inline const ::std::string& server_name() const;
  inline void set_server_name(const ::std::string& value);
  inline void set_server_name(const char* value);
  inline void set_server_name(const char* value, size_t size);
  inline ::std::string* mutable_server_name();
  inline ::std::string* release_server_name();
  
  // optional string client_name = 4;
  inline bool has_client_name() const;
  inline void clear_client_name();
  static const int kClientNameFieldNumber = 4;
  inline const ::std::string& client_name() const;
  inline void set_client_name(const ::std::string& value);
  inline void set_client_name(const char* value);
  inline void set_client_name(const char* value, size_t size);
  inline ::std::string* mutable_client_name();
  inline ::std::string* release_client_name();
  
  // optional string map_name = 5;
  inline bool has_map_name() const;
  inline void clear_map_name();
  static const int kMapNameFieldNumber = 5;
  inline const ::std::string& map_name() const;
  inline void set_map_name(const ::std::string& value);
  inline void set_map_name(const char* value);
  inline void set_map_name(const char* value, size_t size);
  inline ::std::string* mutable_map_name();
  inline ::std::string* release_map_name();
  
  // optional string game_directory = 6;
  inline bool has_game_directory() const;
  inline void clear_game_directory();
  static const int kGameDirectoryFieldNumber = 6;
  inline const ::std::string& game_directory() const;
  inline void set_game_directory(const ::std::string& value);
  inline void set_game_directory(const char* value);
  inline void set_game_directory(const char* value, size_t size);
  inline ::std::string* mutable_game_directory();
  inline ::std::string* release_game_directory();
  
  // optional int32 fullpackets_version = 7;
  inline bool has_fullpackets_version() const;
  inline void clear_fullpackets_version();
  static const int kFullpacketsVersionFieldNumber = 7;
  inline ::google::protobuf::int32 fullpackets_version() const;
  inline void set_fullpackets_version(::google::protobuf::int32 value);
  
  // optional bool allow_clientside_entities = 8;
  inline bool has_allow_clientside_entities() const;
  inline void clear_allow_clientside_entities();
  static const int kAllowClientsideEntitiesFieldNumber = 8;
  inline bool allow_clientside_entities() const;
  inline void set_allow_clientside_entities(bool value);
  
  // @@protoc_insertion_point(class_scope:CDemoFileHeader)
 private:
  inline void set_has_demo_file_stamp();
  inline void clear_has_demo_file_stamp();
  inline void set_has_network_protocol();
  inline void clear_has_network_protocol();
  inline void set_has_server_name();
  inline void clear_has_server_name();
  inline void set_has_client_name();
  inline void clear_has_client_name();
  inline void set_has_map_name();
  inline void clear_has_map_name();
  inline void set_has_game_directory();
  inline void clear_has_game_directory();
  inline void set_has_fullpackets_version();
  inline void clear_has_fullpackets_version();
  inline void set_has_allow_clientside_entities();
  inline void clear_has_allow_clientside_entities();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* demo_file_stamp_;
  ::std::string* server_name_;
  ::std::string* client_name_;
  ::google::protobuf::int32 network_protocol_;
  ::google::protobuf::int32 fullpackets_version_;
  ::std::string* map_name_;
  ::std::string* game_directory_;
  bool allow_clientside_entities_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoFileHeader* default_instance_;
};
// -------------------------------------------------------------------

class CGameInfo_CDotaGameInfo_CPlayerInfo : public ::google::protobuf::Message {
 public:
  CGameInfo_CDotaGameInfo_CPlayerInfo();
  virtual ~CGameInfo_CDotaGameInfo_CPlayerInfo();
  
  CGameInfo_CDotaGameInfo_CPlayerInfo(const CGameInfo_CDotaGameInfo_CPlayerInfo& from);
  
  inline CGameInfo_CDotaGameInfo_CPlayerInfo& operator=(const CGameInfo_CDotaGameInfo_CPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameInfo_CDotaGameInfo_CPlayerInfo& default_instance();
  
  void Swap(CGameInfo_CDotaGameInfo_CPlayerInfo* other);
  
  // implements Message ----------------------------------------------
  
  CGameInfo_CDotaGameInfo_CPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGameInfo_CDotaGameInfo_CPlayerInfo& from);
  void MergeFrom(const CGameInfo_CDotaGameInfo_CPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string hero_name = 1;
  inline bool has_hero_name() const;
  inline void clear_hero_name();
  static const int kHeroNameFieldNumber = 1;
  inline const ::std::string& hero_name() const;
  inline void set_hero_name(const ::std::string& value);
  inline void set_hero_name(const char* value);
  inline void set_hero_name(const char* value, size_t size);
  inline ::std::string* mutable_hero_name();
  inline ::std::string* release_hero_name();
  
  // optional string player_name = 2;
  inline bool has_player_name() const;
  inline void clear_player_name();
  static const int kPlayerNameFieldNumber = 2;
  inline const ::std::string& player_name() const;
  inline void set_player_name(const ::std::string& value);
  inline void set_player_name(const char* value);
  inline void set_player_name(const char* value, size_t size);
  inline ::std::string* mutable_player_name();
  inline ::std::string* release_player_name();
  
  // optional bool is_fake_client = 3;
  inline bool has_is_fake_client() const;
  inline void clear_is_fake_client();
  static const int kIsFakeClientFieldNumber = 3;
  inline bool is_fake_client() const;
  inline void set_is_fake_client(bool value);
  
  // @@protoc_insertion_point(class_scope:CGameInfo.CDotaGameInfo.CPlayerInfo)
 private:
  inline void set_has_hero_name();
  inline void clear_has_hero_name();
  inline void set_has_player_name();
  inline void clear_has_player_name();
  inline void set_has_is_fake_client();
  inline void clear_has_is_fake_client();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* hero_name_;
  ::std::string* player_name_;
  bool is_fake_client_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CGameInfo_CDotaGameInfo_CPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGameInfo_CDotaGameInfo : public ::google::protobuf::Message {
 public:
  CGameInfo_CDotaGameInfo();
  virtual ~CGameInfo_CDotaGameInfo();
  
  CGameInfo_CDotaGameInfo(const CGameInfo_CDotaGameInfo& from);
  
  inline CGameInfo_CDotaGameInfo& operator=(const CGameInfo_CDotaGameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameInfo_CDotaGameInfo& default_instance();
  
  void Swap(CGameInfo_CDotaGameInfo* other);
  
  // implements Message ----------------------------------------------
  
  CGameInfo_CDotaGameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGameInfo_CDotaGameInfo& from);
  void MergeFrom(const CGameInfo_CDotaGameInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CGameInfo_CDotaGameInfo_CPlayerInfo CPlayerInfo;
  
  // accessors -------------------------------------------------------
  
  // optional uint32 match_id = 1;
  inline bool has_match_id() const;
  inline void clear_match_id();
  static const int kMatchIdFieldNumber = 1;
  inline ::google::protobuf::uint32 match_id() const;
  inline void set_match_id(::google::protobuf::uint32 value);
  
  // optional int32 game_mode = 2;
  inline bool has_game_mode() const;
  inline void clear_game_mode();
  static const int kGameModeFieldNumber = 2;
  inline ::google::protobuf::int32 game_mode() const;
  inline void set_game_mode(::google::protobuf::int32 value);
  
  // optional int32 game_winner = 3;
  inline bool has_game_winner() const;
  inline void clear_game_winner();
  static const int kGameWinnerFieldNumber = 3;
  inline ::google::protobuf::int32 game_winner() const;
  inline void set_game_winner(::google::protobuf::int32 value);
  
  // repeated .CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  inline int player_info_size() const;
  inline void clear_player_info();
  static const int kPlayerInfoFieldNumber = 4;
  inline const ::CGameInfo_CDotaGameInfo_CPlayerInfo& player_info(int index) const;
  inline ::CGameInfo_CDotaGameInfo_CPlayerInfo* mutable_player_info(int index);
  inline ::CGameInfo_CDotaGameInfo_CPlayerInfo* add_player_info();
  inline const ::google::protobuf::RepeatedPtrField< ::CGameInfo_CDotaGameInfo_CPlayerInfo >&
      player_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::CGameInfo_CDotaGameInfo_CPlayerInfo >*
      mutable_player_info();
  
  // @@protoc_insertion_point(class_scope:CGameInfo.CDotaGameInfo)
 private:
  inline void set_has_match_id();
  inline void clear_has_match_id();
  inline void set_has_game_mode();
  inline void clear_has_game_mode();
  inline void set_has_game_winner();
  inline void clear_has_game_winner();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 match_id_;
  ::google::protobuf::int32 game_mode_;
  ::google::protobuf::RepeatedPtrField< ::CGameInfo_CDotaGameInfo_CPlayerInfo > player_info_;
  ::google::protobuf::int32 game_winner_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CGameInfo_CDotaGameInfo* default_instance_;
};
// -------------------------------------------------------------------

class CGameInfo : public ::google::protobuf::Message {
 public:
  CGameInfo();
  virtual ~CGameInfo();
  
  CGameInfo(const CGameInfo& from);
  
  inline CGameInfo& operator=(const CGameInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CGameInfo& default_instance();
  
  void Swap(CGameInfo* other);
  
  // implements Message ----------------------------------------------
  
  CGameInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CGameInfo& from);
  void MergeFrom(const CGameInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CGameInfo_CDotaGameInfo CDotaGameInfo;
  
  // accessors -------------------------------------------------------
  
  // optional .CGameInfo.CDotaGameInfo dota = 4;
  inline bool has_dota() const;
  inline void clear_dota();
  static const int kDotaFieldNumber = 4;
  inline const ::CGameInfo_CDotaGameInfo& dota() const;
  inline ::CGameInfo_CDotaGameInfo* mutable_dota();
  inline ::CGameInfo_CDotaGameInfo* release_dota();
  
  // @@protoc_insertion_point(class_scope:CGameInfo)
 private:
  inline void set_has_dota();
  inline void clear_has_dota();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CGameInfo_CDotaGameInfo* dota_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CGameInfo* default_instance_;
};
// -------------------------------------------------------------------

class CDemoFileInfo : public ::google::protobuf::Message {
 public:
  CDemoFileInfo();
  virtual ~CDemoFileInfo();
  
  CDemoFileInfo(const CDemoFileInfo& from);
  
  inline CDemoFileInfo& operator=(const CDemoFileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoFileInfo& default_instance();
  
  void Swap(CDemoFileInfo* other);
  
  // implements Message ----------------------------------------------
  
  CDemoFileInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoFileInfo& from);
  void MergeFrom(const CDemoFileInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float playback_time = 1;
  inline bool has_playback_time() const;
  inline void clear_playback_time();
  static const int kPlaybackTimeFieldNumber = 1;
  inline float playback_time() const;
  inline void set_playback_time(float value);
  
  // optional int32 playback_ticks = 2;
  inline bool has_playback_ticks() const;
  inline void clear_playback_ticks();
  static const int kPlaybackTicksFieldNumber = 2;
  inline ::google::protobuf::int32 playback_ticks() const;
  inline void set_playback_ticks(::google::protobuf::int32 value);
  
  // optional int32 playback_frames = 3;
  inline bool has_playback_frames() const;
  inline void clear_playback_frames();
  static const int kPlaybackFramesFieldNumber = 3;
  inline ::google::protobuf::int32 playback_frames() const;
  inline void set_playback_frames(::google::protobuf::int32 value);
  
  // optional .CGameInfo game_info = 4;
  inline bool has_game_info() const;
  inline void clear_game_info();
  static const int kGameInfoFieldNumber = 4;
  inline const ::CGameInfo& game_info() const;
  inline ::CGameInfo* mutable_game_info();
  inline ::CGameInfo* release_game_info();
  
  // @@protoc_insertion_point(class_scope:CDemoFileInfo)
 private:
  inline void set_has_playback_time();
  inline void clear_has_playback_time();
  inline void set_has_playback_ticks();
  inline void clear_has_playback_ticks();
  inline void set_has_playback_frames();
  inline void clear_has_playback_frames();
  inline void set_has_game_info();
  inline void clear_has_game_info();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float playback_time_;
  ::google::protobuf::int32 playback_ticks_;
  ::CGameInfo* game_info_;
  ::google::protobuf::int32 playback_frames_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoFileInfo* default_instance_;
};
// -------------------------------------------------------------------

class CDemoPacket : public ::google::protobuf::Message {
 public:
  CDemoPacket();
  virtual ~CDemoPacket();
  
  CDemoPacket(const CDemoPacket& from);
  
  inline CDemoPacket& operator=(const CDemoPacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoPacket& default_instance();
  
  void Swap(CDemoPacket* other);
  
  // implements Message ----------------------------------------------
  
  CDemoPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoPacket& from);
  void MergeFrom(const CDemoPacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 sequence_in = 1;
  inline bool has_sequence_in() const;
  inline void clear_sequence_in();
  static const int kSequenceInFieldNumber = 1;
  inline ::google::protobuf::int32 sequence_in() const;
  inline void set_sequence_in(::google::protobuf::int32 value);
  
  // optional int32 sequence_out_ack = 2;
  inline bool has_sequence_out_ack() const;
  inline void clear_sequence_out_ack();
  static const int kSequenceOutAckFieldNumber = 2;
  inline ::google::protobuf::int32 sequence_out_ack() const;
  inline void set_sequence_out_ack(::google::protobuf::int32 value);
  
  // optional bytes data = 3;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:CDemoPacket)
 private:
  inline void set_has_sequence_in();
  inline void clear_has_sequence_in();
  inline void set_has_sequence_out_ack();
  inline void clear_has_sequence_out_ack();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 sequence_in_;
  ::google::protobuf::int32 sequence_out_ack_;
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoPacket* default_instance_;
};
// -------------------------------------------------------------------

class CDemoFullPacket : public ::google::protobuf::Message {
 public:
  CDemoFullPacket();
  virtual ~CDemoFullPacket();
  
  CDemoFullPacket(const CDemoFullPacket& from);
  
  inline CDemoFullPacket& operator=(const CDemoFullPacket& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoFullPacket& default_instance();
  
  void Swap(CDemoFullPacket* other);
  
  // implements Message ----------------------------------------------
  
  CDemoFullPacket* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoFullPacket& from);
  void MergeFrom(const CDemoFullPacket& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .CDemoStringTables string_table = 1;
  inline bool has_string_table() const;
  inline void clear_string_table();
  static const int kStringTableFieldNumber = 1;
  inline const ::CDemoStringTables& string_table() const;
  inline ::CDemoStringTables* mutable_string_table();
  inline ::CDemoStringTables* release_string_table();
  
  // optional .CDemoPacket packet = 2;
  inline bool has_packet() const;
  inline void clear_packet();
  static const int kPacketFieldNumber = 2;
  inline const ::CDemoPacket& packet() const;
  inline ::CDemoPacket* mutable_packet();
  inline ::CDemoPacket* release_packet();
  
  // @@protoc_insertion_point(class_scope:CDemoFullPacket)
 private:
  inline void set_has_string_table();
  inline void clear_has_string_table();
  inline void set_has_packet();
  inline void clear_has_packet();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::CDemoStringTables* string_table_;
  ::CDemoPacket* packet_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoFullPacket* default_instance_;
};
// -------------------------------------------------------------------

class CDemoSyncTick : public ::google::protobuf::Message {
 public:
  CDemoSyncTick();
  virtual ~CDemoSyncTick();
  
  CDemoSyncTick(const CDemoSyncTick& from);
  
  inline CDemoSyncTick& operator=(const CDemoSyncTick& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoSyncTick& default_instance();
  
  void Swap(CDemoSyncTick* other);
  
  // implements Message ----------------------------------------------
  
  CDemoSyncTick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoSyncTick& from);
  void MergeFrom(const CDemoSyncTick& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CDemoSyncTick)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoSyncTick* default_instance_;
};
// -------------------------------------------------------------------

class CDemoConsoleCmd : public ::google::protobuf::Message {
 public:
  CDemoConsoleCmd();
  virtual ~CDemoConsoleCmd();
  
  CDemoConsoleCmd(const CDemoConsoleCmd& from);
  
  inline CDemoConsoleCmd& operator=(const CDemoConsoleCmd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoConsoleCmd& default_instance();
  
  void Swap(CDemoConsoleCmd* other);
  
  // implements Message ----------------------------------------------
  
  CDemoConsoleCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoConsoleCmd& from);
  void MergeFrom(const CDemoConsoleCmd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string cmdstring = 1;
  inline bool has_cmdstring() const;
  inline void clear_cmdstring();
  static const int kCmdstringFieldNumber = 1;
  inline const ::std::string& cmdstring() const;
  inline void set_cmdstring(const ::std::string& value);
  inline void set_cmdstring(const char* value);
  inline void set_cmdstring(const char* value, size_t size);
  inline ::std::string* mutable_cmdstring();
  inline ::std::string* release_cmdstring();
  
  // @@protoc_insertion_point(class_scope:CDemoConsoleCmd)
 private:
  inline void set_has_cmdstring();
  inline void clear_has_cmdstring();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* cmdstring_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoConsoleCmd* default_instance_;
};
// -------------------------------------------------------------------

class CDemoSendTables : public ::google::protobuf::Message {
 public:
  CDemoSendTables();
  virtual ~CDemoSendTables();
  
  CDemoSendTables(const CDemoSendTables& from);
  
  inline CDemoSendTables& operator=(const CDemoSendTables& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoSendTables& default_instance();
  
  void Swap(CDemoSendTables* other);
  
  // implements Message ----------------------------------------------
  
  CDemoSendTables* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoSendTables& from);
  void MergeFrom(const CDemoSendTables& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:CDemoSendTables)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoSendTables* default_instance_;
};
// -------------------------------------------------------------------

class CDemoClassInfo_class_t : public ::google::protobuf::Message {
 public:
  CDemoClassInfo_class_t();
  virtual ~CDemoClassInfo_class_t();
  
  CDemoClassInfo_class_t(const CDemoClassInfo_class_t& from);
  
  inline CDemoClassInfo_class_t& operator=(const CDemoClassInfo_class_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoClassInfo_class_t& default_instance();
  
  void Swap(CDemoClassInfo_class_t* other);
  
  // implements Message ----------------------------------------------
  
  CDemoClassInfo_class_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoClassInfo_class_t& from);
  void MergeFrom(const CDemoClassInfo_class_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 class_id = 1;
  inline bool has_class_id() const;
  inline void clear_class_id();
  static const int kClassIdFieldNumber = 1;
  inline ::google::protobuf::int32 class_id() const;
  inline void set_class_id(::google::protobuf::int32 value);
  
  // optional string network_name = 2;
  inline bool has_network_name() const;
  inline void clear_network_name();
  static const int kNetworkNameFieldNumber = 2;
  inline const ::std::string& network_name() const;
  inline void set_network_name(const ::std::string& value);
  inline void set_network_name(const char* value);
  inline void set_network_name(const char* value, size_t size);
  inline ::std::string* mutable_network_name();
  inline ::std::string* release_network_name();
  
  // optional string table_name = 3;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 3;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // @@protoc_insertion_point(class_scope:CDemoClassInfo.class_t)
 private:
  inline void set_has_class_id();
  inline void clear_has_class_id();
  inline void set_has_network_name();
  inline void clear_has_network_name();
  inline void set_has_table_name();
  inline void clear_has_table_name();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* network_name_;
  ::std::string* table_name_;
  ::google::protobuf::int32 class_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoClassInfo_class_t* default_instance_;
};
// -------------------------------------------------------------------

class CDemoClassInfo : public ::google::protobuf::Message {
 public:
  CDemoClassInfo();
  virtual ~CDemoClassInfo();
  
  CDemoClassInfo(const CDemoClassInfo& from);
  
  inline CDemoClassInfo& operator=(const CDemoClassInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoClassInfo& default_instance();
  
  void Swap(CDemoClassInfo* other);
  
  // implements Message ----------------------------------------------
  
  CDemoClassInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoClassInfo& from);
  void MergeFrom(const CDemoClassInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CDemoClassInfo_class_t class_t;
  
  // accessors -------------------------------------------------------
  
  // repeated .CDemoClassInfo.class_t classes = 1;
  inline int classes_size() const;
  inline void clear_classes();
  static const int kClassesFieldNumber = 1;
  inline const ::CDemoClassInfo_class_t& classes(int index) const;
  inline ::CDemoClassInfo_class_t* mutable_classes(int index);
  inline ::CDemoClassInfo_class_t* add_classes();
  inline const ::google::protobuf::RepeatedPtrField< ::CDemoClassInfo_class_t >&
      classes() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDemoClassInfo_class_t >*
      mutable_classes();
  
  // @@protoc_insertion_point(class_scope:CDemoClassInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CDemoClassInfo_class_t > classes_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoClassInfo* default_instance_;
};
// -------------------------------------------------------------------

class CDemoCustomData : public ::google::protobuf::Message {
 public:
  CDemoCustomData();
  virtual ~CDemoCustomData();
  
  CDemoCustomData(const CDemoCustomData& from);
  
  inline CDemoCustomData& operator=(const CDemoCustomData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoCustomData& default_instance();
  
  void Swap(CDemoCustomData* other);
  
  // implements Message ----------------------------------------------
  
  CDemoCustomData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoCustomData& from);
  void MergeFrom(const CDemoCustomData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 callback_index = 1;
  inline bool has_callback_index() const;
  inline void clear_callback_index();
  static const int kCallbackIndexFieldNumber = 1;
  inline ::google::protobuf::int32 callback_index() const;
  inline void set_callback_index(::google::protobuf::int32 value);
  
  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:CDemoCustomData)
 private:
  inline void set_has_callback_index();
  inline void clear_has_callback_index();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  ::google::protobuf::int32 callback_index_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoCustomData* default_instance_;
};
// -------------------------------------------------------------------

class CDemoCustomDataCallbacks : public ::google::protobuf::Message {
 public:
  CDemoCustomDataCallbacks();
  virtual ~CDemoCustomDataCallbacks();
  
  CDemoCustomDataCallbacks(const CDemoCustomDataCallbacks& from);
  
  inline CDemoCustomDataCallbacks& operator=(const CDemoCustomDataCallbacks& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoCustomDataCallbacks& default_instance();
  
  void Swap(CDemoCustomDataCallbacks* other);
  
  // implements Message ----------------------------------------------
  
  CDemoCustomDataCallbacks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoCustomDataCallbacks& from);
  void MergeFrom(const CDemoCustomDataCallbacks& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string save_id = 1;
  inline int save_id_size() const;
  inline void clear_save_id();
  static const int kSaveIdFieldNumber = 1;
  inline const ::std::string& save_id(int index) const;
  inline ::std::string* mutable_save_id(int index);
  inline void set_save_id(int index, const ::std::string& value);
  inline void set_save_id(int index, const char* value);
  inline void set_save_id(int index, const char* value, size_t size);
  inline ::std::string* add_save_id();
  inline void add_save_id(const ::std::string& value);
  inline void add_save_id(const char* value);
  inline void add_save_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& save_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_save_id();
  
  // @@protoc_insertion_point(class_scope:CDemoCustomDataCallbacks)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> save_id_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoCustomDataCallbacks* default_instance_;
};
// -------------------------------------------------------------------

class CDemoStringTables_items_t : public ::google::protobuf::Message {
 public:
  CDemoStringTables_items_t();
  virtual ~CDemoStringTables_items_t();
  
  CDemoStringTables_items_t(const CDemoStringTables_items_t& from);
  
  inline CDemoStringTables_items_t& operator=(const CDemoStringTables_items_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoStringTables_items_t& default_instance();
  
  void Swap(CDemoStringTables_items_t* other);
  
  // implements Message ----------------------------------------------
  
  CDemoStringTables_items_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoStringTables_items_t& from);
  void MergeFrom(const CDemoStringTables_items_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string str = 1;
  inline bool has_str() const;
  inline void clear_str();
  static const int kStrFieldNumber = 1;
  inline const ::std::string& str() const;
  inline void set_str(const ::std::string& value);
  inline void set_str(const char* value);
  inline void set_str(const char* value, size_t size);
  inline ::std::string* mutable_str();
  inline ::std::string* release_str();
  
  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:CDemoStringTables.items_t)
 private:
  inline void set_has_str();
  inline void clear_has_str();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* str_;
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoStringTables_items_t* default_instance_;
};
// -------------------------------------------------------------------

class CDemoStringTables_table_t : public ::google::protobuf::Message {
 public:
  CDemoStringTables_table_t();
  virtual ~CDemoStringTables_table_t();
  
  CDemoStringTables_table_t(const CDemoStringTables_table_t& from);
  
  inline CDemoStringTables_table_t& operator=(const CDemoStringTables_table_t& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoStringTables_table_t& default_instance();
  
  void Swap(CDemoStringTables_table_t* other);
  
  // implements Message ----------------------------------------------
  
  CDemoStringTables_table_t* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoStringTables_table_t& from);
  void MergeFrom(const CDemoStringTables_table_t& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string table_name = 1;
  inline bool has_table_name() const;
  inline void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  inline const ::std::string& table_name() const;
  inline void set_table_name(const ::std::string& value);
  inline void set_table_name(const char* value);
  inline void set_table_name(const char* value, size_t size);
  inline ::std::string* mutable_table_name();
  inline ::std::string* release_table_name();
  
  // repeated .CDemoStringTables.items_t items = 2;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 2;
  inline const ::CDemoStringTables_items_t& items(int index) const;
  inline ::CDemoStringTables_items_t* mutable_items(int index);
  inline ::CDemoStringTables_items_t* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t >*
      mutable_items();
  
  // repeated .CDemoStringTables.items_t items_clientside = 3;
  inline int items_clientside_size() const;
  inline void clear_items_clientside();
  static const int kItemsClientsideFieldNumber = 3;
  inline const ::CDemoStringTables_items_t& items_clientside(int index) const;
  inline ::CDemoStringTables_items_t* mutable_items_clientside(int index);
  inline ::CDemoStringTables_items_t* add_items_clientside();
  inline const ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t >&
      items_clientside() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t >*
      mutable_items_clientside();
  
  // optional int32 table_flags = 4;
  inline bool has_table_flags() const;
  inline void clear_table_flags();
  static const int kTableFlagsFieldNumber = 4;
  inline ::google::protobuf::int32 table_flags() const;
  inline void set_table_flags(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:CDemoStringTables.table_t)
 private:
  inline void set_has_table_name();
  inline void clear_has_table_name();
  inline void set_has_table_flags();
  inline void clear_has_table_flags();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* table_name_;
  ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t > items_;
  ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t > items_clientside_;
  ::google::protobuf::int32 table_flags_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoStringTables_table_t* default_instance_;
};
// -------------------------------------------------------------------

class CDemoStringTables : public ::google::protobuf::Message {
 public:
  CDemoStringTables();
  virtual ~CDemoStringTables();
  
  CDemoStringTables(const CDemoStringTables& from);
  
  inline CDemoStringTables& operator=(const CDemoStringTables& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoStringTables& default_instance();
  
  void Swap(CDemoStringTables* other);
  
  // implements Message ----------------------------------------------
  
  CDemoStringTables* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoStringTables& from);
  void MergeFrom(const CDemoStringTables& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CDemoStringTables_items_t items_t;
  typedef CDemoStringTables_table_t table_t;
  
  // accessors -------------------------------------------------------
  
  // repeated .CDemoStringTables.table_t tables = 1;
  inline int tables_size() const;
  inline void clear_tables();
  static const int kTablesFieldNumber = 1;
  inline const ::CDemoStringTables_table_t& tables(int index) const;
  inline ::CDemoStringTables_table_t* mutable_tables(int index);
  inline ::CDemoStringTables_table_t* add_tables();
  inline const ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_table_t >&
      tables() const;
  inline ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_table_t >*
      mutable_tables();
  
  // @@protoc_insertion_point(class_scope:CDemoStringTables)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_table_t > tables_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoStringTables* default_instance_;
};
// -------------------------------------------------------------------

class CDemoStop : public ::google::protobuf::Message {
 public:
  CDemoStop();
  virtual ~CDemoStop();
  
  CDemoStop(const CDemoStop& from);
  
  inline CDemoStop& operator=(const CDemoStop& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoStop& default_instance();
  
  void Swap(CDemoStop* other);
  
  // implements Message ----------------------------------------------
  
  CDemoStop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoStop& from);
  void MergeFrom(const CDemoStop& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:CDemoStop)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoStop* default_instance_;
};
// -------------------------------------------------------------------

class CDemoUserCmd : public ::google::protobuf::Message {
 public:
  CDemoUserCmd();
  virtual ~CDemoUserCmd();
  
  CDemoUserCmd(const CDemoUserCmd& from);
  
  inline CDemoUserCmd& operator=(const CDemoUserCmd& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CDemoUserCmd& default_instance();
  
  void Swap(CDemoUserCmd* other);
  
  // implements Message ----------------------------------------------
  
  CDemoUserCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CDemoUserCmd& from);
  void MergeFrom(const CDemoUserCmd& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 cmd_number = 1;
  inline bool has_cmd_number() const;
  inline void clear_cmd_number();
  static const int kCmdNumberFieldNumber = 1;
  inline ::google::protobuf::int32 cmd_number() const;
  inline void set_cmd_number(::google::protobuf::int32 value);
  
  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:CDemoUserCmd)
 private:
  inline void set_has_cmd_number();
  inline void clear_has_cmd_number();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* data_;
  ::google::protobuf::int32 cmd_number_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_demo_2eproto();
  friend void protobuf_AssignDesc_demo_2eproto();
  friend void protobuf_ShutdownFile_demo_2eproto();
  
  void InitAsDefaultInstance();
  static CDemoUserCmd* default_instance_;
};
// ===================================================================


// ===================================================================

// CDemoFileHeader

// required string demo_file_stamp = 1;
inline bool CDemoFileHeader::has_demo_file_stamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoFileHeader::set_has_demo_file_stamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDemoFileHeader::clear_has_demo_file_stamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDemoFileHeader::clear_demo_file_stamp() {
  if (demo_file_stamp_ != &::google::protobuf::internal::kEmptyString) {
    demo_file_stamp_->clear();
  }
  clear_has_demo_file_stamp();
}
inline const ::std::string& CDemoFileHeader::demo_file_stamp() const {
  return *demo_file_stamp_;
}
inline void CDemoFileHeader::set_demo_file_stamp(const ::std::string& value) {
  set_has_demo_file_stamp();
  if (demo_file_stamp_ == &::google::protobuf::internal::kEmptyString) {
    demo_file_stamp_ = new ::std::string;
  }
  demo_file_stamp_->assign(value);
}
inline void CDemoFileHeader::set_demo_file_stamp(const char* value) {
  set_has_demo_file_stamp();
  if (demo_file_stamp_ == &::google::protobuf::internal::kEmptyString) {
    demo_file_stamp_ = new ::std::string;
  }
  demo_file_stamp_->assign(value);
}
inline void CDemoFileHeader::set_demo_file_stamp(const char* value, size_t size) {
  set_has_demo_file_stamp();
  if (demo_file_stamp_ == &::google::protobuf::internal::kEmptyString) {
    demo_file_stamp_ = new ::std::string;
  }
  demo_file_stamp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoFileHeader::mutable_demo_file_stamp() {
  set_has_demo_file_stamp();
  if (demo_file_stamp_ == &::google::protobuf::internal::kEmptyString) {
    demo_file_stamp_ = new ::std::string;
  }
  return demo_file_stamp_;
}
inline ::std::string* CDemoFileHeader::release_demo_file_stamp() {
  clear_has_demo_file_stamp();
  if (demo_file_stamp_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = demo_file_stamp_;
    demo_file_stamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 network_protocol = 2;
inline bool CDemoFileHeader::has_network_protocol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoFileHeader::set_has_network_protocol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDemoFileHeader::clear_has_network_protocol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDemoFileHeader::clear_network_protocol() {
  network_protocol_ = 0;
  clear_has_network_protocol();
}
inline ::google::protobuf::int32 CDemoFileHeader::network_protocol() const {
  return network_protocol_;
}
inline void CDemoFileHeader::set_network_protocol(::google::protobuf::int32 value) {
  set_has_network_protocol();
  network_protocol_ = value;
}

// optional string server_name = 3;
inline bool CDemoFileHeader::has_server_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDemoFileHeader::set_has_server_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDemoFileHeader::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDemoFileHeader::clear_server_name() {
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    server_name_->clear();
  }
  clear_has_server_name();
}
inline const ::std::string& CDemoFileHeader::server_name() const {
  return *server_name_;
}
inline void CDemoFileHeader::set_server_name(const ::std::string& value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void CDemoFileHeader::set_server_name(const char* value) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(value);
}
inline void CDemoFileHeader::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  server_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoFileHeader::mutable_server_name() {
  set_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    server_name_ = new ::std::string;
  }
  return server_name_;
}
inline ::std::string* CDemoFileHeader::release_server_name() {
  clear_has_server_name();
  if (server_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = server_name_;
    server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string client_name = 4;
inline bool CDemoFileHeader::has_client_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDemoFileHeader::set_has_client_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDemoFileHeader::clear_has_client_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDemoFileHeader::clear_client_name() {
  if (client_name_ != &::google::protobuf::internal::kEmptyString) {
    client_name_->clear();
  }
  clear_has_client_name();
}
inline const ::std::string& CDemoFileHeader::client_name() const {
  return *client_name_;
}
inline void CDemoFileHeader::set_client_name(const ::std::string& value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::kEmptyString) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
}
inline void CDemoFileHeader::set_client_name(const char* value) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::kEmptyString) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
}
inline void CDemoFileHeader::set_client_name(const char* value, size_t size) {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::kEmptyString) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoFileHeader::mutable_client_name() {
  set_has_client_name();
  if (client_name_ == &::google::protobuf::internal::kEmptyString) {
    client_name_ = new ::std::string;
  }
  return client_name_;
}
inline ::std::string* CDemoFileHeader::release_client_name() {
  clear_has_client_name();
  if (client_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = client_name_;
    client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string map_name = 5;
inline bool CDemoFileHeader::has_map_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDemoFileHeader::set_has_map_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CDemoFileHeader::clear_has_map_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CDemoFileHeader::clear_map_name() {
  if (map_name_ != &::google::protobuf::internal::kEmptyString) {
    map_name_->clear();
  }
  clear_has_map_name();
}
inline const ::std::string& CDemoFileHeader::map_name() const {
  return *map_name_;
}
inline void CDemoFileHeader::set_map_name(const ::std::string& value) {
  set_has_map_name();
  if (map_name_ == &::google::protobuf::internal::kEmptyString) {
    map_name_ = new ::std::string;
  }
  map_name_->assign(value);
}
inline void CDemoFileHeader::set_map_name(const char* value) {
  set_has_map_name();
  if (map_name_ == &::google::protobuf::internal::kEmptyString) {
    map_name_ = new ::std::string;
  }
  map_name_->assign(value);
}
inline void CDemoFileHeader::set_map_name(const char* value, size_t size) {
  set_has_map_name();
  if (map_name_ == &::google::protobuf::internal::kEmptyString) {
    map_name_ = new ::std::string;
  }
  map_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoFileHeader::mutable_map_name() {
  set_has_map_name();
  if (map_name_ == &::google::protobuf::internal::kEmptyString) {
    map_name_ = new ::std::string;
  }
  return map_name_;
}
inline ::std::string* CDemoFileHeader::release_map_name() {
  clear_has_map_name();
  if (map_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = map_name_;
    map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string game_directory = 6;
inline bool CDemoFileHeader::has_game_directory() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDemoFileHeader::set_has_game_directory() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CDemoFileHeader::clear_has_game_directory() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CDemoFileHeader::clear_game_directory() {
  if (game_directory_ != &::google::protobuf::internal::kEmptyString) {
    game_directory_->clear();
  }
  clear_has_game_directory();
}
inline const ::std::string& CDemoFileHeader::game_directory() const {
  return *game_directory_;
}
inline void CDemoFileHeader::set_game_directory(const ::std::string& value) {
  set_has_game_directory();
  if (game_directory_ == &::google::protobuf::internal::kEmptyString) {
    game_directory_ = new ::std::string;
  }
  game_directory_->assign(value);
}
inline void CDemoFileHeader::set_game_directory(const char* value) {
  set_has_game_directory();
  if (game_directory_ == &::google::protobuf::internal::kEmptyString) {
    game_directory_ = new ::std::string;
  }
  game_directory_->assign(value);
}
inline void CDemoFileHeader::set_game_directory(const char* value, size_t size) {
  set_has_game_directory();
  if (game_directory_ == &::google::protobuf::internal::kEmptyString) {
    game_directory_ = new ::std::string;
  }
  game_directory_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoFileHeader::mutable_game_directory() {
  set_has_game_directory();
  if (game_directory_ == &::google::protobuf::internal::kEmptyString) {
    game_directory_ = new ::std::string;
  }
  return game_directory_;
}
inline ::std::string* CDemoFileHeader::release_game_directory() {
  clear_has_game_directory();
  if (game_directory_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = game_directory_;
    game_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 fullpackets_version = 7;
inline bool CDemoFileHeader::has_fullpackets_version() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CDemoFileHeader::set_has_fullpackets_version() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CDemoFileHeader::clear_has_fullpackets_version() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CDemoFileHeader::clear_fullpackets_version() {
  fullpackets_version_ = 0;
  clear_has_fullpackets_version();
}
inline ::google::protobuf::int32 CDemoFileHeader::fullpackets_version() const {
  return fullpackets_version_;
}
inline void CDemoFileHeader::set_fullpackets_version(::google::protobuf::int32 value) {
  set_has_fullpackets_version();
  fullpackets_version_ = value;
}

// optional bool allow_clientside_entities = 8;
inline bool CDemoFileHeader::has_allow_clientside_entities() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CDemoFileHeader::set_has_allow_clientside_entities() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CDemoFileHeader::clear_has_allow_clientside_entities() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CDemoFileHeader::clear_allow_clientside_entities() {
  allow_clientside_entities_ = false;
  clear_has_allow_clientside_entities();
}
inline bool CDemoFileHeader::allow_clientside_entities() const {
  return allow_clientside_entities_;
}
inline void CDemoFileHeader::set_allow_clientside_entities(bool value) {
  set_has_allow_clientside_entities();
  allow_clientside_entities_ = value;
}

// -------------------------------------------------------------------

// CGameInfo_CDotaGameInfo_CPlayerInfo

// optional string hero_name = 1;
inline bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_hero_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_hero_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_hero_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_hero_name() {
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    hero_name_->clear();
  }
  clear_has_hero_name();
}
inline const ::std::string& CGameInfo_CDotaGameInfo_CPlayerInfo::hero_name() const {
  return *hero_name_;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(const ::std::string& value) {
  set_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_ = new ::std::string;
  }
  hero_name_->assign(value);
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(const char* value) {
  set_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_ = new ::std::string;
  }
  hero_name_->assign(value);
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_hero_name(const char* value, size_t size) {
  set_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_ = new ::std::string;
  }
  hero_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::mutable_hero_name() {
  set_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    hero_name_ = new ::std::string;
  }
  return hero_name_;
}
inline ::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::release_hero_name() {
  clear_has_hero_name();
  if (hero_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = hero_name_;
    hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string player_name = 2;
inline bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_player_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_player_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_player_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_player_name() {
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    player_name_->clear();
  }
  clear_has_player_name();
}
inline const ::std::string& CGameInfo_CDotaGameInfo_CPlayerInfo::player_name() const {
  return *player_name_;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(const ::std::string& value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(const char* value) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(value);
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_player_name(const char* value, size_t size) {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  player_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::mutable_player_name() {
  set_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    player_name_ = new ::std::string;
  }
  return player_name_;
}
inline ::std::string* CGameInfo_CDotaGameInfo_CPlayerInfo::release_player_name() {
  clear_has_player_name();
  if (player_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = player_name_;
    player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bool is_fake_client = 3;
inline bool CGameInfo_CDotaGameInfo_CPlayerInfo::has_is_fake_client() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_has_is_fake_client() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_has_is_fake_client() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::clear_is_fake_client() {
  is_fake_client_ = false;
  clear_has_is_fake_client();
}
inline bool CGameInfo_CDotaGameInfo_CPlayerInfo::is_fake_client() const {
  return is_fake_client_;
}
inline void CGameInfo_CDotaGameInfo_CPlayerInfo::set_is_fake_client(bool value) {
  set_has_is_fake_client();
  is_fake_client_ = value;
}

// -------------------------------------------------------------------

// CGameInfo_CDotaGameInfo

// optional uint32 match_id = 1;
inline bool CGameInfo_CDotaGameInfo::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameInfo_CDotaGameInfo::set_has_match_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameInfo_CDotaGameInfo::clear_has_match_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameInfo_CDotaGameInfo::clear_match_id() {
  match_id_ = 0u;
  clear_has_match_id();
}
inline ::google::protobuf::uint32 CGameInfo_CDotaGameInfo::match_id() const {
  return match_id_;
}
inline void CGameInfo_CDotaGameInfo::set_match_id(::google::protobuf::uint32 value) {
  set_has_match_id();
  match_id_ = value;
}

// optional int32 game_mode = 2;
inline bool CGameInfo_CDotaGameInfo::has_game_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CGameInfo_CDotaGameInfo::set_has_game_mode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CGameInfo_CDotaGameInfo::clear_has_game_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CGameInfo_CDotaGameInfo::clear_game_mode() {
  game_mode_ = 0;
  clear_has_game_mode();
}
inline ::google::protobuf::int32 CGameInfo_CDotaGameInfo::game_mode() const {
  return game_mode_;
}
inline void CGameInfo_CDotaGameInfo::set_game_mode(::google::protobuf::int32 value) {
  set_has_game_mode();
  game_mode_ = value;
}

// optional int32 game_winner = 3;
inline bool CGameInfo_CDotaGameInfo::has_game_winner() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CGameInfo_CDotaGameInfo::set_has_game_winner() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CGameInfo_CDotaGameInfo::clear_has_game_winner() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CGameInfo_CDotaGameInfo::clear_game_winner() {
  game_winner_ = 0;
  clear_has_game_winner();
}
inline ::google::protobuf::int32 CGameInfo_CDotaGameInfo::game_winner() const {
  return game_winner_;
}
inline void CGameInfo_CDotaGameInfo::set_game_winner(::google::protobuf::int32 value) {
  set_has_game_winner();
  game_winner_ = value;
}

// repeated .CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
inline int CGameInfo_CDotaGameInfo::player_info_size() const {
  return player_info_.size();
}
inline void CGameInfo_CDotaGameInfo::clear_player_info() {
  player_info_.Clear();
}
inline const ::CGameInfo_CDotaGameInfo_CPlayerInfo& CGameInfo_CDotaGameInfo::player_info(int index) const {
  return player_info_.Get(index);
}
inline ::CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo::mutable_player_info(int index) {
  return player_info_.Mutable(index);
}
inline ::CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo::add_player_info() {
  return player_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CGameInfo_CDotaGameInfo_CPlayerInfo >&
CGameInfo_CDotaGameInfo::player_info() const {
  return player_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::CGameInfo_CDotaGameInfo_CPlayerInfo >*
CGameInfo_CDotaGameInfo::mutable_player_info() {
  return &player_info_;
}

// -------------------------------------------------------------------

// CGameInfo

// optional .CGameInfo.CDotaGameInfo dota = 4;
inline bool CGameInfo::has_dota() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CGameInfo::set_has_dota() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CGameInfo::clear_has_dota() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CGameInfo::clear_dota() {
  if (dota_ != NULL) dota_->::CGameInfo_CDotaGameInfo::Clear();
  clear_has_dota();
}
inline const ::CGameInfo_CDotaGameInfo& CGameInfo::dota() const {
  return dota_ != NULL ? *dota_ : *default_instance_->dota_;
}
inline ::CGameInfo_CDotaGameInfo* CGameInfo::mutable_dota() {
  set_has_dota();
  if (dota_ == NULL) dota_ = new ::CGameInfo_CDotaGameInfo;
  return dota_;
}
inline ::CGameInfo_CDotaGameInfo* CGameInfo::release_dota() {
  clear_has_dota();
  ::CGameInfo_CDotaGameInfo* temp = dota_;
  dota_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDemoFileInfo

// optional float playback_time = 1;
inline bool CDemoFileInfo::has_playback_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoFileInfo::set_has_playback_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDemoFileInfo::clear_has_playback_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDemoFileInfo::clear_playback_time() {
  playback_time_ = 0;
  clear_has_playback_time();
}
inline float CDemoFileInfo::playback_time() const {
  return playback_time_;
}
inline void CDemoFileInfo::set_playback_time(float value) {
  set_has_playback_time();
  playback_time_ = value;
}

// optional int32 playback_ticks = 2;
inline bool CDemoFileInfo::has_playback_ticks() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoFileInfo::set_has_playback_ticks() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDemoFileInfo::clear_has_playback_ticks() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDemoFileInfo::clear_playback_ticks() {
  playback_ticks_ = 0;
  clear_has_playback_ticks();
}
inline ::google::protobuf::int32 CDemoFileInfo::playback_ticks() const {
  return playback_ticks_;
}
inline void CDemoFileInfo::set_playback_ticks(::google::protobuf::int32 value) {
  set_has_playback_ticks();
  playback_ticks_ = value;
}

// optional int32 playback_frames = 3;
inline bool CDemoFileInfo::has_playback_frames() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDemoFileInfo::set_has_playback_frames() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDemoFileInfo::clear_has_playback_frames() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDemoFileInfo::clear_playback_frames() {
  playback_frames_ = 0;
  clear_has_playback_frames();
}
inline ::google::protobuf::int32 CDemoFileInfo::playback_frames() const {
  return playback_frames_;
}
inline void CDemoFileInfo::set_playback_frames(::google::protobuf::int32 value) {
  set_has_playback_frames();
  playback_frames_ = value;
}

// optional .CGameInfo game_info = 4;
inline bool CDemoFileInfo::has_game_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDemoFileInfo::set_has_game_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDemoFileInfo::clear_has_game_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDemoFileInfo::clear_game_info() {
  if (game_info_ != NULL) game_info_->::CGameInfo::Clear();
  clear_has_game_info();
}
inline const ::CGameInfo& CDemoFileInfo::game_info() const {
  return game_info_ != NULL ? *game_info_ : *default_instance_->game_info_;
}
inline ::CGameInfo* CDemoFileInfo::mutable_game_info() {
  set_has_game_info();
  if (game_info_ == NULL) game_info_ = new ::CGameInfo;
  return game_info_;
}
inline ::CGameInfo* CDemoFileInfo::release_game_info() {
  clear_has_game_info();
  ::CGameInfo* temp = game_info_;
  game_info_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDemoPacket

// optional int32 sequence_in = 1;
inline bool CDemoPacket::has_sequence_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoPacket::set_has_sequence_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDemoPacket::clear_has_sequence_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDemoPacket::clear_sequence_in() {
  sequence_in_ = 0;
  clear_has_sequence_in();
}
inline ::google::protobuf::int32 CDemoPacket::sequence_in() const {
  return sequence_in_;
}
inline void CDemoPacket::set_sequence_in(::google::protobuf::int32 value) {
  set_has_sequence_in();
  sequence_in_ = value;
}

// optional int32 sequence_out_ack = 2;
inline bool CDemoPacket::has_sequence_out_ack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoPacket::set_has_sequence_out_ack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDemoPacket::clear_has_sequence_out_ack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDemoPacket::clear_sequence_out_ack() {
  sequence_out_ack_ = 0;
  clear_has_sequence_out_ack();
}
inline ::google::protobuf::int32 CDemoPacket::sequence_out_ack() const {
  return sequence_out_ack_;
}
inline void CDemoPacket::set_sequence_out_ack(::google::protobuf::int32 value) {
  set_has_sequence_out_ack();
  sequence_out_ack_ = value;
}

// optional bytes data = 3;
inline bool CDemoPacket::has_data() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDemoPacket::set_has_data() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDemoPacket::clear_has_data() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDemoPacket::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CDemoPacket::data() const {
  return *data_;
}
inline void CDemoPacket::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CDemoPacket::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CDemoPacket::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoPacket::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* CDemoPacket::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDemoFullPacket

// optional .CDemoStringTables string_table = 1;
inline bool CDemoFullPacket::has_string_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoFullPacket::set_has_string_table() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDemoFullPacket::clear_has_string_table() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDemoFullPacket::clear_string_table() {
  if (string_table_ != NULL) string_table_->::CDemoStringTables::Clear();
  clear_has_string_table();
}
inline const ::CDemoStringTables& CDemoFullPacket::string_table() const {
  return string_table_ != NULL ? *string_table_ : *default_instance_->string_table_;
}
inline ::CDemoStringTables* CDemoFullPacket::mutable_string_table() {
  set_has_string_table();
  if (string_table_ == NULL) string_table_ = new ::CDemoStringTables;
  return string_table_;
}
inline ::CDemoStringTables* CDemoFullPacket::release_string_table() {
  clear_has_string_table();
  ::CDemoStringTables* temp = string_table_;
  string_table_ = NULL;
  return temp;
}

// optional .CDemoPacket packet = 2;
inline bool CDemoFullPacket::has_packet() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoFullPacket::set_has_packet() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDemoFullPacket::clear_has_packet() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDemoFullPacket::clear_packet() {
  if (packet_ != NULL) packet_->::CDemoPacket::Clear();
  clear_has_packet();
}
inline const ::CDemoPacket& CDemoFullPacket::packet() const {
  return packet_ != NULL ? *packet_ : *default_instance_->packet_;
}
inline ::CDemoPacket* CDemoFullPacket::mutable_packet() {
  set_has_packet();
  if (packet_ == NULL) packet_ = new ::CDemoPacket;
  return packet_;
}
inline ::CDemoPacket* CDemoFullPacket::release_packet() {
  clear_has_packet();
  ::CDemoPacket* temp = packet_;
  packet_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// CDemoSyncTick

// -------------------------------------------------------------------

// CDemoConsoleCmd

// optional string cmdstring = 1;
inline bool CDemoConsoleCmd::has_cmdstring() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoConsoleCmd::set_has_cmdstring() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDemoConsoleCmd::clear_has_cmdstring() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDemoConsoleCmd::clear_cmdstring() {
  if (cmdstring_ != &::google::protobuf::internal::kEmptyString) {
    cmdstring_->clear();
  }
  clear_has_cmdstring();
}
inline const ::std::string& CDemoConsoleCmd::cmdstring() const {
  return *cmdstring_;
}
inline void CDemoConsoleCmd::set_cmdstring(const ::std::string& value) {
  set_has_cmdstring();
  if (cmdstring_ == &::google::protobuf::internal::kEmptyString) {
    cmdstring_ = new ::std::string;
  }
  cmdstring_->assign(value);
}
inline void CDemoConsoleCmd::set_cmdstring(const char* value) {
  set_has_cmdstring();
  if (cmdstring_ == &::google::protobuf::internal::kEmptyString) {
    cmdstring_ = new ::std::string;
  }
  cmdstring_->assign(value);
}
inline void CDemoConsoleCmd::set_cmdstring(const char* value, size_t size) {
  set_has_cmdstring();
  if (cmdstring_ == &::google::protobuf::internal::kEmptyString) {
    cmdstring_ = new ::std::string;
  }
  cmdstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoConsoleCmd::mutable_cmdstring() {
  set_has_cmdstring();
  if (cmdstring_ == &::google::protobuf::internal::kEmptyString) {
    cmdstring_ = new ::std::string;
  }
  return cmdstring_;
}
inline ::std::string* CDemoConsoleCmd::release_cmdstring() {
  clear_has_cmdstring();
  if (cmdstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmdstring_;
    cmdstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDemoSendTables

// optional bytes data = 1;
inline bool CDemoSendTables::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoSendTables::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDemoSendTables::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDemoSendTables::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CDemoSendTables::data() const {
  return *data_;
}
inline void CDemoSendTables::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CDemoSendTables::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CDemoSendTables::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoSendTables::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* CDemoSendTables::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDemoClassInfo_class_t

// optional int32 class_id = 1;
inline bool CDemoClassInfo_class_t::has_class_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoClassInfo_class_t::set_has_class_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDemoClassInfo_class_t::clear_has_class_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDemoClassInfo_class_t::clear_class_id() {
  class_id_ = 0;
  clear_has_class_id();
}
inline ::google::protobuf::int32 CDemoClassInfo_class_t::class_id() const {
  return class_id_;
}
inline void CDemoClassInfo_class_t::set_class_id(::google::protobuf::int32 value) {
  set_has_class_id();
  class_id_ = value;
}

// optional string network_name = 2;
inline bool CDemoClassInfo_class_t::has_network_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoClassInfo_class_t::set_has_network_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDemoClassInfo_class_t::clear_has_network_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDemoClassInfo_class_t::clear_network_name() {
  if (network_name_ != &::google::protobuf::internal::kEmptyString) {
    network_name_->clear();
  }
  clear_has_network_name();
}
inline const ::std::string& CDemoClassInfo_class_t::network_name() const {
  return *network_name_;
}
inline void CDemoClassInfo_class_t::set_network_name(const ::std::string& value) {
  set_has_network_name();
  if (network_name_ == &::google::protobuf::internal::kEmptyString) {
    network_name_ = new ::std::string;
  }
  network_name_->assign(value);
}
inline void CDemoClassInfo_class_t::set_network_name(const char* value) {
  set_has_network_name();
  if (network_name_ == &::google::protobuf::internal::kEmptyString) {
    network_name_ = new ::std::string;
  }
  network_name_->assign(value);
}
inline void CDemoClassInfo_class_t::set_network_name(const char* value, size_t size) {
  set_has_network_name();
  if (network_name_ == &::google::protobuf::internal::kEmptyString) {
    network_name_ = new ::std::string;
  }
  network_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoClassInfo_class_t::mutable_network_name() {
  set_has_network_name();
  if (network_name_ == &::google::protobuf::internal::kEmptyString) {
    network_name_ = new ::std::string;
  }
  return network_name_;
}
inline ::std::string* CDemoClassInfo_class_t::release_network_name() {
  clear_has_network_name();
  if (network_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = network_name_;
    network_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string table_name = 3;
inline bool CDemoClassInfo_class_t::has_table_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDemoClassInfo_class_t::set_has_table_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CDemoClassInfo_class_t::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CDemoClassInfo_class_t::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CDemoClassInfo_class_t::table_name() const {
  return *table_name_;
}
inline void CDemoClassInfo_class_t::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CDemoClassInfo_class_t::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CDemoClassInfo_class_t::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoClassInfo_class_t::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CDemoClassInfo_class_t::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDemoClassInfo

// repeated .CDemoClassInfo.class_t classes = 1;
inline int CDemoClassInfo::classes_size() const {
  return classes_.size();
}
inline void CDemoClassInfo::clear_classes() {
  classes_.Clear();
}
inline const ::CDemoClassInfo_class_t& CDemoClassInfo::classes(int index) const {
  return classes_.Get(index);
}
inline ::CDemoClassInfo_class_t* CDemoClassInfo::mutable_classes(int index) {
  return classes_.Mutable(index);
}
inline ::CDemoClassInfo_class_t* CDemoClassInfo::add_classes() {
  return classes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDemoClassInfo_class_t >&
CDemoClassInfo::classes() const {
  return classes_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDemoClassInfo_class_t >*
CDemoClassInfo::mutable_classes() {
  return &classes_;
}

// -------------------------------------------------------------------

// CDemoCustomData

// optional int32 callback_index = 1;
inline bool CDemoCustomData::has_callback_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoCustomData::set_has_callback_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDemoCustomData::clear_has_callback_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDemoCustomData::clear_callback_index() {
  callback_index_ = 0;
  clear_has_callback_index();
}
inline ::google::protobuf::int32 CDemoCustomData::callback_index() const {
  return callback_index_;
}
inline void CDemoCustomData::set_callback_index(::google::protobuf::int32 value) {
  set_has_callback_index();
  callback_index_ = value;
}

// optional bytes data = 2;
inline bool CDemoCustomData::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoCustomData::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDemoCustomData::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDemoCustomData::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CDemoCustomData::data() const {
  return *data_;
}
inline void CDemoCustomData::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CDemoCustomData::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CDemoCustomData::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoCustomData::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* CDemoCustomData::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDemoCustomDataCallbacks

// repeated string save_id = 1;
inline int CDemoCustomDataCallbacks::save_id_size() const {
  return save_id_.size();
}
inline void CDemoCustomDataCallbacks::clear_save_id() {
  save_id_.Clear();
}
inline const ::std::string& CDemoCustomDataCallbacks::save_id(int index) const {
  return save_id_.Get(index);
}
inline ::std::string* CDemoCustomDataCallbacks::mutable_save_id(int index) {
  return save_id_.Mutable(index);
}
inline void CDemoCustomDataCallbacks::set_save_id(int index, const ::std::string& value) {
  save_id_.Mutable(index)->assign(value);
}
inline void CDemoCustomDataCallbacks::set_save_id(int index, const char* value) {
  save_id_.Mutable(index)->assign(value);
}
inline void CDemoCustomDataCallbacks::set_save_id(int index, const char* value, size_t size) {
  save_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoCustomDataCallbacks::add_save_id() {
  return save_id_.Add();
}
inline void CDemoCustomDataCallbacks::add_save_id(const ::std::string& value) {
  save_id_.Add()->assign(value);
}
inline void CDemoCustomDataCallbacks::add_save_id(const char* value) {
  save_id_.Add()->assign(value);
}
inline void CDemoCustomDataCallbacks::add_save_id(const char* value, size_t size) {
  save_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CDemoCustomDataCallbacks::save_id() const {
  return save_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CDemoCustomDataCallbacks::mutable_save_id() {
  return &save_id_;
}

// -------------------------------------------------------------------

// CDemoStringTables_items_t

// optional string str = 1;
inline bool CDemoStringTables_items_t::has_str() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoStringTables_items_t::set_has_str() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDemoStringTables_items_t::clear_has_str() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDemoStringTables_items_t::clear_str() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    str_->clear();
  }
  clear_has_str();
}
inline const ::std::string& CDemoStringTables_items_t::str() const {
  return *str_;
}
inline void CDemoStringTables_items_t::set_str(const ::std::string& value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void CDemoStringTables_items_t::set_str(const char* value) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(value);
}
inline void CDemoStringTables_items_t::set_str(const char* value, size_t size) {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoStringTables_items_t::mutable_str() {
  set_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    str_ = new ::std::string;
  }
  return str_;
}
inline ::std::string* CDemoStringTables_items_t::release_str() {
  clear_has_str();
  if (str_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = str_;
    str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes data = 2;
inline bool CDemoStringTables_items_t::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoStringTables_items_t::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDemoStringTables_items_t::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDemoStringTables_items_t::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CDemoStringTables_items_t::data() const {
  return *data_;
}
inline void CDemoStringTables_items_t::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CDemoStringTables_items_t::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CDemoStringTables_items_t::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoStringTables_items_t::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* CDemoStringTables_items_t::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// CDemoStringTables_table_t

// optional string table_name = 1;
inline bool CDemoStringTables_table_t::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoStringTables_table_t::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDemoStringTables_table_t::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDemoStringTables_table_t::clear_table_name() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    table_name_->clear();
  }
  clear_has_table_name();
}
inline const ::std::string& CDemoStringTables_table_t::table_name() const {
  return *table_name_;
}
inline void CDemoStringTables_table_t::set_table_name(const ::std::string& value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CDemoStringTables_table_t::set_table_name(const char* value) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(value);
}
inline void CDemoStringTables_table_t::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  table_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoStringTables_table_t::mutable_table_name() {
  set_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    table_name_ = new ::std::string;
  }
  return table_name_;
}
inline ::std::string* CDemoStringTables_table_t::release_table_name() {
  clear_has_table_name();
  if (table_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = table_name_;
    table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .CDemoStringTables.items_t items = 2;
inline int CDemoStringTables_table_t::items_size() const {
  return items_.size();
}
inline void CDemoStringTables_table_t::clear_items() {
  items_.Clear();
}
inline const ::CDemoStringTables_items_t& CDemoStringTables_table_t::items(int index) const {
  return items_.Get(index);
}
inline ::CDemoStringTables_items_t* CDemoStringTables_table_t::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::CDemoStringTables_items_t* CDemoStringTables_table_t::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t >&
CDemoStringTables_table_t::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t >*
CDemoStringTables_table_t::mutable_items() {
  return &items_;
}

// repeated .CDemoStringTables.items_t items_clientside = 3;
inline int CDemoStringTables_table_t::items_clientside_size() const {
  return items_clientside_.size();
}
inline void CDemoStringTables_table_t::clear_items_clientside() {
  items_clientside_.Clear();
}
inline const ::CDemoStringTables_items_t& CDemoStringTables_table_t::items_clientside(int index) const {
  return items_clientside_.Get(index);
}
inline ::CDemoStringTables_items_t* CDemoStringTables_table_t::mutable_items_clientside(int index) {
  return items_clientside_.Mutable(index);
}
inline ::CDemoStringTables_items_t* CDemoStringTables_table_t::add_items_clientside() {
  return items_clientside_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t >&
CDemoStringTables_table_t::items_clientside() const {
  return items_clientside_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_items_t >*
CDemoStringTables_table_t::mutable_items_clientside() {
  return &items_clientside_;
}

// optional int32 table_flags = 4;
inline bool CDemoStringTables_table_t::has_table_flags() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDemoStringTables_table_t::set_has_table_flags() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CDemoStringTables_table_t::clear_has_table_flags() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CDemoStringTables_table_t::clear_table_flags() {
  table_flags_ = 0;
  clear_has_table_flags();
}
inline ::google::protobuf::int32 CDemoStringTables_table_t::table_flags() const {
  return table_flags_;
}
inline void CDemoStringTables_table_t::set_table_flags(::google::protobuf::int32 value) {
  set_has_table_flags();
  table_flags_ = value;
}

// -------------------------------------------------------------------

// CDemoStringTables

// repeated .CDemoStringTables.table_t tables = 1;
inline int CDemoStringTables::tables_size() const {
  return tables_.size();
}
inline void CDemoStringTables::clear_tables() {
  tables_.Clear();
}
inline const ::CDemoStringTables_table_t& CDemoStringTables::tables(int index) const {
  return tables_.Get(index);
}
inline ::CDemoStringTables_table_t* CDemoStringTables::mutable_tables(int index) {
  return tables_.Mutable(index);
}
inline ::CDemoStringTables_table_t* CDemoStringTables::add_tables() {
  return tables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_table_t >&
CDemoStringTables::tables() const {
  return tables_;
}
inline ::google::protobuf::RepeatedPtrField< ::CDemoStringTables_table_t >*
CDemoStringTables::mutable_tables() {
  return &tables_;
}

// -------------------------------------------------------------------

// CDemoStop

// -------------------------------------------------------------------

// CDemoUserCmd

// optional int32 cmd_number = 1;
inline bool CDemoUserCmd::has_cmd_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDemoUserCmd::set_has_cmd_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CDemoUserCmd::clear_has_cmd_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CDemoUserCmd::clear_cmd_number() {
  cmd_number_ = 0;
  clear_has_cmd_number();
}
inline ::google::protobuf::int32 CDemoUserCmd::cmd_number() const {
  return cmd_number_;
}
inline void CDemoUserCmd::set_cmd_number(::google::protobuf::int32 value) {
  set_has_cmd_number();
  cmd_number_ = value;
}

// optional bytes data = 2;
inline bool CDemoUserCmd::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDemoUserCmd::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CDemoUserCmd::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CDemoUserCmd::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& CDemoUserCmd::data() const {
  return *data_;
}
inline void CDemoUserCmd::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CDemoUserCmd::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void CDemoUserCmd::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CDemoUserCmd::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* CDemoUserCmd::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< EDemoCommands>() {
  return EDemoCommands_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_demo_2eproto__INCLUDED
