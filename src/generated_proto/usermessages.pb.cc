// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CUserMsg_AchievementEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_AchievementEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_CloseCaption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_CloseCaption_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_CurrentTimescale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_CurrentTimescale_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_DesiredTimescale_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_DesiredTimescale_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_Fade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_Fade_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_Shake_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_Shake_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ShakeDir_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ShakeDir_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_Tilt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_Tilt_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_SayText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_SayText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_SayText2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_SayText2_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_HudMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_HudMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_HudText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_HudText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_TextMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_TextMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_GameTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_GameTitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_ResetHUD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_ResetHUD_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_SendAudio_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_SendAudio_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_VoiceMask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_VoiceMask_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_RequestState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_RequestState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_HintText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_HintText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_KeyHintText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_KeyHintText_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_StatsCrawlMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_StatsCrawlMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_StatsSkipState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_StatsSkipState_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_VoiceSubtitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_VoiceSubtitle_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_VGUIMenu_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_VGUIMenu_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_VGUIMenu_Keys_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_VGUIMenu_Keys_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_Geiger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_Geiger_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_Rumble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_Rumble_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_Train_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_Train_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_SayTextChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_SayTextChannel_reflection_ = NULL;
const ::google::protobuf::Descriptor* CUserMsg_MessageText_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CUserMsg_MessageText_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EBaseUserMessages_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_usermessages_2eproto() {
  protobuf_AddDesc_usermessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "usermessages.proto");
  GOOGLE_CHECK(file != NULL);
  CUserMsg_AchievementEvent_descriptor_ = file->message_type(0);
  static const int CUserMsg_AchievementEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_AchievementEvent, achievement_),
  };
  CUserMsg_AchievementEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_AchievementEvent_descriptor_,
      CUserMsg_AchievementEvent::default_instance_,
      CUserMsg_AchievementEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_AchievementEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_AchievementEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_AchievementEvent));
  CUserMsg_CloseCaption_descriptor_ = file->message_type(1);
  static const int CUserMsg_CloseCaption_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CloseCaption, hash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CloseCaption, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CloseCaption, from_player_),
  };
  CUserMsg_CloseCaption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_CloseCaption_descriptor_,
      CUserMsg_CloseCaption::default_instance_,
      CUserMsg_CloseCaption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CloseCaption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CloseCaption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_CloseCaption));
  CUserMsg_CurrentTimescale_descriptor_ = file->message_type(2);
  static const int CUserMsg_CurrentTimescale_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CurrentTimescale, current_),
  };
  CUserMsg_CurrentTimescale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_CurrentTimescale_descriptor_,
      CUserMsg_CurrentTimescale::default_instance_,
      CUserMsg_CurrentTimescale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CurrentTimescale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_CurrentTimescale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_CurrentTimescale));
  CUserMsg_DesiredTimescale_descriptor_ = file->message_type(3);
  static const int CUserMsg_DesiredTimescale_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_DesiredTimescale, desired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_DesiredTimescale, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_DesiredTimescale, interpolator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_DesiredTimescale, start_blend_time_),
  };
  CUserMsg_DesiredTimescale_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_DesiredTimescale_descriptor_,
      CUserMsg_DesiredTimescale::default_instance_,
      CUserMsg_DesiredTimescale_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_DesiredTimescale, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_DesiredTimescale, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_DesiredTimescale));
  CUserMsg_Fade_descriptor_ = file->message_type(4);
  static const int CUserMsg_Fade_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Fade, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Fade, hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Fade, flags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Fade, color_),
  };
  CUserMsg_Fade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_Fade_descriptor_,
      CUserMsg_Fade::default_instance_,
      CUserMsg_Fade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Fade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Fade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_Fade));
  CUserMsg_Shake_descriptor_ = file->message_type(5);
  static const int CUserMsg_Shake_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Shake, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Shake, amplitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Shake, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Shake, duration_),
  };
  CUserMsg_Shake_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_Shake_descriptor_,
      CUserMsg_Shake::default_instance_,
      CUserMsg_Shake_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Shake, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Shake, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_Shake));
  CUserMsg_ShakeDir_descriptor_ = file->message_type(6);
  static const int CUserMsg_ShakeDir_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ShakeDir, shake_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ShakeDir, direction_),
  };
  CUserMsg_ShakeDir_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ShakeDir_descriptor_,
      CUserMsg_ShakeDir::default_instance_,
      CUserMsg_ShakeDir_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ShakeDir, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ShakeDir, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ShakeDir));
  CUserMsg_Tilt_descriptor_ = file->message_type(7);
  static const int CUserMsg_Tilt_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Tilt, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Tilt, ease_in_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Tilt, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Tilt, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Tilt, time_),
  };
  CUserMsg_Tilt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_Tilt_descriptor_,
      CUserMsg_Tilt::default_instance_,
      CUserMsg_Tilt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Tilt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Tilt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_Tilt));
  CUserMsg_SayText_descriptor_ = file->message_type(8);
  static const int CUserMsg_SayText_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText, chat_),
  };
  CUserMsg_SayText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_SayText_descriptor_,
      CUserMsg_SayText::default_instance_,
      CUserMsg_SayText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_SayText));
  CUserMsg_SayText2_descriptor_ = file->message_type(9);
  static const int CUserMsg_SayText2_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText2, client_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText2, chat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText2, format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText2, prefix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText2, text_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText2, location_),
  };
  CUserMsg_SayText2_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_SayText2_descriptor_,
      CUserMsg_SayText2::default_instance_,
      CUserMsg_SayText2_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText2, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayText2, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_SayText2));
  CUserMsg_HudMsg_descriptor_ = file->message_type(10);
  static const int CUserMsg_HudMsg_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, color1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, color2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, effect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, fade_in_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, fade_out_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, hold_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, fx_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, message_),
  };
  CUserMsg_HudMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_HudMsg_descriptor_,
      CUserMsg_HudMsg::default_instance_,
      CUserMsg_HudMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_HudMsg));
  CUserMsg_HudText_descriptor_ = file->message_type(11);
  static const int CUserMsg_HudText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudText, message_),
  };
  CUserMsg_HudText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_HudText_descriptor_,
      CUserMsg_HudText::default_instance_,
      CUserMsg_HudText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HudText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_HudText));
  CUserMsg_TextMsg_descriptor_ = file->message_type(12);
  static const int CUserMsg_TextMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_TextMsg, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_TextMsg, param_),
  };
  CUserMsg_TextMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_TextMsg_descriptor_,
      CUserMsg_TextMsg::default_instance_,
      CUserMsg_TextMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_TextMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_TextMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_TextMsg));
  CUserMsg_GameTitle_descriptor_ = file->message_type(13);
  static const int CUserMsg_GameTitle_offsets_[1] = {
  };
  CUserMsg_GameTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_GameTitle_descriptor_,
      CUserMsg_GameTitle::default_instance_,
      CUserMsg_GameTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_GameTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_GameTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_GameTitle));
  CUserMsg_ResetHUD_descriptor_ = file->message_type(14);
  static const int CUserMsg_ResetHUD_offsets_[1] = {
  };
  CUserMsg_ResetHUD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_ResetHUD_descriptor_,
      CUserMsg_ResetHUD::default_instance_,
      CUserMsg_ResetHUD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ResetHUD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_ResetHUD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_ResetHUD));
  CUserMsg_SendAudio_descriptor_ = file->message_type(15);
  static const int CUserMsg_SendAudio_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SendAudio, stop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SendAudio, name_),
  };
  CUserMsg_SendAudio_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_SendAudio_descriptor_,
      CUserMsg_SendAudio::default_instance_,
      CUserMsg_SendAudio_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SendAudio, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SendAudio, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_SendAudio));
  CUserMsg_VoiceMask_descriptor_ = file->message_type(16);
  static const int CUserMsg_VoiceMask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VoiceMask, audible_players_mask_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VoiceMask, player_mod_enabled_),
  };
  CUserMsg_VoiceMask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_VoiceMask_descriptor_,
      CUserMsg_VoiceMask::default_instance_,
      CUserMsg_VoiceMask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VoiceMask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VoiceMask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_VoiceMask));
  CUserMsg_RequestState_descriptor_ = file->message_type(17);
  static const int CUserMsg_RequestState_offsets_[1] = {
  };
  CUserMsg_RequestState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_RequestState_descriptor_,
      CUserMsg_RequestState::default_instance_,
      CUserMsg_RequestState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_RequestState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_RequestState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_RequestState));
  CUserMsg_HintText_descriptor_ = file->message_type(18);
  static const int CUserMsg_HintText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HintText, message_),
  };
  CUserMsg_HintText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_HintText_descriptor_,
      CUserMsg_HintText::default_instance_,
      CUserMsg_HintText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HintText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_HintText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_HintText));
  CUserMsg_KeyHintText_descriptor_ = file->message_type(19);
  static const int CUserMsg_KeyHintText_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_KeyHintText, messages_),
  };
  CUserMsg_KeyHintText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_KeyHintText_descriptor_,
      CUserMsg_KeyHintText::default_instance_,
      CUserMsg_KeyHintText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_KeyHintText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_KeyHintText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_KeyHintText));
  CUserMsg_StatsCrawlMsg_descriptor_ = file->message_type(20);
  static const int CUserMsg_StatsCrawlMsg_offsets_[1] = {
  };
  CUserMsg_StatsCrawlMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_StatsCrawlMsg_descriptor_,
      CUserMsg_StatsCrawlMsg::default_instance_,
      CUserMsg_StatsCrawlMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_StatsCrawlMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_StatsCrawlMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_StatsCrawlMsg));
  CUserMsg_StatsSkipState_descriptor_ = file->message_type(21);
  static const int CUserMsg_StatsSkipState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_StatsSkipState, num_skips_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_StatsSkipState, num_players_),
  };
  CUserMsg_StatsSkipState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_StatsSkipState_descriptor_,
      CUserMsg_StatsSkipState::default_instance_,
      CUserMsg_StatsSkipState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_StatsSkipState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_StatsSkipState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_StatsSkipState));
  CUserMsg_VoiceSubtitle_descriptor_ = file->message_type(22);
  static const int CUserMsg_VoiceSubtitle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VoiceSubtitle, ent_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VoiceSubtitle, menu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VoiceSubtitle, item_),
  };
  CUserMsg_VoiceSubtitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_VoiceSubtitle_descriptor_,
      CUserMsg_VoiceSubtitle::default_instance_,
      CUserMsg_VoiceSubtitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VoiceSubtitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VoiceSubtitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_VoiceSubtitle));
  CUserMsg_VGUIMenu_descriptor_ = file->message_type(23);
  static const int CUserMsg_VGUIMenu_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VGUIMenu, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VGUIMenu, show_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VGUIMenu, keys_),
  };
  CUserMsg_VGUIMenu_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_VGUIMenu_descriptor_,
      CUserMsg_VGUIMenu::default_instance_,
      CUserMsg_VGUIMenu_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VGUIMenu, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VGUIMenu, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_VGUIMenu));
  CUserMsg_VGUIMenu_Keys_descriptor_ = CUserMsg_VGUIMenu_descriptor_->nested_type(0);
  static const int CUserMsg_VGUIMenu_Keys_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VGUIMenu_Keys, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VGUIMenu_Keys, value_),
  };
  CUserMsg_VGUIMenu_Keys_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_VGUIMenu_Keys_descriptor_,
      CUserMsg_VGUIMenu_Keys::default_instance_,
      CUserMsg_VGUIMenu_Keys_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VGUIMenu_Keys, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_VGUIMenu_Keys, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_VGUIMenu_Keys));
  CUserMsg_Geiger_descriptor_ = file->message_type(24);
  static const int CUserMsg_Geiger_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Geiger, range_),
  };
  CUserMsg_Geiger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_Geiger_descriptor_,
      CUserMsg_Geiger::default_instance_,
      CUserMsg_Geiger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Geiger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Geiger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_Geiger));
  CUserMsg_Rumble_descriptor_ = file->message_type(25);
  static const int CUserMsg_Rumble_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Rumble, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Rumble, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Rumble, flags_),
  };
  CUserMsg_Rumble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_Rumble_descriptor_,
      CUserMsg_Rumble::default_instance_,
      CUserMsg_Rumble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Rumble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Rumble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_Rumble));
  CUserMsg_Train_descriptor_ = file->message_type(26);
  static const int CUserMsg_Train_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Train, train_),
  };
  CUserMsg_Train_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_Train_descriptor_,
      CUserMsg_Train::default_instance_,
      CUserMsg_Train_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Train, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_Train, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_Train));
  CUserMsg_SayTextChannel_descriptor_ = file->message_type(27);
  static const int CUserMsg_SayTextChannel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayTextChannel, player_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayTextChannel, channel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayTextChannel, text_),
  };
  CUserMsg_SayTextChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_SayTextChannel_descriptor_,
      CUserMsg_SayTextChannel::default_instance_,
      CUserMsg_SayTextChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayTextChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_SayTextChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_SayTextChannel));
  CUserMsg_MessageText_descriptor_ = file->message_type(28);
  static const int CUserMsg_MessageText_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_MessageText, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_MessageText, text_),
  };
  CUserMsg_MessageText_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CUserMsg_MessageText_descriptor_,
      CUserMsg_MessageText::default_instance_,
      CUserMsg_MessageText_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_MessageText, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CUserMsg_MessageText, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CUserMsg_MessageText));
  EBaseUserMessages_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_usermessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_AchievementEvent_descriptor_, &CUserMsg_AchievementEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_CloseCaption_descriptor_, &CUserMsg_CloseCaption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_CurrentTimescale_descriptor_, &CUserMsg_CurrentTimescale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_DesiredTimescale_descriptor_, &CUserMsg_DesiredTimescale::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_Fade_descriptor_, &CUserMsg_Fade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_Shake_descriptor_, &CUserMsg_Shake::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ShakeDir_descriptor_, &CUserMsg_ShakeDir::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_Tilt_descriptor_, &CUserMsg_Tilt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_SayText_descriptor_, &CUserMsg_SayText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_SayText2_descriptor_, &CUserMsg_SayText2::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_HudMsg_descriptor_, &CUserMsg_HudMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_HudText_descriptor_, &CUserMsg_HudText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_TextMsg_descriptor_, &CUserMsg_TextMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_GameTitle_descriptor_, &CUserMsg_GameTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_ResetHUD_descriptor_, &CUserMsg_ResetHUD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_SendAudio_descriptor_, &CUserMsg_SendAudio::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_VoiceMask_descriptor_, &CUserMsg_VoiceMask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_RequestState_descriptor_, &CUserMsg_RequestState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_HintText_descriptor_, &CUserMsg_HintText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_KeyHintText_descriptor_, &CUserMsg_KeyHintText::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_StatsCrawlMsg_descriptor_, &CUserMsg_StatsCrawlMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_StatsSkipState_descriptor_, &CUserMsg_StatsSkipState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_VoiceSubtitle_descriptor_, &CUserMsg_VoiceSubtitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_VGUIMenu_descriptor_, &CUserMsg_VGUIMenu::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_VGUIMenu_Keys_descriptor_, &CUserMsg_VGUIMenu_Keys::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_Geiger_descriptor_, &CUserMsg_Geiger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_Rumble_descriptor_, &CUserMsg_Rumble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_Train_descriptor_, &CUserMsg_Train::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_SayTextChannel_descriptor_, &CUserMsg_SayTextChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CUserMsg_MessageText_descriptor_, &CUserMsg_MessageText::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_usermessages_2eproto() {
  delete CUserMsg_AchievementEvent::default_instance_;
  delete CUserMsg_AchievementEvent_reflection_;
  delete CUserMsg_CloseCaption::default_instance_;
  delete CUserMsg_CloseCaption_reflection_;
  delete CUserMsg_CurrentTimescale::default_instance_;
  delete CUserMsg_CurrentTimescale_reflection_;
  delete CUserMsg_DesiredTimescale::default_instance_;
  delete CUserMsg_DesiredTimescale_reflection_;
  delete CUserMsg_Fade::default_instance_;
  delete CUserMsg_Fade_reflection_;
  delete CUserMsg_Shake::default_instance_;
  delete CUserMsg_Shake_reflection_;
  delete CUserMsg_ShakeDir::default_instance_;
  delete CUserMsg_ShakeDir_reflection_;
  delete CUserMsg_Tilt::default_instance_;
  delete CUserMsg_Tilt_reflection_;
  delete CUserMsg_SayText::default_instance_;
  delete CUserMsg_SayText_reflection_;
  delete CUserMsg_SayText2::default_instance_;
  delete CUserMsg_SayText2_reflection_;
  delete CUserMsg_HudMsg::default_instance_;
  delete CUserMsg_HudMsg_reflection_;
  delete CUserMsg_HudText::default_instance_;
  delete CUserMsg_HudText_reflection_;
  delete CUserMsg_TextMsg::default_instance_;
  delete CUserMsg_TextMsg_reflection_;
  delete CUserMsg_GameTitle::default_instance_;
  delete CUserMsg_GameTitle_reflection_;
  delete CUserMsg_ResetHUD::default_instance_;
  delete CUserMsg_ResetHUD_reflection_;
  delete CUserMsg_SendAudio::default_instance_;
  delete CUserMsg_SendAudio_reflection_;
  delete CUserMsg_VoiceMask::default_instance_;
  delete CUserMsg_VoiceMask_reflection_;
  delete CUserMsg_RequestState::default_instance_;
  delete CUserMsg_RequestState_reflection_;
  delete CUserMsg_HintText::default_instance_;
  delete CUserMsg_HintText_reflection_;
  delete CUserMsg_KeyHintText::default_instance_;
  delete CUserMsg_KeyHintText_reflection_;
  delete CUserMsg_StatsCrawlMsg::default_instance_;
  delete CUserMsg_StatsCrawlMsg_reflection_;
  delete CUserMsg_StatsSkipState::default_instance_;
  delete CUserMsg_StatsSkipState_reflection_;
  delete CUserMsg_VoiceSubtitle::default_instance_;
  delete CUserMsg_VoiceSubtitle_reflection_;
  delete CUserMsg_VGUIMenu::default_instance_;
  delete CUserMsg_VGUIMenu_reflection_;
  delete CUserMsg_VGUIMenu_Keys::default_instance_;
  delete CUserMsg_VGUIMenu_Keys_reflection_;
  delete CUserMsg_Geiger::default_instance_;
  delete CUserMsg_Geiger_reflection_;
  delete CUserMsg_Rumble::default_instance_;
  delete CUserMsg_Rumble_reflection_;
  delete CUserMsg_Train::default_instance_;
  delete CUserMsg_Train_reflection_;
  delete CUserMsg_SayTextChannel::default_instance_;
  delete CUserMsg_SayTextChannel_reflection_;
  delete CUserMsg_MessageText::default_instance_;
  delete CUserMsg_MessageText_reflection_;
}

void protobuf_AddDesc_usermessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::protobuf_AddDesc_netmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022usermessages.proto\032 google/protobuf/de"
    "scriptor.proto\032\021netmessages.proto\"0\n\031CUs"
    "erMsg_AchievementEvent\022\023\n\013achievement\030\001 "
    "\001(\r\"L\n\025CUserMsg_CloseCaption\022\014\n\004hash\030\001 \001"
    "(\007\022\020\n\010duration\030\002 \001(\002\022\023\n\013from_player\030\003 \001("
    "\010\",\n\031CUserMsg_CurrentTimescale\022\017\n\007curren"
    "t\030\001 \001(\002\"n\n\031CUserMsg_DesiredTimescale\022\017\n\007"
    "desired\030\001 \001(\002\022\020\n\010duration\030\002 \001(\002\022\024\n\014inter"
    "polator\030\003 \001(\r\022\030\n\020start_blend_time\030\004 \001(\002\""
    "R\n\rCUserMsg_Fade\022\020\n\010duration\030\001 \001(\r\022\021\n\tho"
    "ld_time\030\002 \001(\r\022\r\n\005flags\030\003 \001(\r\022\r\n\005color\030\004 "
    "\001(\007\"Y\n\016CUserMsg_Shake\022\017\n\007command\030\001 \001(\r\022\021"
    "\n\tamplitude\030\002 \001(\002\022\021\n\tfrequency\030\003 \001(\002\022\020\n\010"
    "duration\030\004 \001(\002\"S\n\021CUserMsg_ShakeDir\022\036\n\005s"
    "hake\030\001 \001(\0132\017.CUserMsg_Shake\022\036\n\tdirection"
    "\030\002 \001(\0132\013.CMsgVector\"q\n\rCUserMsg_Tilt\022\017\n\007"
    "command\030\001 \001(\r\022\023\n\013ease_in_out\030\002 \001(\010\022\032\n\005an"
    "gle\030\003 \001(\0132\013.CMsgVector\022\020\n\010duration\030\004 \001(\002"
    "\022\014\n\004time\030\005 \001(\002\">\n\020CUserMsg_SayText\022\016\n\006cl"
    "ient\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\022\014\n\004chat\030\003 \001(\010\"q"
    "\n\021CUserMsg_SayText2\022\016\n\006client\030\001 \001(\r\022\014\n\004c"
    "hat\030\002 \001(\010\022\016\n\006format\030\003 \001(\t\022\016\n\006prefix\030\004 \001("
    "\t\022\014\n\004text\030\005 \001(\t\022\020\n\010location\030\006 \001(\t\"\312\001\n\017CU"
    "serMsg_HudMsg\022\017\n\007channel\030\001 \001(\r\022\t\n\001x\030\002 \001("
    "\002\022\t\n\001y\030\003 \001(\002\022\016\n\006color1\030\004 \001(\r\022\016\n\006color2\030\005"
    " \001(\r\022\016\n\006effect\030\006 \001(\r\022\024\n\014fade_in_time\030\007 \001"
    "(\002\022\025\n\rfade_out_time\030\010 \001(\002\022\021\n\thold_time\030\t"
    " \001(\002\022\017\n\007fx_time\030\n \001(\002\022\017\n\007message\030\013 \001(\t\"#"
    "\n\020CUserMsg_HudText\022\017\n\007message\030\001 \001(\t\"/\n\020C"
    "UserMsg_TextMsg\022\014\n\004dest\030\001 \001(\r\022\r\n\005param\030\002"
    " \003(\t\"\024\n\022CUserMsg_GameTitle\"\023\n\021CUserMsg_R"
    "esetHUD\"0\n\022CUserMsg_SendAudio\022\014\n\004stop\030\002 "
    "\001(\010\022\014\n\004name\030\003 \001(\t\"N\n\022CUserMsg_VoiceMask\022"
    "\034\n\024audible_players_mask\030\001 \003(\005\022\032\n\022player_"
    "mod_enabled\030\002 \001(\010\"\027\n\025CUserMsg_RequestSta"
    "te\"$\n\021CUserMsg_HintText\022\017\n\007message\030\001 \001(\t"
    "\"(\n\024CUserMsg_KeyHintText\022\020\n\010messages\030\001 \003"
    "(\t\"\030\n\026CUserMsg_StatsCrawlMsg\"A\n\027CUserMsg"
    "_StatsSkipState\022\021\n\tnum_skips\030\001 \001(\005\022\023\n\013nu"
    "m_players\030\002 \001(\005\"G\n\026CUserMsg_VoiceSubtitl"
    "e\022\021\n\tent_index\030\001 \001(\005\022\014\n\004menu\030\002 \001(\005\022\014\n\004it"
    "em\030\003 \001(\005\"{\n\021CUserMsg_VGUIMenu\022\014\n\004name\030\001 "
    "\001(\t\022\014\n\004show\030\002 \001(\010\022%\n\004keys\030\003 \003(\0132\027.CUserM"
    "sg_VGUIMenu.Keys\032#\n\004Keys\022\014\n\004name\030\001 \001(\t\022\r"
    "\n\005value\030\002 \001(\t\" \n\017CUserMsg_Geiger\022\r\n\005rang"
    "e\030\001 \001(\005\"=\n\017CUserMsg_Rumble\022\r\n\005index\030\001 \001("
    "\005\022\014\n\004data\030\002 \001(\005\022\r\n\005flags\030\003 \001(\005\"\037\n\016CUserM"
    "sg_Train\022\r\n\005train\030\001 \001(\005\"H\n\027CUserMsg_SayT"
    "extChannel\022\016\n\006player\030\001 \001(\005\022\017\n\007channel\030\002 "
    "\001(\005\022\014\n\004text\030\003 \001(\t\"3\n\024CUserMsg_MessageTex"
    "t\022\r\n\005color\030\001 \001(\r\022\014\n\004text\030\002 \001(\t*\324\004\n\021EBase"
    "UserMessages\022\027\n\023UM_AchievementEvent\020\001\022\023\n"
    "\017UM_CloseCaption\020\002\022\031\n\025UM_CloseCaptionDir"
    "ect\020\003\022\027\n\023UM_CurrentTimescale\020\004\022\027\n\023UM_Des"
    "iredTimescale\020\005\022\013\n\007UM_Fade\020\006\022\020\n\014UM_GameT"
    "itle\020\007\022\r\n\tUM_Geiger\020\010\022\017\n\013UM_HintText\020\t\022\r"
    "\n\tUM_HudMsg\020\n\022\016\n\nUM_HudText\020\013\022\022\n\016UM_KeyH"
    "intText\020\014\022\022\n\016UM_MessageText\020\r\022\023\n\017UM_Requ"
    "estState\020\016\022\017\n\013UM_ResetHUD\020\017\022\r\n\tUM_Rumble"
    "\020\020\022\016\n\nUM_SayText\020\021\022\017\n\013UM_SayText2\020\022\022\025\n\021U"
    "M_SayTextChannel\020\023\022\014\n\010UM_Shake\020\024\022\017\n\013UM_S"
    "hakeDir\020\025\022\024\n\020UM_StatsCrawlMsg\020\026\022\025\n\021UM_St"
    "atsSkipState\020\027\022\016\n\nUM_TextMsg\020\030\022\013\n\007UM_Til"
    "t\020\031\022\014\n\010UM_Train\020\032\022\017\n\013UM_VGUIMenu\020\033\022\020\n\014UM"
    "_VoiceMask\020\034\022\024\n\020UM_VoiceSubtitle\020\035\022\020\n\014UM"
    "_SendAudio\020\036\022\017\n\013UM_MAX_BASE\020\?B\005H\001\200\001\000", 2636);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "usermessages.proto", &protobuf_RegisterTypes);
  CUserMsg_AchievementEvent::default_instance_ = new CUserMsg_AchievementEvent();
  CUserMsg_CloseCaption::default_instance_ = new CUserMsg_CloseCaption();
  CUserMsg_CurrentTimescale::default_instance_ = new CUserMsg_CurrentTimescale();
  CUserMsg_DesiredTimescale::default_instance_ = new CUserMsg_DesiredTimescale();
  CUserMsg_Fade::default_instance_ = new CUserMsg_Fade();
  CUserMsg_Shake::default_instance_ = new CUserMsg_Shake();
  CUserMsg_ShakeDir::default_instance_ = new CUserMsg_ShakeDir();
  CUserMsg_Tilt::default_instance_ = new CUserMsg_Tilt();
  CUserMsg_SayText::default_instance_ = new CUserMsg_SayText();
  CUserMsg_SayText2::default_instance_ = new CUserMsg_SayText2();
  CUserMsg_HudMsg::default_instance_ = new CUserMsg_HudMsg();
  CUserMsg_HudText::default_instance_ = new CUserMsg_HudText();
  CUserMsg_TextMsg::default_instance_ = new CUserMsg_TextMsg();
  CUserMsg_GameTitle::default_instance_ = new CUserMsg_GameTitle();
  CUserMsg_ResetHUD::default_instance_ = new CUserMsg_ResetHUD();
  CUserMsg_SendAudio::default_instance_ = new CUserMsg_SendAudio();
  CUserMsg_VoiceMask::default_instance_ = new CUserMsg_VoiceMask();
  CUserMsg_RequestState::default_instance_ = new CUserMsg_RequestState();
  CUserMsg_HintText::default_instance_ = new CUserMsg_HintText();
  CUserMsg_KeyHintText::default_instance_ = new CUserMsg_KeyHintText();
  CUserMsg_StatsCrawlMsg::default_instance_ = new CUserMsg_StatsCrawlMsg();
  CUserMsg_StatsSkipState::default_instance_ = new CUserMsg_StatsSkipState();
  CUserMsg_VoiceSubtitle::default_instance_ = new CUserMsg_VoiceSubtitle();
  CUserMsg_VGUIMenu::default_instance_ = new CUserMsg_VGUIMenu();
  CUserMsg_VGUIMenu_Keys::default_instance_ = new CUserMsg_VGUIMenu_Keys();
  CUserMsg_Geiger::default_instance_ = new CUserMsg_Geiger();
  CUserMsg_Rumble::default_instance_ = new CUserMsg_Rumble();
  CUserMsg_Train::default_instance_ = new CUserMsg_Train();
  CUserMsg_SayTextChannel::default_instance_ = new CUserMsg_SayTextChannel();
  CUserMsg_MessageText::default_instance_ = new CUserMsg_MessageText();
  CUserMsg_AchievementEvent::default_instance_->InitAsDefaultInstance();
  CUserMsg_CloseCaption::default_instance_->InitAsDefaultInstance();
  CUserMsg_CurrentTimescale::default_instance_->InitAsDefaultInstance();
  CUserMsg_DesiredTimescale::default_instance_->InitAsDefaultInstance();
  CUserMsg_Fade::default_instance_->InitAsDefaultInstance();
  CUserMsg_Shake::default_instance_->InitAsDefaultInstance();
  CUserMsg_ShakeDir::default_instance_->InitAsDefaultInstance();
  CUserMsg_Tilt::default_instance_->InitAsDefaultInstance();
  CUserMsg_SayText::default_instance_->InitAsDefaultInstance();
  CUserMsg_SayText2::default_instance_->InitAsDefaultInstance();
  CUserMsg_HudMsg::default_instance_->InitAsDefaultInstance();
  CUserMsg_HudText::default_instance_->InitAsDefaultInstance();
  CUserMsg_TextMsg::default_instance_->InitAsDefaultInstance();
  CUserMsg_GameTitle::default_instance_->InitAsDefaultInstance();
  CUserMsg_ResetHUD::default_instance_->InitAsDefaultInstance();
  CUserMsg_SendAudio::default_instance_->InitAsDefaultInstance();
  CUserMsg_VoiceMask::default_instance_->InitAsDefaultInstance();
  CUserMsg_RequestState::default_instance_->InitAsDefaultInstance();
  CUserMsg_HintText::default_instance_->InitAsDefaultInstance();
  CUserMsg_KeyHintText::default_instance_->InitAsDefaultInstance();
  CUserMsg_StatsCrawlMsg::default_instance_->InitAsDefaultInstance();
  CUserMsg_StatsSkipState::default_instance_->InitAsDefaultInstance();
  CUserMsg_VoiceSubtitle::default_instance_->InitAsDefaultInstance();
  CUserMsg_VGUIMenu::default_instance_->InitAsDefaultInstance();
  CUserMsg_VGUIMenu_Keys::default_instance_->InitAsDefaultInstance();
  CUserMsg_Geiger::default_instance_->InitAsDefaultInstance();
  CUserMsg_Rumble::default_instance_->InitAsDefaultInstance();
  CUserMsg_Train::default_instance_->InitAsDefaultInstance();
  CUserMsg_SayTextChannel::default_instance_->InitAsDefaultInstance();
  CUserMsg_MessageText::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_usermessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_usermessages_2eproto {
  StaticDescriptorInitializer_usermessages_2eproto() {
    protobuf_AddDesc_usermessages_2eproto();
  }
} static_descriptor_initializer_usermessages_2eproto_;

const ::google::protobuf::EnumDescriptor* EBaseUserMessages_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EBaseUserMessages_descriptor_;
}
bool EBaseUserMessages_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 63:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_AchievementEvent::kAchievementFieldNumber;
#endif  // !_MSC_VER

CUserMsg_AchievementEvent::CUserMsg_AchievementEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_AchievementEvent::InitAsDefaultInstance() {
}

CUserMsg_AchievementEvent::CUserMsg_AchievementEvent(const CUserMsg_AchievementEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_AchievementEvent::SharedCtor() {
  _cached_size_ = 0;
  achievement_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_AchievementEvent::~CUserMsg_AchievementEvent() {
  SharedDtor();
}

void CUserMsg_AchievementEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_AchievementEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_AchievementEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_AchievementEvent_descriptor_;
}

const CUserMsg_AchievementEvent& CUserMsg_AchievementEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_AchievementEvent* CUserMsg_AchievementEvent::default_instance_ = NULL;

CUserMsg_AchievementEvent* CUserMsg_AchievementEvent::New() const {
  return new CUserMsg_AchievementEvent;
}

void CUserMsg_AchievementEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achievement_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_AchievementEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_)));
          set_has_achievement();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_AchievementEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 achievement = 1;
  if (has_achievement()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_AchievementEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 achievement = 1;
  if (has_achievement()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievement(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_AchievementEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 achievement = 1;
    if (has_achievement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievement());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_AchievementEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_AchievementEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_AchievementEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_AchievementEvent::MergeFrom(const CUserMsg_AchievementEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievement()) {
      set_achievement(from.achievement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_AchievementEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_AchievementEvent::CopyFrom(const CUserMsg_AchievementEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_AchievementEvent::IsInitialized() const {
  
  return true;
}

void CUserMsg_AchievementEvent::Swap(CUserMsg_AchievementEvent* other) {
  if (other != this) {
    std::swap(achievement_, other->achievement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_AchievementEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_AchievementEvent_descriptor_;
  metadata.reflection = CUserMsg_AchievementEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_CloseCaption::kHashFieldNumber;
const int CUserMsg_CloseCaption::kDurationFieldNumber;
const int CUserMsg_CloseCaption::kFromPlayerFieldNumber;
#endif  // !_MSC_VER

CUserMsg_CloseCaption::CUserMsg_CloseCaption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_CloseCaption::InitAsDefaultInstance() {
}

CUserMsg_CloseCaption::CUserMsg_CloseCaption(const CUserMsg_CloseCaption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_CloseCaption::SharedCtor() {
  _cached_size_ = 0;
  hash_ = 0u;
  duration_ = 0;
  from_player_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_CloseCaption::~CUserMsg_CloseCaption() {
  SharedDtor();
}

void CUserMsg_CloseCaption::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_CloseCaption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_CloseCaption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_CloseCaption_descriptor_;
}

const CUserMsg_CloseCaption& CUserMsg_CloseCaption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_CloseCaption* CUserMsg_CloseCaption::default_instance_ = NULL;

CUserMsg_CloseCaption* CUserMsg_CloseCaption::New() const {
  return new CUserMsg_CloseCaption;
}

void CUserMsg_CloseCaption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hash_ = 0u;
    duration_ = 0;
    from_player_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_CloseCaption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &hash_)));
          set_has_hash();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }
      
      // optional float duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_from_player;
        break;
      }
      
      // optional bool from_player = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_from_player:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
          set_has_from_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_CloseCaption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional fixed32 hash = 1;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->hash(), output);
  }
  
  // optional float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }
  
  // optional bool from_player = 3;
  if (has_from_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_CloseCaption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional fixed32 hash = 1;
  if (has_hash()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->hash(), target);
  }
  
  // optional float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }
  
  // optional bool from_player = 3;
  if (has_from_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_CloseCaption::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional fixed32 hash = 1;
    if (has_hash()) {
      total_size += 1 + 4;
    }
    
    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
    // optional bool from_player = 3;
    if (has_from_player()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_CloseCaption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_CloseCaption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_CloseCaption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_CloseCaption::MergeFrom(const CUserMsg_CloseCaption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hash()) {
      set_hash(from.hash());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_from_player()) {
      set_from_player(from.from_player());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_CloseCaption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_CloseCaption::CopyFrom(const CUserMsg_CloseCaption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_CloseCaption::IsInitialized() const {
  
  return true;
}

void CUserMsg_CloseCaption::Swap(CUserMsg_CloseCaption* other) {
  if (other != this) {
    std::swap(hash_, other->hash_);
    std::swap(duration_, other->duration_);
    std::swap(from_player_, other->from_player_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_CloseCaption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_CloseCaption_descriptor_;
  metadata.reflection = CUserMsg_CloseCaption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_CurrentTimescale::kCurrentFieldNumber;
#endif  // !_MSC_VER

CUserMsg_CurrentTimescale::CUserMsg_CurrentTimescale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_CurrentTimescale::InitAsDefaultInstance() {
}

CUserMsg_CurrentTimescale::CUserMsg_CurrentTimescale(const CUserMsg_CurrentTimescale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_CurrentTimescale::SharedCtor() {
  _cached_size_ = 0;
  current_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_CurrentTimescale::~CUserMsg_CurrentTimescale() {
  SharedDtor();
}

void CUserMsg_CurrentTimescale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_CurrentTimescale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_CurrentTimescale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_CurrentTimescale_descriptor_;
}

const CUserMsg_CurrentTimescale& CUserMsg_CurrentTimescale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_CurrentTimescale* CUserMsg_CurrentTimescale::default_instance_ = NULL;

CUserMsg_CurrentTimescale* CUserMsg_CurrentTimescale::New() const {
  return new CUserMsg_CurrentTimescale;
}

void CUserMsg_CurrentTimescale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    current_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_CurrentTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float current = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
          set_has_current();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_CurrentTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float current = 1;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->current(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_CurrentTimescale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float current = 1;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->current(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_CurrentTimescale::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float current = 1;
    if (has_current()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_CurrentTimescale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_CurrentTimescale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_CurrentTimescale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_CurrentTimescale::MergeFrom(const CUserMsg_CurrentTimescale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current()) {
      set_current(from.current());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_CurrentTimescale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_CurrentTimescale::CopyFrom(const CUserMsg_CurrentTimescale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_CurrentTimescale::IsInitialized() const {
  
  return true;
}

void CUserMsg_CurrentTimescale::Swap(CUserMsg_CurrentTimescale* other) {
  if (other != this) {
    std::swap(current_, other->current_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_CurrentTimescale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_CurrentTimescale_descriptor_;
  metadata.reflection = CUserMsg_CurrentTimescale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_DesiredTimescale::kDesiredFieldNumber;
const int CUserMsg_DesiredTimescale::kDurationFieldNumber;
const int CUserMsg_DesiredTimescale::kInterpolatorFieldNumber;
const int CUserMsg_DesiredTimescale::kStartBlendTimeFieldNumber;
#endif  // !_MSC_VER

CUserMsg_DesiredTimescale::CUserMsg_DesiredTimescale()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_DesiredTimescale::InitAsDefaultInstance() {
}

CUserMsg_DesiredTimescale::CUserMsg_DesiredTimescale(const CUserMsg_DesiredTimescale& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_DesiredTimescale::SharedCtor() {
  _cached_size_ = 0;
  desired_ = 0;
  duration_ = 0;
  interpolator_ = 0u;
  start_blend_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_DesiredTimescale::~CUserMsg_DesiredTimescale() {
  SharedDtor();
}

void CUserMsg_DesiredTimescale::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_DesiredTimescale::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_DesiredTimescale::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_DesiredTimescale_descriptor_;
}

const CUserMsg_DesiredTimescale& CUserMsg_DesiredTimescale::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_DesiredTimescale* CUserMsg_DesiredTimescale::default_instance_ = NULL;

CUserMsg_DesiredTimescale* CUserMsg_DesiredTimescale::New() const {
  return new CUserMsg_DesiredTimescale;
}

void CUserMsg_DesiredTimescale::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    desired_ = 0;
    duration_ = 0;
    interpolator_ = 0u;
    start_blend_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_DesiredTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float desired = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desired_)));
          set_has_desired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_duration;
        break;
      }
      
      // optional float duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_interpolator;
        break;
      }
      
      // optional uint32 interpolator = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_interpolator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &interpolator_)));
          set_has_interpolator();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_start_blend_time;
        break;
      }
      
      // optional float start_blend_time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_start_blend_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &start_blend_time_)));
          set_has_start_blend_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_DesiredTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float desired = 1;
  if (has_desired()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->desired(), output);
  }
  
  // optional float duration = 2;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }
  
  // optional uint32 interpolator = 3;
  if (has_interpolator()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->interpolator(), output);
  }
  
  // optional float start_blend_time = 4;
  if (has_start_blend_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->start_blend_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_DesiredTimescale::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float desired = 1;
  if (has_desired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->desired(), target);
  }
  
  // optional float duration = 2;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }
  
  // optional uint32 interpolator = 3;
  if (has_interpolator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->interpolator(), target);
  }
  
  // optional float start_blend_time = 4;
  if (has_start_blend_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->start_blend_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_DesiredTimescale::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float desired = 1;
    if (has_desired()) {
      total_size += 1 + 4;
    }
    
    // optional float duration = 2;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 interpolator = 3;
    if (has_interpolator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->interpolator());
    }
    
    // optional float start_blend_time = 4;
    if (has_start_blend_time()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_DesiredTimescale::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_DesiredTimescale* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_DesiredTimescale*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_DesiredTimescale::MergeFrom(const CUserMsg_DesiredTimescale& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_desired()) {
      set_desired(from.desired());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_interpolator()) {
      set_interpolator(from.interpolator());
    }
    if (from.has_start_blend_time()) {
      set_start_blend_time(from.start_blend_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_DesiredTimescale::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_DesiredTimescale::CopyFrom(const CUserMsg_DesiredTimescale& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_DesiredTimescale::IsInitialized() const {
  
  return true;
}

void CUserMsg_DesiredTimescale::Swap(CUserMsg_DesiredTimescale* other) {
  if (other != this) {
    std::swap(desired_, other->desired_);
    std::swap(duration_, other->duration_);
    std::swap(interpolator_, other->interpolator_);
    std::swap(start_blend_time_, other->start_blend_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_DesiredTimescale::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_DesiredTimescale_descriptor_;
  metadata.reflection = CUserMsg_DesiredTimescale_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_Fade::kDurationFieldNumber;
const int CUserMsg_Fade::kHoldTimeFieldNumber;
const int CUserMsg_Fade::kFlagsFieldNumber;
const int CUserMsg_Fade::kColorFieldNumber;
#endif  // !_MSC_VER

CUserMsg_Fade::CUserMsg_Fade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_Fade::InitAsDefaultInstance() {
}

CUserMsg_Fade::CUserMsg_Fade(const CUserMsg_Fade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_Fade::SharedCtor() {
  _cached_size_ = 0;
  duration_ = 0u;
  hold_time_ = 0u;
  flags_ = 0u;
  color_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_Fade::~CUserMsg_Fade() {
  SharedDtor();
}

void CUserMsg_Fade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_Fade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_Fade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_Fade_descriptor_;
}

const CUserMsg_Fade& CUserMsg_Fade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_Fade* CUserMsg_Fade::default_instance_ = NULL;

CUserMsg_Fade* CUserMsg_Fade::New() const {
  return new CUserMsg_Fade;
}

void CUserMsg_Fade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    duration_ = 0u;
    hold_time_ = 0u;
    flags_ = 0u;
    color_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_Fade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 duration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hold_time;
        break;
      }
      
      // optional uint32 hold_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hold_time_)));
          set_has_hold_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }
      
      // optional uint32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_color;
        break;
      }
      
      // optional fixed32 color = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_color:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_Fade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 duration = 1;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->duration(), output);
  }
  
  // optional uint32 hold_time = 2;
  if (has_hold_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hold_time(), output);
  }
  
  // optional uint32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }
  
  // optional fixed32 color = 4;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->color(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_Fade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 duration = 1;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->duration(), target);
  }
  
  // optional uint32 hold_time = 2;
  if (has_hold_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hold_time(), target);
  }
  
  // optional uint32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }
  
  // optional fixed32 color = 4;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->color(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_Fade::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 duration = 1;
    if (has_duration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }
    
    // optional uint32 hold_time = 2;
    if (has_hold_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hold_time());
    }
    
    // optional uint32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }
    
    // optional fixed32 color = 4;
    if (has_color()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_Fade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_Fade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_Fade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_Fade::MergeFrom(const CUserMsg_Fade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_hold_time()) {
      set_hold_time(from.hold_time());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
    if (from.has_color()) {
      set_color(from.color());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_Fade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_Fade::CopyFrom(const CUserMsg_Fade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_Fade::IsInitialized() const {
  
  return true;
}

void CUserMsg_Fade::Swap(CUserMsg_Fade* other) {
  if (other != this) {
    std::swap(duration_, other->duration_);
    std::swap(hold_time_, other->hold_time_);
    std::swap(flags_, other->flags_);
    std::swap(color_, other->color_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_Fade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_Fade_descriptor_;
  metadata.reflection = CUserMsg_Fade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_Shake::kCommandFieldNumber;
const int CUserMsg_Shake::kAmplitudeFieldNumber;
const int CUserMsg_Shake::kFrequencyFieldNumber;
const int CUserMsg_Shake::kDurationFieldNumber;
#endif  // !_MSC_VER

CUserMsg_Shake::CUserMsg_Shake()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_Shake::InitAsDefaultInstance() {
}

CUserMsg_Shake::CUserMsg_Shake(const CUserMsg_Shake& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_Shake::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0u;
  amplitude_ = 0;
  frequency_ = 0;
  duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_Shake::~CUserMsg_Shake() {
  SharedDtor();
}

void CUserMsg_Shake::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_Shake::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_Shake::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_Shake_descriptor_;
}

const CUserMsg_Shake& CUserMsg_Shake::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_Shake* CUserMsg_Shake::default_instance_ = NULL;

CUserMsg_Shake* CUserMsg_Shake::New() const {
  return new CUserMsg_Shake;
}

void CUserMsg_Shake::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0u;
    amplitude_ = 0;
    frequency_ = 0;
    duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_Shake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_amplitude;
        break;
      }
      
      // optional float amplitude = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_amplitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amplitude_)));
          set_has_amplitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_frequency;
        break;
      }
      
      // optional float frequency = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_frequency:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }
      
      // optional float duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_Shake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->command(), output);
  }
  
  // optional float amplitude = 2;
  if (has_amplitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->amplitude(), output);
  }
  
  // optional float frequency = 3;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->frequency(), output);
  }
  
  // optional float duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_Shake::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->command(), target);
  }
  
  // optional float amplitude = 2;
  if (has_amplitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->amplitude(), target);
  }
  
  // optional float frequency = 3;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->frequency(), target);
  }
  
  // optional float duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_Shake::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command());
    }
    
    // optional float amplitude = 2;
    if (has_amplitude()) {
      total_size += 1 + 4;
    }
    
    // optional float frequency = 3;
    if (has_frequency()) {
      total_size += 1 + 4;
    }
    
    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_Shake::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_Shake* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_Shake*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_Shake::MergeFrom(const CUserMsg_Shake& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_amplitude()) {
      set_amplitude(from.amplitude());
    }
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_Shake::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_Shake::CopyFrom(const CUserMsg_Shake& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_Shake::IsInitialized() const {
  
  return true;
}

void CUserMsg_Shake::Swap(CUserMsg_Shake* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(amplitude_, other->amplitude_);
    std::swap(frequency_, other->frequency_);
    std::swap(duration_, other->duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_Shake::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_Shake_descriptor_;
  metadata.reflection = CUserMsg_Shake_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_ShakeDir::kShakeFieldNumber;
const int CUserMsg_ShakeDir::kDirectionFieldNumber;
#endif  // !_MSC_VER

CUserMsg_ShakeDir::CUserMsg_ShakeDir()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_ShakeDir::InitAsDefaultInstance() {
  shake_ = const_cast< ::CUserMsg_Shake*>(&::CUserMsg_Shake::default_instance());
  direction_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CUserMsg_ShakeDir::CUserMsg_ShakeDir(const CUserMsg_ShakeDir& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_ShakeDir::SharedCtor() {
  _cached_size_ = 0;
  shake_ = NULL;
  direction_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ShakeDir::~CUserMsg_ShakeDir() {
  SharedDtor();
}

void CUserMsg_ShakeDir::SharedDtor() {
  if (this != default_instance_) {
    delete shake_;
    delete direction_;
  }
}

void CUserMsg_ShakeDir::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ShakeDir::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ShakeDir_descriptor_;
}

const CUserMsg_ShakeDir& CUserMsg_ShakeDir::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_ShakeDir* CUserMsg_ShakeDir::default_instance_ = NULL;

CUserMsg_ShakeDir* CUserMsg_ShakeDir::New() const {
  return new CUserMsg_ShakeDir;
}

void CUserMsg_ShakeDir::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shake()) {
      if (shake_ != NULL) shake_->::CUserMsg_Shake::Clear();
    }
    if (has_direction()) {
      if (direction_ != NULL) direction_->::CMsgVector::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ShakeDir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CUserMsg_Shake shake = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shake()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_direction;
        break;
      }
      
      // optional .CMsgVector direction = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_direction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_direction()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_ShakeDir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CUserMsg_Shake shake = 1;
  if (has_shake()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shake(), output);
  }
  
  // optional .CMsgVector direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->direction(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_ShakeDir::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CUserMsg_Shake shake = 1;
  if (has_shake()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shake(), target);
  }
  
  // optional .CMsgVector direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->direction(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_ShakeDir::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CUserMsg_Shake shake = 1;
    if (has_shake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shake());
    }
    
    // optional .CMsgVector direction = 2;
    if (has_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->direction());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ShakeDir::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ShakeDir* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ShakeDir*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ShakeDir::MergeFrom(const CUserMsg_ShakeDir& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shake()) {
      mutable_shake()->::CUserMsg_Shake::MergeFrom(from.shake());
    }
    if (from.has_direction()) {
      mutable_direction()->::CMsgVector::MergeFrom(from.direction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ShakeDir::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ShakeDir::CopyFrom(const CUserMsg_ShakeDir& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ShakeDir::IsInitialized() const {
  
  return true;
}

void CUserMsg_ShakeDir::Swap(CUserMsg_ShakeDir* other) {
  if (other != this) {
    std::swap(shake_, other->shake_);
    std::swap(direction_, other->direction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ShakeDir::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ShakeDir_descriptor_;
  metadata.reflection = CUserMsg_ShakeDir_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_Tilt::kCommandFieldNumber;
const int CUserMsg_Tilt::kEaseInOutFieldNumber;
const int CUserMsg_Tilt::kAngleFieldNumber;
const int CUserMsg_Tilt::kDurationFieldNumber;
const int CUserMsg_Tilt::kTimeFieldNumber;
#endif  // !_MSC_VER

CUserMsg_Tilt::CUserMsg_Tilt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_Tilt::InitAsDefaultInstance() {
  angle_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CUserMsg_Tilt::CUserMsg_Tilt(const CUserMsg_Tilt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_Tilt::SharedCtor() {
  _cached_size_ = 0;
  command_ = 0u;
  ease_in_out_ = false;
  angle_ = NULL;
  duration_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_Tilt::~CUserMsg_Tilt() {
  SharedDtor();
}

void CUserMsg_Tilt::SharedDtor() {
  if (this != default_instance_) {
    delete angle_;
  }
}

void CUserMsg_Tilt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_Tilt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_Tilt_descriptor_;
}

const CUserMsg_Tilt& CUserMsg_Tilt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_Tilt* CUserMsg_Tilt::default_instance_ = NULL;

CUserMsg_Tilt* CUserMsg_Tilt::New() const {
  return new CUserMsg_Tilt;
}

void CUserMsg_Tilt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    command_ = 0u;
    ease_in_out_ = false;
    if (has_angle()) {
      if (angle_ != NULL) angle_->::CMsgVector::Clear();
    }
    duration_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_Tilt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 command = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_)));
          set_has_command();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ease_in_out;
        break;
      }
      
      // optional bool ease_in_out = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ease_in_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ease_in_out_)));
          set_has_ease_in_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_angle;
        break;
      }
      
      // optional .CMsgVector angle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_angle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_duration;
        break;
      }
      
      // optional float duration = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_time;
        break;
      }
      
      // optional float time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_Tilt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->command(), output);
  }
  
  // optional bool ease_in_out = 2;
  if (has_ease_in_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ease_in_out(), output);
  }
  
  // optional .CMsgVector angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->angle(), output);
  }
  
  // optional float duration = 4;
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }
  
  // optional float time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_Tilt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 command = 1;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->command(), target);
  }
  
  // optional bool ease_in_out = 2;
  if (has_ease_in_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ease_in_out(), target);
  }
  
  // optional .CMsgVector angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->angle(), target);
  }
  
  // optional float duration = 4;
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }
  
  // optional float time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_Tilt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command());
    }
    
    // optional bool ease_in_out = 2;
    if (has_ease_in_out()) {
      total_size += 1 + 1;
    }
    
    // optional .CMsgVector angle = 3;
    if (has_angle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angle());
    }
    
    // optional float duration = 4;
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
    // optional float time = 5;
    if (has_time()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_Tilt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_Tilt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_Tilt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_Tilt::MergeFrom(const CUserMsg_Tilt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
    if (from.has_ease_in_out()) {
      set_ease_in_out(from.ease_in_out());
    }
    if (from.has_angle()) {
      mutable_angle()->::CMsgVector::MergeFrom(from.angle());
    }
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_Tilt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_Tilt::CopyFrom(const CUserMsg_Tilt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_Tilt::IsInitialized() const {
  
  return true;
}

void CUserMsg_Tilt::Swap(CUserMsg_Tilt* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    std::swap(ease_in_out_, other->ease_in_out_);
    std::swap(angle_, other->angle_);
    std::swap(duration_, other->duration_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_Tilt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_Tilt_descriptor_;
  metadata.reflection = CUserMsg_Tilt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_SayText::kClientFieldNumber;
const int CUserMsg_SayText::kTextFieldNumber;
const int CUserMsg_SayText::kChatFieldNumber;
#endif  // !_MSC_VER

CUserMsg_SayText::CUserMsg_SayText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_SayText::InitAsDefaultInstance() {
}

CUserMsg_SayText::CUserMsg_SayText(const CUserMsg_SayText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_SayText::SharedCtor() {
  _cached_size_ = 0;
  client_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  chat_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_SayText::~CUserMsg_SayText() {
  SharedDtor();
}

void CUserMsg_SayText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CUserMsg_SayText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_SayText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_SayText_descriptor_;
}

const CUserMsg_SayText& CUserMsg_SayText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_SayText* CUserMsg_SayText::default_instance_ = NULL;

CUserMsg_SayText* CUserMsg_SayText::New() const {
  return new CUserMsg_SayText;
}

void CUserMsg_SayText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    chat_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_SayText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_)));
          set_has_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }
      
      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_chat;
        break;
      }
      
      // optional bool chat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
          set_has_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_SayText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client = 1;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client(), output);
  }
  
  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }
  
  // optional bool chat = 3;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->chat(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_SayText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client = 1;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client(), target);
  }
  
  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }
  
  // optional bool chat = 3;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->chat(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_SayText::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client = 1;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client());
    }
    
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional bool chat = 3;
    if (has_chat()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_SayText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_SayText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_SayText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_SayText::MergeFrom(const CUserMsg_SayText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client()) {
      set_client(from.client());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_SayText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_SayText::CopyFrom(const CUserMsg_SayText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_SayText::IsInitialized() const {
  
  return true;
}

void CUserMsg_SayText::Swap(CUserMsg_SayText* other) {
  if (other != this) {
    std::swap(client_, other->client_);
    std::swap(text_, other->text_);
    std::swap(chat_, other->chat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_SayText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_SayText_descriptor_;
  metadata.reflection = CUserMsg_SayText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_SayText2::kClientFieldNumber;
const int CUserMsg_SayText2::kChatFieldNumber;
const int CUserMsg_SayText2::kFormatFieldNumber;
const int CUserMsg_SayText2::kPrefixFieldNumber;
const int CUserMsg_SayText2::kTextFieldNumber;
const int CUserMsg_SayText2::kLocationFieldNumber;
#endif  // !_MSC_VER

CUserMsg_SayText2::CUserMsg_SayText2()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_SayText2::InitAsDefaultInstance() {
}

CUserMsg_SayText2::CUserMsg_SayText2(const CUserMsg_SayText2& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_SayText2::SharedCtor() {
  _cached_size_ = 0;
  client_ = 0u;
  chat_ = false;
  format_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prefix_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_SayText2::~CUserMsg_SayText2() {
  SharedDtor();
}

void CUserMsg_SayText2::SharedDtor() {
  if (format_ != &::google::protobuf::internal::kEmptyString) {
    delete format_;
  }
  if (prefix_ != &::google::protobuf::internal::kEmptyString) {
    delete prefix_;
  }
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  if (this != default_instance_) {
  }
}

void CUserMsg_SayText2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_SayText2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_SayText2_descriptor_;
}

const CUserMsg_SayText2& CUserMsg_SayText2::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_SayText2* CUserMsg_SayText2::default_instance_ = NULL;

CUserMsg_SayText2* CUserMsg_SayText2::New() const {
  return new CUserMsg_SayText2;
}

void CUserMsg_SayText2::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    client_ = 0u;
    chat_ = false;
    if (has_format()) {
      if (format_ != &::google::protobuf::internal::kEmptyString) {
        format_->clear();
      }
    }
    if (has_prefix()) {
      if (prefix_ != &::google::protobuf::internal::kEmptyString) {
        prefix_->clear();
      }
    }
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_SayText2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_)));
          set_has_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat;
        break;
      }
      
      // optional bool chat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
          set_has_chat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_format;
        break;
      }
      
      // optional string format = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_format()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->format().data(), this->format().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prefix;
        break;
      }
      
      // optional string prefix = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prefix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_prefix()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->prefix().data(), this->prefix().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_text;
        break;
      }
      
      // optional string text = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_location;
        break;
      }
      
      // optional string location = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_SayText2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 client = 1;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client(), output);
  }
  
  // optional bool chat = 2;
  if (has_chat()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chat(), output);
  }
  
  // optional string format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->format(), output);
  }
  
  // optional string prefix = 4;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->prefix(), output);
  }
  
  // optional string text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->text(), output);
  }
  
  // optional string location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->location(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_SayText2::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 client = 1;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client(), target);
  }
  
  // optional bool chat = 2;
  if (has_chat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chat(), target);
  }
  
  // optional string format = 3;
  if (has_format()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->format().data(), this->format().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->format(), target);
  }
  
  // optional string prefix = 4;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->prefix().data(), this->prefix().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->prefix(), target);
  }
  
  // optional string text = 5;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->text(), target);
  }
  
  // optional string location = 6;
  if (has_location()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->location(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_SayText2::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 client = 1;
    if (has_client()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client());
    }
    
    // optional bool chat = 2;
    if (has_chat()) {
      total_size += 1 + 1;
    }
    
    // optional string format = 3;
    if (has_format()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->format());
    }
    
    // optional string prefix = 4;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->prefix());
    }
    
    // optional string text = 5;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
    // optional string location = 6;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_SayText2::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_SayText2* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_SayText2*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_SayText2::MergeFrom(const CUserMsg_SayText2& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_client()) {
      set_client(from.client());
    }
    if (from.has_chat()) {
      set_chat(from.chat());
    }
    if (from.has_format()) {
      set_format(from.format());
    }
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_SayText2::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_SayText2::CopyFrom(const CUserMsg_SayText2& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_SayText2::IsInitialized() const {
  
  return true;
}

void CUserMsg_SayText2::Swap(CUserMsg_SayText2* other) {
  if (other != this) {
    std::swap(client_, other->client_);
    std::swap(chat_, other->chat_);
    std::swap(format_, other->format_);
    std::swap(prefix_, other->prefix_);
    std::swap(text_, other->text_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_SayText2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_SayText2_descriptor_;
  metadata.reflection = CUserMsg_SayText2_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_HudMsg::kChannelFieldNumber;
const int CUserMsg_HudMsg::kXFieldNumber;
const int CUserMsg_HudMsg::kYFieldNumber;
const int CUserMsg_HudMsg::kColor1FieldNumber;
const int CUserMsg_HudMsg::kColor2FieldNumber;
const int CUserMsg_HudMsg::kEffectFieldNumber;
const int CUserMsg_HudMsg::kFadeInTimeFieldNumber;
const int CUserMsg_HudMsg::kFadeOutTimeFieldNumber;
const int CUserMsg_HudMsg::kHoldTimeFieldNumber;
const int CUserMsg_HudMsg::kFxTimeFieldNumber;
const int CUserMsg_HudMsg::kMessageFieldNumber;
#endif  // !_MSC_VER

CUserMsg_HudMsg::CUserMsg_HudMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_HudMsg::InitAsDefaultInstance() {
}

CUserMsg_HudMsg::CUserMsg_HudMsg(const CUserMsg_HudMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_HudMsg::SharedCtor() {
  _cached_size_ = 0;
  channel_ = 0u;
  x_ = 0;
  y_ = 0;
  color1_ = 0u;
  color2_ = 0u;
  effect_ = 0u;
  fade_in_time_ = 0;
  fade_out_time_ = 0;
  hold_time_ = 0;
  fx_time_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_HudMsg::~CUserMsg_HudMsg() {
  SharedDtor();
}

void CUserMsg_HudMsg::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CUserMsg_HudMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_HudMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_HudMsg_descriptor_;
}

const CUserMsg_HudMsg& CUserMsg_HudMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_HudMsg* CUserMsg_HudMsg::default_instance_ = NULL;

CUserMsg_HudMsg* CUserMsg_HudMsg::New() const {
  return new CUserMsg_HudMsg;
}

void CUserMsg_HudMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    channel_ = 0u;
    x_ = 0;
    y_ = 0;
    color1_ = 0u;
    color2_ = 0u;
    effect_ = 0u;
    fade_in_time_ = 0;
    fade_out_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hold_time_ = 0;
    fx_time_ = 0;
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_HudMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_x;
        break;
      }
      
      // optional float x = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_y;
        break;
      }
      
      // optional float y = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_color1;
        break;
      }
      
      // optional uint32 color1 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color1_)));
          set_has_color1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_color2;
        break;
      }
      
      // optional uint32 color2 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_color2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color2_)));
          set_has_color2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_effect;
        break;
      }
      
      // optional uint32 effect = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_effect:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));
          set_has_effect();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_fade_in_time;
        break;
      }
      
      // optional float fade_in_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fade_in_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_in_time_)));
          set_has_fade_in_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_fade_out_time;
        break;
      }
      
      // optional float fade_out_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fade_out_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_out_time_)));
          set_has_fade_out_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_hold_time;
        break;
      }
      
      // optional float hold_time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hold_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hold_time_)));
          set_has_hold_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(85)) goto parse_fx_time;
        break;
      }
      
      // optional float fx_time = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fx_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_time_)));
          set_has_fx_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_message;
        break;
      }
      
      // optional string message = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_message:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_HudMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }
  
  // optional float x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }
  
  // optional float y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }
  
  // optional uint32 color1 = 4;
  if (has_color1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->color1(), output);
  }
  
  // optional uint32 color2 = 5;
  if (has_color2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->color2(), output);
  }
  
  // optional uint32 effect = 6;
  if (has_effect()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->effect(), output);
  }
  
  // optional float fade_in_time = 7;
  if (has_fade_in_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fade_in_time(), output);
  }
  
  // optional float fade_out_time = 8;
  if (has_fade_out_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fade_out_time(), output);
  }
  
  // optional float hold_time = 9;
  if (has_hold_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->hold_time(), output);
  }
  
  // optional float fx_time = 10;
  if (has_fx_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fx_time(), output);
  }
  
  // optional string message = 11;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_HudMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 channel = 1;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }
  
  // optional float x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }
  
  // optional float y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }
  
  // optional uint32 color1 = 4;
  if (has_color1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->color1(), target);
  }
  
  // optional uint32 color2 = 5;
  if (has_color2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->color2(), target);
  }
  
  // optional uint32 effect = 6;
  if (has_effect()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->effect(), target);
  }
  
  // optional float fade_in_time = 7;
  if (has_fade_in_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fade_in_time(), target);
  }
  
  // optional float fade_out_time = 8;
  if (has_fade_out_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->fade_out_time(), target);
  }
  
  // optional float hold_time = 9;
  if (has_hold_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->hold_time(), target);
  }
  
  // optional float fx_time = 10;
  if (has_fx_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fx_time(), target);
  }
  
  // optional string message = 11;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_HudMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 channel = 1;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }
    
    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // optional uint32 color1 = 4;
    if (has_color1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color1());
    }
    
    // optional uint32 color2 = 5;
    if (has_color2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color2());
    }
    
    // optional uint32 effect = 6;
    if (has_effect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect());
    }
    
    // optional float fade_in_time = 7;
    if (has_fade_in_time()) {
      total_size += 1 + 4;
    }
    
    // optional float fade_out_time = 8;
    if (has_fade_out_time()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float hold_time = 9;
    if (has_hold_time()) {
      total_size += 1 + 4;
    }
    
    // optional float fx_time = 10;
    if (has_fx_time()) {
      total_size += 1 + 4;
    }
    
    // optional string message = 11;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_HudMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_HudMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_HudMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_HudMsg::MergeFrom(const CUserMsg_HudMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_color1()) {
      set_color1(from.color1());
    }
    if (from.has_color2()) {
      set_color2(from.color2());
    }
    if (from.has_effect()) {
      set_effect(from.effect());
    }
    if (from.has_fade_in_time()) {
      set_fade_in_time(from.fade_in_time());
    }
    if (from.has_fade_out_time()) {
      set_fade_out_time(from.fade_out_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hold_time()) {
      set_hold_time(from.hold_time());
    }
    if (from.has_fx_time()) {
      set_fx_time(from.fx_time());
    }
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_HudMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_HudMsg::CopyFrom(const CUserMsg_HudMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_HudMsg::IsInitialized() const {
  
  return true;
}

void CUserMsg_HudMsg::Swap(CUserMsg_HudMsg* other) {
  if (other != this) {
    std::swap(channel_, other->channel_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(color1_, other->color1_);
    std::swap(color2_, other->color2_);
    std::swap(effect_, other->effect_);
    std::swap(fade_in_time_, other->fade_in_time_);
    std::swap(fade_out_time_, other->fade_out_time_);
    std::swap(hold_time_, other->hold_time_);
    std::swap(fx_time_, other->fx_time_);
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_HudMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_HudMsg_descriptor_;
  metadata.reflection = CUserMsg_HudMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_HudText::kMessageFieldNumber;
#endif  // !_MSC_VER

CUserMsg_HudText::CUserMsg_HudText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_HudText::InitAsDefaultInstance() {
}

CUserMsg_HudText::CUserMsg_HudText(const CUserMsg_HudText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_HudText::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_HudText::~CUserMsg_HudText() {
  SharedDtor();
}

void CUserMsg_HudText::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CUserMsg_HudText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_HudText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_HudText_descriptor_;
}

const CUserMsg_HudText& CUserMsg_HudText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_HudText* CUserMsg_HudText::default_instance_ = NULL;

CUserMsg_HudText* CUserMsg_HudText::New() const {
  return new CUserMsg_HudText;
}

void CUserMsg_HudText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_HudText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_HudText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_HudText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_HudText::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_HudText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_HudText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_HudText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_HudText::MergeFrom(const CUserMsg_HudText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_HudText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_HudText::CopyFrom(const CUserMsg_HudText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_HudText::IsInitialized() const {
  
  return true;
}

void CUserMsg_HudText::Swap(CUserMsg_HudText* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_HudText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_HudText_descriptor_;
  metadata.reflection = CUserMsg_HudText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_TextMsg::kDestFieldNumber;
const int CUserMsg_TextMsg::kParamFieldNumber;
#endif  // !_MSC_VER

CUserMsg_TextMsg::CUserMsg_TextMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_TextMsg::InitAsDefaultInstance() {
}

CUserMsg_TextMsg::CUserMsg_TextMsg(const CUserMsg_TextMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_TextMsg::SharedCtor() {
  _cached_size_ = 0;
  dest_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_TextMsg::~CUserMsg_TextMsg() {
  SharedDtor();
}

void CUserMsg_TextMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_TextMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_TextMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_TextMsg_descriptor_;
}

const CUserMsg_TextMsg& CUserMsg_TextMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_TextMsg* CUserMsg_TextMsg::default_instance_ = NULL;

CUserMsg_TextMsg* CUserMsg_TextMsg::New() const {
  return new CUserMsg_TextMsg;
}

void CUserMsg_TextMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dest_ = 0u;
  }
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_TextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_)));
          set_has_dest();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param;
        break;
      }
      
      // repeated string param = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->param(0).data(), this->param(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_param;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_TextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dest = 1;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dest(), output);
  }
  
  // repeated string param = 2;
  for (int i = 0; i < this->param_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->param(i).data(), this->param(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->param(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_TextMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dest = 1;
  if (has_dest()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dest(), target);
  }
  
  // repeated string param = 2;
  for (int i = 0; i < this->param_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->param(i).data(), this->param(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->param(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_TextMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dest = 1;
    if (has_dest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dest());
    }
    
  }
  // repeated string param = 2;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_TextMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_TextMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_TextMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_TextMsg::MergeFrom(const CUserMsg_TextMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  param_.MergeFrom(from.param_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dest()) {
      set_dest(from.dest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_TextMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_TextMsg::CopyFrom(const CUserMsg_TextMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_TextMsg::IsInitialized() const {
  
  return true;
}

void CUserMsg_TextMsg::Swap(CUserMsg_TextMsg* other) {
  if (other != this) {
    std::swap(dest_, other->dest_);
    param_.Swap(&other->param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_TextMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_TextMsg_descriptor_;
  metadata.reflection = CUserMsg_TextMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CUserMsg_GameTitle::CUserMsg_GameTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_GameTitle::InitAsDefaultInstance() {
}

CUserMsg_GameTitle::CUserMsg_GameTitle(const CUserMsg_GameTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_GameTitle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_GameTitle::~CUserMsg_GameTitle() {
  SharedDtor();
}

void CUserMsg_GameTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_GameTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_GameTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_GameTitle_descriptor_;
}

const CUserMsg_GameTitle& CUserMsg_GameTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_GameTitle* CUserMsg_GameTitle::default_instance_ = NULL;

CUserMsg_GameTitle* CUserMsg_GameTitle::New() const {
  return new CUserMsg_GameTitle;
}

void CUserMsg_GameTitle::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_GameTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CUserMsg_GameTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_GameTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_GameTitle::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_GameTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_GameTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_GameTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_GameTitle::MergeFrom(const CUserMsg_GameTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_GameTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_GameTitle::CopyFrom(const CUserMsg_GameTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_GameTitle::IsInitialized() const {
  
  return true;
}

void CUserMsg_GameTitle::Swap(CUserMsg_GameTitle* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_GameTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_GameTitle_descriptor_;
  metadata.reflection = CUserMsg_GameTitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CUserMsg_ResetHUD::CUserMsg_ResetHUD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_ResetHUD::InitAsDefaultInstance() {
}

CUserMsg_ResetHUD::CUserMsg_ResetHUD(const CUserMsg_ResetHUD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_ResetHUD::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_ResetHUD::~CUserMsg_ResetHUD() {
  SharedDtor();
}

void CUserMsg_ResetHUD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_ResetHUD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_ResetHUD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_ResetHUD_descriptor_;
}

const CUserMsg_ResetHUD& CUserMsg_ResetHUD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_ResetHUD* CUserMsg_ResetHUD::default_instance_ = NULL;

CUserMsg_ResetHUD* CUserMsg_ResetHUD::New() const {
  return new CUserMsg_ResetHUD;
}

void CUserMsg_ResetHUD::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_ResetHUD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CUserMsg_ResetHUD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_ResetHUD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_ResetHUD::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_ResetHUD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_ResetHUD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_ResetHUD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_ResetHUD::MergeFrom(const CUserMsg_ResetHUD& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_ResetHUD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ResetHUD::CopyFrom(const CUserMsg_ResetHUD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ResetHUD::IsInitialized() const {
  
  return true;
}

void CUserMsg_ResetHUD::Swap(CUserMsg_ResetHUD* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_ResetHUD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_ResetHUD_descriptor_;
  metadata.reflection = CUserMsg_ResetHUD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_SendAudio::kStopFieldNumber;
const int CUserMsg_SendAudio::kNameFieldNumber;
#endif  // !_MSC_VER

CUserMsg_SendAudio::CUserMsg_SendAudio()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_SendAudio::InitAsDefaultInstance() {
}

CUserMsg_SendAudio::CUserMsg_SendAudio(const CUserMsg_SendAudio& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_SendAudio::SharedCtor() {
  _cached_size_ = 0;
  stop_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_SendAudio::~CUserMsg_SendAudio() {
  SharedDtor();
}

void CUserMsg_SendAudio::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CUserMsg_SendAudio::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_SendAudio::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_SendAudio_descriptor_;
}

const CUserMsg_SendAudio& CUserMsg_SendAudio::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_SendAudio* CUserMsg_SendAudio::default_instance_ = NULL;

CUserMsg_SendAudio* CUserMsg_SendAudio::New() const {
  return new CUserMsg_SendAudio;
}

void CUserMsg_SendAudio::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    stop_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_SendAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool stop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
          set_has_stop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }
      
      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_SendAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool stop = 2;
  if (has_stop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stop(), output);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_SendAudio::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool stop = 2;
  if (has_stop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stop(), target);
  }
  
  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_SendAudio::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool stop = 2;
    if (has_stop()) {
      total_size += 1 + 1;
    }
    
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_SendAudio::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_SendAudio* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_SendAudio*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_SendAudio::MergeFrom(const CUserMsg_SendAudio& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stop()) {
      set_stop(from.stop());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_SendAudio::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_SendAudio::CopyFrom(const CUserMsg_SendAudio& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_SendAudio::IsInitialized() const {
  
  return true;
}

void CUserMsg_SendAudio::Swap(CUserMsg_SendAudio* other) {
  if (other != this) {
    std::swap(stop_, other->stop_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_SendAudio::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_SendAudio_descriptor_;
  metadata.reflection = CUserMsg_SendAudio_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_VoiceMask::kAudiblePlayersMaskFieldNumber;
const int CUserMsg_VoiceMask::kPlayerModEnabledFieldNumber;
#endif  // !_MSC_VER

CUserMsg_VoiceMask::CUserMsg_VoiceMask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_VoiceMask::InitAsDefaultInstance() {
}

CUserMsg_VoiceMask::CUserMsg_VoiceMask(const CUserMsg_VoiceMask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_VoiceMask::SharedCtor() {
  _cached_size_ = 0;
  player_mod_enabled_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_VoiceMask::~CUserMsg_VoiceMask() {
  SharedDtor();
}

void CUserMsg_VoiceMask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_VoiceMask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_VoiceMask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_VoiceMask_descriptor_;
}

const CUserMsg_VoiceMask& CUserMsg_VoiceMask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_VoiceMask* CUserMsg_VoiceMask::default_instance_ = NULL;

CUserMsg_VoiceMask* CUserMsg_VoiceMask::New() const {
  return new CUserMsg_VoiceMask;
}

void CUserMsg_VoiceMask::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    player_mod_enabled_ = false;
  }
  audible_players_mask_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_VoiceMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 audible_players_mask = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_audible_players_mask:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_audible_players_mask())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_audible_players_mask())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_audible_players_mask;
        if (input->ExpectTag(16)) goto parse_player_mod_enabled;
        break;
      }
      
      // optional bool player_mod_enabled = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_player_mod_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &player_mod_enabled_)));
          set_has_player_mod_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_VoiceMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 audible_players_mask = 1;
  for (int i = 0; i < this->audible_players_mask_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->audible_players_mask(i), output);
  }
  
  // optional bool player_mod_enabled = 2;
  if (has_player_mod_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->player_mod_enabled(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_VoiceMask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 audible_players_mask = 1;
  for (int i = 0; i < this->audible_players_mask_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->audible_players_mask(i), target);
  }
  
  // optional bool player_mod_enabled = 2;
  if (has_player_mod_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->player_mod_enabled(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_VoiceMask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool player_mod_enabled = 2;
    if (has_player_mod_enabled()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int32 audible_players_mask = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->audible_players_mask_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->audible_players_mask(i));
    }
    total_size += 1 * this->audible_players_mask_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_VoiceMask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_VoiceMask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_VoiceMask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_VoiceMask::MergeFrom(const CUserMsg_VoiceMask& from) {
  GOOGLE_CHECK_NE(&from, this);
  audible_players_mask_.MergeFrom(from.audible_players_mask_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_player_mod_enabled()) {
      set_player_mod_enabled(from.player_mod_enabled());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_VoiceMask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_VoiceMask::CopyFrom(const CUserMsg_VoiceMask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_VoiceMask::IsInitialized() const {
  
  return true;
}

void CUserMsg_VoiceMask::Swap(CUserMsg_VoiceMask* other) {
  if (other != this) {
    audible_players_mask_.Swap(&other->audible_players_mask_);
    std::swap(player_mod_enabled_, other->player_mod_enabled_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_VoiceMask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_VoiceMask_descriptor_;
  metadata.reflection = CUserMsg_VoiceMask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CUserMsg_RequestState::CUserMsg_RequestState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_RequestState::InitAsDefaultInstance() {
}

CUserMsg_RequestState::CUserMsg_RequestState(const CUserMsg_RequestState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_RequestState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_RequestState::~CUserMsg_RequestState() {
  SharedDtor();
}

void CUserMsg_RequestState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_RequestState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_RequestState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_RequestState_descriptor_;
}

const CUserMsg_RequestState& CUserMsg_RequestState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_RequestState* CUserMsg_RequestState::default_instance_ = NULL;

CUserMsg_RequestState* CUserMsg_RequestState::New() const {
  return new CUserMsg_RequestState;
}

void CUserMsg_RequestState::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_RequestState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CUserMsg_RequestState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_RequestState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_RequestState::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_RequestState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_RequestState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_RequestState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_RequestState::MergeFrom(const CUserMsg_RequestState& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_RequestState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_RequestState::CopyFrom(const CUserMsg_RequestState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_RequestState::IsInitialized() const {
  
  return true;
}

void CUserMsg_RequestState::Swap(CUserMsg_RequestState* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_RequestState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_RequestState_descriptor_;
  metadata.reflection = CUserMsg_RequestState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_HintText::kMessageFieldNumber;
#endif  // !_MSC_VER

CUserMsg_HintText::CUserMsg_HintText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_HintText::InitAsDefaultInstance() {
}

CUserMsg_HintText::CUserMsg_HintText(const CUserMsg_HintText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_HintText::SharedCtor() {
  _cached_size_ = 0;
  message_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_HintText::~CUserMsg_HintText() {
  SharedDtor();
}

void CUserMsg_HintText::SharedDtor() {
  if (message_ != &::google::protobuf::internal::kEmptyString) {
    delete message_;
  }
  if (this != default_instance_) {
  }
}

void CUserMsg_HintText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_HintText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_HintText_descriptor_;
}

const CUserMsg_HintText& CUserMsg_HintText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_HintText* CUserMsg_HintText::default_instance_ = NULL;

CUserMsg_HintText* CUserMsg_HintText::New() const {
  return new CUserMsg_HintText;
}

void CUserMsg_HintText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_message()) {
      if (message_ != &::google::protobuf::internal::kEmptyString) {
        message_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_HintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->message().data(), this->message().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_HintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_HintText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string message = 1;
  if (has_message()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->message().data(), this->message().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_HintText::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string message = 1;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_HintText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_HintText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_HintText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_HintText::MergeFrom(const CUserMsg_HintText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message()) {
      set_message(from.message());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_HintText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_HintText::CopyFrom(const CUserMsg_HintText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_HintText::IsInitialized() const {
  
  return true;
}

void CUserMsg_HintText::Swap(CUserMsg_HintText* other) {
  if (other != this) {
    std::swap(message_, other->message_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_HintText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_HintText_descriptor_;
  metadata.reflection = CUserMsg_HintText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_KeyHintText::kMessagesFieldNumber;
#endif  // !_MSC_VER

CUserMsg_KeyHintText::CUserMsg_KeyHintText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_KeyHintText::InitAsDefaultInstance() {
}

CUserMsg_KeyHintText::CUserMsg_KeyHintText(const CUserMsg_KeyHintText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_KeyHintText::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_KeyHintText::~CUserMsg_KeyHintText() {
  SharedDtor();
}

void CUserMsg_KeyHintText::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_KeyHintText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_KeyHintText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_KeyHintText_descriptor_;
}

const CUserMsg_KeyHintText& CUserMsg_KeyHintText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_KeyHintText* CUserMsg_KeyHintText::default_instance_ = NULL;

CUserMsg_KeyHintText* CUserMsg_KeyHintText::New() const {
  return new CUserMsg_KeyHintText;
}

void CUserMsg_KeyHintText::Clear() {
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_KeyHintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string messages = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_messages:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_messages()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->messages(0).data(), this->messages(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_messages;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_KeyHintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->messages(i).data(), this->messages(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->messages(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_KeyHintText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->messages(i).data(), this->messages(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->messages(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_KeyHintText::ByteSize() const {
  int total_size = 0;
  
  // repeated string messages = 1;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->messages(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_KeyHintText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_KeyHintText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_KeyHintText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_KeyHintText::MergeFrom(const CUserMsg_KeyHintText& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_KeyHintText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_KeyHintText::CopyFrom(const CUserMsg_KeyHintText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_KeyHintText::IsInitialized() const {
  
  return true;
}

void CUserMsg_KeyHintText::Swap(CUserMsg_KeyHintText* other) {
  if (other != this) {
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_KeyHintText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_KeyHintText_descriptor_;
  metadata.reflection = CUserMsg_KeyHintText_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CUserMsg_StatsCrawlMsg::CUserMsg_StatsCrawlMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_StatsCrawlMsg::InitAsDefaultInstance() {
}

CUserMsg_StatsCrawlMsg::CUserMsg_StatsCrawlMsg(const CUserMsg_StatsCrawlMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_StatsCrawlMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_StatsCrawlMsg::~CUserMsg_StatsCrawlMsg() {
  SharedDtor();
}

void CUserMsg_StatsCrawlMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_StatsCrawlMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_StatsCrawlMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_StatsCrawlMsg_descriptor_;
}

const CUserMsg_StatsCrawlMsg& CUserMsg_StatsCrawlMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_StatsCrawlMsg* CUserMsg_StatsCrawlMsg::default_instance_ = NULL;

CUserMsg_StatsCrawlMsg* CUserMsg_StatsCrawlMsg::New() const {
  return new CUserMsg_StatsCrawlMsg;
}

void CUserMsg_StatsCrawlMsg::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_StatsCrawlMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CUserMsg_StatsCrawlMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_StatsCrawlMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_StatsCrawlMsg::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_StatsCrawlMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_StatsCrawlMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_StatsCrawlMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_StatsCrawlMsg::MergeFrom(const CUserMsg_StatsCrawlMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_StatsCrawlMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_StatsCrawlMsg::CopyFrom(const CUserMsg_StatsCrawlMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_StatsCrawlMsg::IsInitialized() const {
  
  return true;
}

void CUserMsg_StatsCrawlMsg::Swap(CUserMsg_StatsCrawlMsg* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_StatsCrawlMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_StatsCrawlMsg_descriptor_;
  metadata.reflection = CUserMsg_StatsCrawlMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_StatsSkipState::kNumSkipsFieldNumber;
const int CUserMsg_StatsSkipState::kNumPlayersFieldNumber;
#endif  // !_MSC_VER

CUserMsg_StatsSkipState::CUserMsg_StatsSkipState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_StatsSkipState::InitAsDefaultInstance() {
}

CUserMsg_StatsSkipState::CUserMsg_StatsSkipState(const CUserMsg_StatsSkipState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_StatsSkipState::SharedCtor() {
  _cached_size_ = 0;
  num_skips_ = 0;
  num_players_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_StatsSkipState::~CUserMsg_StatsSkipState() {
  SharedDtor();
}

void CUserMsg_StatsSkipState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_StatsSkipState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_StatsSkipState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_StatsSkipState_descriptor_;
}

const CUserMsg_StatsSkipState& CUserMsg_StatsSkipState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_StatsSkipState* CUserMsg_StatsSkipState::default_instance_ = NULL;

CUserMsg_StatsSkipState* CUserMsg_StatsSkipState::New() const {
  return new CUserMsg_StatsSkipState;
}

void CUserMsg_StatsSkipState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_skips_ = 0;
    num_players_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_StatsSkipState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num_skips = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_skips_)));
          set_has_num_skips();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_players;
        break;
      }
      
      // optional int32 num_players = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_players:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_players_)));
          set_has_num_players();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_StatsSkipState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num_skips = 1;
  if (has_num_skips()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_skips(), output);
  }
  
  // optional int32 num_players = 2;
  if (has_num_players()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num_players(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_StatsSkipState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num_skips = 1;
  if (has_num_skips()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_skips(), target);
  }
  
  // optional int32 num_players = 2;
  if (has_num_players()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num_players(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_StatsSkipState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num_skips = 1;
    if (has_num_skips()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_skips());
    }
    
    // optional int32 num_players = 2;
    if (has_num_players()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_players());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_StatsSkipState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_StatsSkipState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_StatsSkipState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_StatsSkipState::MergeFrom(const CUserMsg_StatsSkipState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_skips()) {
      set_num_skips(from.num_skips());
    }
    if (from.has_num_players()) {
      set_num_players(from.num_players());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_StatsSkipState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_StatsSkipState::CopyFrom(const CUserMsg_StatsSkipState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_StatsSkipState::IsInitialized() const {
  
  return true;
}

void CUserMsg_StatsSkipState::Swap(CUserMsg_StatsSkipState* other) {
  if (other != this) {
    std::swap(num_skips_, other->num_skips_);
    std::swap(num_players_, other->num_players_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_StatsSkipState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_StatsSkipState_descriptor_;
  metadata.reflection = CUserMsg_StatsSkipState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_VoiceSubtitle::kEntIndexFieldNumber;
const int CUserMsg_VoiceSubtitle::kMenuFieldNumber;
const int CUserMsg_VoiceSubtitle::kItemFieldNumber;
#endif  // !_MSC_VER

CUserMsg_VoiceSubtitle::CUserMsg_VoiceSubtitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_VoiceSubtitle::InitAsDefaultInstance() {
}

CUserMsg_VoiceSubtitle::CUserMsg_VoiceSubtitle(const CUserMsg_VoiceSubtitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_VoiceSubtitle::SharedCtor() {
  _cached_size_ = 0;
  ent_index_ = 0;
  menu_ = 0;
  item_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_VoiceSubtitle::~CUserMsg_VoiceSubtitle() {
  SharedDtor();
}

void CUserMsg_VoiceSubtitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_VoiceSubtitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_VoiceSubtitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_VoiceSubtitle_descriptor_;
}

const CUserMsg_VoiceSubtitle& CUserMsg_VoiceSubtitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_VoiceSubtitle* CUserMsg_VoiceSubtitle::default_instance_ = NULL;

CUserMsg_VoiceSubtitle* CUserMsg_VoiceSubtitle::New() const {
  return new CUserMsg_VoiceSubtitle;
}

void CUserMsg_VoiceSubtitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ent_index_ = 0;
    menu_ = 0;
    item_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_VoiceSubtitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ent_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_index_)));
          set_has_ent_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_menu;
        break;
      }
      
      // optional int32 menu = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_menu:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &menu_)));
          set_has_menu();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_item;
        break;
      }
      
      // optional int32 item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_)));
          set_has_item();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_VoiceSubtitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ent_index = 1;
  if (has_ent_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ent_index(), output);
  }
  
  // optional int32 menu = 2;
  if (has_menu()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->menu(), output);
  }
  
  // optional int32 item = 3;
  if (has_item()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_VoiceSubtitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ent_index = 1;
  if (has_ent_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ent_index(), target);
  }
  
  // optional int32 menu = 2;
  if (has_menu()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->menu(), target);
  }
  
  // optional int32 item = 3;
  if (has_item()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_VoiceSubtitle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ent_index = 1;
    if (has_ent_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_index());
    }
    
    // optional int32 menu = 2;
    if (has_menu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->menu());
    }
    
    // optional int32 item = 3;
    if (has_item()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_VoiceSubtitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_VoiceSubtitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_VoiceSubtitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_VoiceSubtitle::MergeFrom(const CUserMsg_VoiceSubtitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ent_index()) {
      set_ent_index(from.ent_index());
    }
    if (from.has_menu()) {
      set_menu(from.menu());
    }
    if (from.has_item()) {
      set_item(from.item());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_VoiceSubtitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_VoiceSubtitle::CopyFrom(const CUserMsg_VoiceSubtitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_VoiceSubtitle::IsInitialized() const {
  
  return true;
}

void CUserMsg_VoiceSubtitle::Swap(CUserMsg_VoiceSubtitle* other) {
  if (other != this) {
    std::swap(ent_index_, other->ent_index_);
    std::swap(menu_, other->menu_);
    std::swap(item_, other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_VoiceSubtitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_VoiceSubtitle_descriptor_;
  metadata.reflection = CUserMsg_VoiceSubtitle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_VGUIMenu_Keys::kNameFieldNumber;
const int CUserMsg_VGUIMenu_Keys::kValueFieldNumber;
#endif  // !_MSC_VER

CUserMsg_VGUIMenu_Keys::CUserMsg_VGUIMenu_Keys()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_VGUIMenu_Keys::InitAsDefaultInstance() {
}

CUserMsg_VGUIMenu_Keys::CUserMsg_VGUIMenu_Keys(const CUserMsg_VGUIMenu_Keys& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_VGUIMenu_Keys::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_VGUIMenu_Keys::~CUserMsg_VGUIMenu_Keys() {
  SharedDtor();
}

void CUserMsg_VGUIMenu_Keys::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void CUserMsg_VGUIMenu_Keys::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_VGUIMenu_Keys::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_VGUIMenu_Keys_descriptor_;
}

const CUserMsg_VGUIMenu_Keys& CUserMsg_VGUIMenu_Keys::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_VGUIMenu_Keys* CUserMsg_VGUIMenu_Keys::default_instance_ = NULL;

CUserMsg_VGUIMenu_Keys* CUserMsg_VGUIMenu_Keys::New() const {
  return new CUserMsg_VGUIMenu_Keys;
}

void CUserMsg_VGUIMenu_Keys::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_VGUIMenu_Keys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }
      
      // optional string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_VGUIMenu_Keys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_VGUIMenu_Keys::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_VGUIMenu_Keys::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_VGUIMenu_Keys::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_VGUIMenu_Keys* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_VGUIMenu_Keys*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_VGUIMenu_Keys::MergeFrom(const CUserMsg_VGUIMenu_Keys& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_VGUIMenu_Keys::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_VGUIMenu_Keys::CopyFrom(const CUserMsg_VGUIMenu_Keys& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_VGUIMenu_Keys::IsInitialized() const {
  
  return true;
}

void CUserMsg_VGUIMenu_Keys::Swap(CUserMsg_VGUIMenu_Keys* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_VGUIMenu_Keys::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_VGUIMenu_Keys_descriptor_;
  metadata.reflection = CUserMsg_VGUIMenu_Keys_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CUserMsg_VGUIMenu::kNameFieldNumber;
const int CUserMsg_VGUIMenu::kShowFieldNumber;
const int CUserMsg_VGUIMenu::kKeysFieldNumber;
#endif  // !_MSC_VER

CUserMsg_VGUIMenu::CUserMsg_VGUIMenu()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_VGUIMenu::InitAsDefaultInstance() {
}

CUserMsg_VGUIMenu::CUserMsg_VGUIMenu(const CUserMsg_VGUIMenu& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_VGUIMenu::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  show_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_VGUIMenu::~CUserMsg_VGUIMenu() {
  SharedDtor();
}

void CUserMsg_VGUIMenu::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CUserMsg_VGUIMenu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_VGUIMenu::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_VGUIMenu_descriptor_;
}

const CUserMsg_VGUIMenu& CUserMsg_VGUIMenu::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_VGUIMenu* CUserMsg_VGUIMenu::default_instance_ = NULL;

CUserMsg_VGUIMenu* CUserMsg_VGUIMenu::New() const {
  return new CUserMsg_VGUIMenu;
}

void CUserMsg_VGUIMenu::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    show_ = false;
  }
  keys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_VGUIMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_show;
        break;
      }
      
      // optional bool show = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_show:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
          set_has_show();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        break;
      }
      
      // repeated .CUserMsg_VGUIMenu.Keys keys = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_keys;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_VGUIMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // optional bool show = 2;
  if (has_show()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show(), output);
  }
  
  // repeated .CUserMsg_VGUIMenu.Keys keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->keys(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_VGUIMenu::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // optional bool show = 2;
  if (has_show()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show(), target);
  }
  
  // repeated .CUserMsg_VGUIMenu.Keys keys = 3;
  for (int i = 0; i < this->keys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->keys(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_VGUIMenu::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional bool show = 2;
    if (has_show()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated .CUserMsg_VGUIMenu.Keys keys = 3;
  total_size += 1 * this->keys_size();
  for (int i = 0; i < this->keys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keys(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_VGUIMenu::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_VGUIMenu* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_VGUIMenu*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_VGUIMenu::MergeFrom(const CUserMsg_VGUIMenu& from) {
  GOOGLE_CHECK_NE(&from, this);
  keys_.MergeFrom(from.keys_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_show()) {
      set_show(from.show());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_VGUIMenu::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_VGUIMenu::CopyFrom(const CUserMsg_VGUIMenu& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_VGUIMenu::IsInitialized() const {
  
  return true;
}

void CUserMsg_VGUIMenu::Swap(CUserMsg_VGUIMenu* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(show_, other->show_);
    keys_.Swap(&other->keys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_VGUIMenu::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_VGUIMenu_descriptor_;
  metadata.reflection = CUserMsg_VGUIMenu_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_Geiger::kRangeFieldNumber;
#endif  // !_MSC_VER

CUserMsg_Geiger::CUserMsg_Geiger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_Geiger::InitAsDefaultInstance() {
}

CUserMsg_Geiger::CUserMsg_Geiger(const CUserMsg_Geiger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_Geiger::SharedCtor() {
  _cached_size_ = 0;
  range_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_Geiger::~CUserMsg_Geiger() {
  SharedDtor();
}

void CUserMsg_Geiger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_Geiger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_Geiger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_Geiger_descriptor_;
}

const CUserMsg_Geiger& CUserMsg_Geiger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_Geiger* CUserMsg_Geiger::default_instance_ = NULL;

CUserMsg_Geiger* CUserMsg_Geiger::New() const {
  return new CUserMsg_Geiger;
}

void CUserMsg_Geiger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    range_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_Geiger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 range = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_Geiger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 range = 1;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->range(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_Geiger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 range = 1;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->range(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_Geiger::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 range = 1;
    if (has_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->range());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_Geiger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_Geiger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_Geiger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_Geiger::MergeFrom(const CUserMsg_Geiger& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_range()) {
      set_range(from.range());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_Geiger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_Geiger::CopyFrom(const CUserMsg_Geiger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_Geiger::IsInitialized() const {
  
  return true;
}

void CUserMsg_Geiger::Swap(CUserMsg_Geiger* other) {
  if (other != this) {
    std::swap(range_, other->range_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_Geiger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_Geiger_descriptor_;
  metadata.reflection = CUserMsg_Geiger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_Rumble::kIndexFieldNumber;
const int CUserMsg_Rumble::kDataFieldNumber;
const int CUserMsg_Rumble::kFlagsFieldNumber;
#endif  // !_MSC_VER

CUserMsg_Rumble::CUserMsg_Rumble()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_Rumble::InitAsDefaultInstance() {
}

CUserMsg_Rumble::CUserMsg_Rumble(const CUserMsg_Rumble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_Rumble::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  data_ = 0;
  flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_Rumble::~CUserMsg_Rumble() {
  SharedDtor();
}

void CUserMsg_Rumble::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_Rumble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_Rumble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_Rumble_descriptor_;
}

const CUserMsg_Rumble& CUserMsg_Rumble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_Rumble* CUserMsg_Rumble::default_instance_ = NULL;

CUserMsg_Rumble* CUserMsg_Rumble::New() const {
  return new CUserMsg_Rumble;
}

void CUserMsg_Rumble::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    data_ = 0;
    flags_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_Rumble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_data;
        break;
      }
      
      // optional int32 data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
          set_has_data();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flags;
        break;
      }
      
      // optional int32 flags = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
          set_has_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_Rumble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }
  
  // optional int32 data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data(), output);
  }
  
  // optional int32 flags = 3;
  if (has_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_Rumble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }
  
  // optional int32 data = 2;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data(), target);
  }
  
  // optional int32 flags = 3;
  if (has_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_Rumble::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // optional int32 data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }
    
    // optional int32 flags = 3;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_Rumble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_Rumble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_Rumble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_Rumble::MergeFrom(const CUserMsg_Rumble& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_flags()) {
      set_flags(from.flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_Rumble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_Rumble::CopyFrom(const CUserMsg_Rumble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_Rumble::IsInitialized() const {
  
  return true;
}

void CUserMsg_Rumble::Swap(CUserMsg_Rumble* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(data_, other->data_);
    std::swap(flags_, other->flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_Rumble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_Rumble_descriptor_;
  metadata.reflection = CUserMsg_Rumble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_Train::kTrainFieldNumber;
#endif  // !_MSC_VER

CUserMsg_Train::CUserMsg_Train()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_Train::InitAsDefaultInstance() {
}

CUserMsg_Train::CUserMsg_Train(const CUserMsg_Train& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_Train::SharedCtor() {
  _cached_size_ = 0;
  train_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_Train::~CUserMsg_Train() {
  SharedDtor();
}

void CUserMsg_Train::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CUserMsg_Train::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_Train::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_Train_descriptor_;
}

const CUserMsg_Train& CUserMsg_Train::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_Train* CUserMsg_Train::default_instance_ = NULL;

CUserMsg_Train* CUserMsg_Train::New() const {
  return new CUserMsg_Train;
}

void CUserMsg_Train::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    train_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_Train::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 train = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &train_)));
          set_has_train();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_Train::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 train = 1;
  if (has_train()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->train(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_Train::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 train = 1;
  if (has_train()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->train(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_Train::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 train = 1;
    if (has_train()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->train());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_Train::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_Train* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_Train*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_Train::MergeFrom(const CUserMsg_Train& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_train()) {
      set_train(from.train());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_Train::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_Train::CopyFrom(const CUserMsg_Train& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_Train::IsInitialized() const {
  
  return true;
}

void CUserMsg_Train::Swap(CUserMsg_Train* other) {
  if (other != this) {
    std::swap(train_, other->train_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_Train::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_Train_descriptor_;
  metadata.reflection = CUserMsg_Train_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_SayTextChannel::kPlayerFieldNumber;
const int CUserMsg_SayTextChannel::kChannelFieldNumber;
const int CUserMsg_SayTextChannel::kTextFieldNumber;
#endif  // !_MSC_VER

CUserMsg_SayTextChannel::CUserMsg_SayTextChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_SayTextChannel::InitAsDefaultInstance() {
}

CUserMsg_SayTextChannel::CUserMsg_SayTextChannel(const CUserMsg_SayTextChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_SayTextChannel::SharedCtor() {
  _cached_size_ = 0;
  player_ = 0;
  channel_ = 0;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_SayTextChannel::~CUserMsg_SayTextChannel() {
  SharedDtor();
}

void CUserMsg_SayTextChannel::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CUserMsg_SayTextChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_SayTextChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_SayTextChannel_descriptor_;
}

const CUserMsg_SayTextChannel& CUserMsg_SayTextChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_SayTextChannel* CUserMsg_SayTextChannel::default_instance_ = NULL;

CUserMsg_SayTextChannel* CUserMsg_SayTextChannel::New() const {
  return new CUserMsg_SayTextChannel;
}

void CUserMsg_SayTextChannel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_ = 0;
    channel_ = 0;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_SayTextChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
          set_has_player();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_channel;
        break;
      }
      
      // optional int32 channel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_channel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
          set_has_channel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_text;
        break;
      }
      
      // optional string text = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_SayTextChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 player = 1;
  if (has_player()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }
  
  // optional int32 channel = 2;
  if (has_channel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }
  
  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_SayTextChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 player = 1;
  if (has_player()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }
  
  // optional int32 channel = 2;
  if (has_channel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }
  
  // optional string text = 3;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_SayTextChannel::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 player = 1;
    if (has_player()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }
    
    // optional int32 channel = 2;
    if (has_channel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }
    
    // optional string text = 3;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_SayTextChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_SayTextChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_SayTextChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_SayTextChannel::MergeFrom(const CUserMsg_SayTextChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player()) {
      set_player(from.player());
    }
    if (from.has_channel()) {
      set_channel(from.channel());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_SayTextChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_SayTextChannel::CopyFrom(const CUserMsg_SayTextChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_SayTextChannel::IsInitialized() const {
  
  return true;
}

void CUserMsg_SayTextChannel::Swap(CUserMsg_SayTextChannel* other) {
  if (other != this) {
    std::swap(player_, other->player_);
    std::swap(channel_, other->channel_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_SayTextChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_SayTextChannel_descriptor_;
  metadata.reflection = CUserMsg_SayTextChannel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CUserMsg_MessageText::kColorFieldNumber;
const int CUserMsg_MessageText::kTextFieldNumber;
#endif  // !_MSC_VER

CUserMsg_MessageText::CUserMsg_MessageText()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CUserMsg_MessageText::InitAsDefaultInstance() {
}

CUserMsg_MessageText::CUserMsg_MessageText(const CUserMsg_MessageText& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CUserMsg_MessageText::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0u;
  text_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CUserMsg_MessageText::~CUserMsg_MessageText() {
  SharedDtor();
}

void CUserMsg_MessageText::SharedDtor() {
  if (text_ != &::google::protobuf::internal::kEmptyString) {
    delete text_;
  }
  if (this != default_instance_) {
  }
}

void CUserMsg_MessageText::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CUserMsg_MessageText::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CUserMsg_MessageText_descriptor_;
}

const CUserMsg_MessageText& CUserMsg_MessageText::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_usermessages_2eproto();  return *default_instance_;
}

CUserMsg_MessageText* CUserMsg_MessageText::default_instance_ = NULL;

CUserMsg_MessageText* CUserMsg_MessageText::New() const {
  return new CUserMsg_MessageText;
}

void CUserMsg_MessageText::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    color_ = 0u;
    if (has_text()) {
      if (text_ != &::google::protobuf::internal::kEmptyString) {
        text_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CUserMsg_MessageText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 color = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_text;
        break;
      }
      
      // optional string text = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_text:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->text().data(), this->text().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CUserMsg_MessageText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }
  
  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->text(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CUserMsg_MessageText::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->color(), target);
  }
  
  // optional string text = 2;
  if (has_text()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->text().data(), this->text().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CUserMsg_MessageText::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }
    
    // optional string text = 2;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CUserMsg_MessageText::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CUserMsg_MessageText* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CUserMsg_MessageText*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CUserMsg_MessageText::MergeFrom(const CUserMsg_MessageText& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_text()) {
      set_text(from.text());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CUserMsg_MessageText::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_MessageText::CopyFrom(const CUserMsg_MessageText& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_MessageText::IsInitialized() const {
  
  return true;
}

void CUserMsg_MessageText::Swap(CUserMsg_MessageText* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(text_, other->text_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CUserMsg_MessageText::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CUserMsg_MessageText_descriptor_;
  metadata.reflection = CUserMsg_MessageText_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
