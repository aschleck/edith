// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "demo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CDemoFileHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoFileHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGameInfo_CDotaGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo_CPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CGameInfo_CDotaGameInfo_CPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoFileInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoFileInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoFullPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoFullPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoSyncTick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoSyncTick_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoConsoleCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoConsoleCmd_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoSendTables_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoSendTables_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoClassInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoClassInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoClassInfo_class_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoClassInfo_class_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoCustomData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoCustomData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoCustomDataCallbacks_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoCustomDataCallbacks_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoStringTables_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoStringTables_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoStringTables_items_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoStringTables_items_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoStringTables_table_t_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoStringTables_table_t_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoStop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoStop_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDemoUserCmd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDemoUserCmd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EDemoCommands_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_demo_2eproto() {
  protobuf_AddDesc_demo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "demo.proto");
  GOOGLE_CHECK(file != NULL);
  CDemoFileHeader_descriptor_ = file->message_type(0);
  static const int CDemoFileHeader_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, demo_file_stamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, network_protocol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, server_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, client_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, map_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, game_directory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, fullpackets_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, allow_clientside_entities_),
  };
  CDemoFileHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoFileHeader_descriptor_,
      CDemoFileHeader::default_instance_,
      CDemoFileHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoFileHeader));
  CGameInfo_descriptor_ = file->message_type(1);
  static const int CGameInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo, dota_),
  };
  CGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGameInfo_descriptor_,
      CGameInfo::default_instance_,
      CGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGameInfo));
  CGameInfo_CDotaGameInfo_descriptor_ = CGameInfo_descriptor_->nested_type(0);
  static const int CGameInfo_CDotaGameInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, match_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, game_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, game_winner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, player_info_),
  };
  CGameInfo_CDotaGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGameInfo_CDotaGameInfo_descriptor_,
      CGameInfo_CDotaGameInfo::default_instance_,
      CGameInfo_CDotaGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGameInfo_CDotaGameInfo));
  CGameInfo_CDotaGameInfo_CPlayerInfo_descriptor_ = CGameInfo_CDotaGameInfo_descriptor_->nested_type(0);
  static const int CGameInfo_CDotaGameInfo_CPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, hero_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, player_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, is_fake_client_),
  };
  CGameInfo_CDotaGameInfo_CPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CGameInfo_CDotaGameInfo_CPlayerInfo_descriptor_,
      CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance_,
      CGameInfo_CDotaGameInfo_CPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CGameInfo_CDotaGameInfo_CPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CGameInfo_CDotaGameInfo_CPlayerInfo));
  CDemoFileInfo_descriptor_ = file->message_type(2);
  static const int CDemoFileInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, playback_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, playback_ticks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, playback_frames_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, game_info_),
  };
  CDemoFileInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoFileInfo_descriptor_,
      CDemoFileInfo::default_instance_,
      CDemoFileInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFileInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoFileInfo));
  CDemoPacket_descriptor_ = file->message_type(3);
  static const int CDemoPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, sequence_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, sequence_out_ack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, data_),
  };
  CDemoPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoPacket_descriptor_,
      CDemoPacket::default_instance_,
      CDemoPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoPacket));
  CDemoFullPacket_descriptor_ = file->message_type(4);
  static const int CDemoFullPacket_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFullPacket, string_table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFullPacket, packet_),
  };
  CDemoFullPacket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoFullPacket_descriptor_,
      CDemoFullPacket::default_instance_,
      CDemoFullPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFullPacket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoFullPacket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoFullPacket));
  CDemoSyncTick_descriptor_ = file->message_type(5);
  static const int CDemoSyncTick_offsets_[1] = {
  };
  CDemoSyncTick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoSyncTick_descriptor_,
      CDemoSyncTick::default_instance_,
      CDemoSyncTick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSyncTick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSyncTick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoSyncTick));
  CDemoConsoleCmd_descriptor_ = file->message_type(6);
  static const int CDemoConsoleCmd_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoConsoleCmd, cmdstring_),
  };
  CDemoConsoleCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoConsoleCmd_descriptor_,
      CDemoConsoleCmd::default_instance_,
      CDemoConsoleCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoConsoleCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoConsoleCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoConsoleCmd));
  CDemoSendTables_descriptor_ = file->message_type(7);
  static const int CDemoSendTables_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSendTables, data_),
  };
  CDemoSendTables_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoSendTables_descriptor_,
      CDemoSendTables::default_instance_,
      CDemoSendTables_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSendTables, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoSendTables, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoSendTables));
  CDemoClassInfo_descriptor_ = file->message_type(8);
  static const int CDemoClassInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo, classes_),
  };
  CDemoClassInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoClassInfo_descriptor_,
      CDemoClassInfo::default_instance_,
      CDemoClassInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoClassInfo));
  CDemoClassInfo_class_t_descriptor_ = CDemoClassInfo_descriptor_->nested_type(0);
  static const int CDemoClassInfo_class_t_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, class_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, network_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, table_name_),
  };
  CDemoClassInfo_class_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoClassInfo_class_t_descriptor_,
      CDemoClassInfo_class_t::default_instance_,
      CDemoClassInfo_class_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoClassInfo_class_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoClassInfo_class_t));
  CDemoCustomData_descriptor_ = file->message_type(9);
  static const int CDemoCustomData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomData, callback_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomData, data_),
  };
  CDemoCustomData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoCustomData_descriptor_,
      CDemoCustomData::default_instance_,
      CDemoCustomData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoCustomData));
  CDemoCustomDataCallbacks_descriptor_ = file->message_type(10);
  static const int CDemoCustomDataCallbacks_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomDataCallbacks, save_id_),
  };
  CDemoCustomDataCallbacks_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoCustomDataCallbacks_descriptor_,
      CDemoCustomDataCallbacks::default_instance_,
      CDemoCustomDataCallbacks_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomDataCallbacks, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoCustomDataCallbacks, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoCustomDataCallbacks));
  CDemoStringTables_descriptor_ = file->message_type(11);
  static const int CDemoStringTables_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables, tables_),
  };
  CDemoStringTables_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoStringTables_descriptor_,
      CDemoStringTables::default_instance_,
      CDemoStringTables_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoStringTables));
  CDemoStringTables_items_t_descriptor_ = CDemoStringTables_descriptor_->nested_type(0);
  static const int CDemoStringTables_items_t_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_items_t, str_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_items_t, data_),
  };
  CDemoStringTables_items_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoStringTables_items_t_descriptor_,
      CDemoStringTables_items_t::default_instance_,
      CDemoStringTables_items_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_items_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_items_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoStringTables_items_t));
  CDemoStringTables_table_t_descriptor_ = CDemoStringTables_descriptor_->nested_type(1);
  static const int CDemoStringTables_table_t_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, table_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, items_clientside_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, table_flags_),
  };
  CDemoStringTables_table_t_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoStringTables_table_t_descriptor_,
      CDemoStringTables_table_t::default_instance_,
      CDemoStringTables_table_t_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStringTables_table_t, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoStringTables_table_t));
  CDemoStop_descriptor_ = file->message_type(12);
  static const int CDemoStop_offsets_[1] = {
  };
  CDemoStop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoStop_descriptor_,
      CDemoStop::default_instance_,
      CDemoStop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoStop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoStop));
  CDemoUserCmd_descriptor_ = file->message_type(13);
  static const int CDemoUserCmd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoUserCmd, cmd_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoUserCmd, data_),
  };
  CDemoUserCmd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDemoUserCmd_descriptor_,
      CDemoUserCmd::default_instance_,
      CDemoUserCmd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoUserCmd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDemoUserCmd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDemoUserCmd));
  EDemoCommands_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_demo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoFileHeader_descriptor_, &CDemoFileHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGameInfo_descriptor_, &CGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGameInfo_CDotaGameInfo_descriptor_, &CGameInfo_CDotaGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CGameInfo_CDotaGameInfo_CPlayerInfo_descriptor_, &CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoFileInfo_descriptor_, &CDemoFileInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoPacket_descriptor_, &CDemoPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoFullPacket_descriptor_, &CDemoFullPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoSyncTick_descriptor_, &CDemoSyncTick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoConsoleCmd_descriptor_, &CDemoConsoleCmd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoSendTables_descriptor_, &CDemoSendTables::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoClassInfo_descriptor_, &CDemoClassInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoClassInfo_class_t_descriptor_, &CDemoClassInfo_class_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoCustomData_descriptor_, &CDemoCustomData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoCustomDataCallbacks_descriptor_, &CDemoCustomDataCallbacks::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoStringTables_descriptor_, &CDemoStringTables::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoStringTables_items_t_descriptor_, &CDemoStringTables_items_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoStringTables_table_t_descriptor_, &CDemoStringTables_table_t::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoStop_descriptor_, &CDemoStop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDemoUserCmd_descriptor_, &CDemoUserCmd::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_demo_2eproto() {
  delete CDemoFileHeader::default_instance_;
  delete CDemoFileHeader_reflection_;
  delete CGameInfo::default_instance_;
  delete CGameInfo_reflection_;
  delete CGameInfo_CDotaGameInfo::default_instance_;
  delete CGameInfo_CDotaGameInfo_reflection_;
  delete CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance_;
  delete CGameInfo_CDotaGameInfo_CPlayerInfo_reflection_;
  delete CDemoFileInfo::default_instance_;
  delete CDemoFileInfo_reflection_;
  delete CDemoPacket::default_instance_;
  delete CDemoPacket_reflection_;
  delete CDemoFullPacket::default_instance_;
  delete CDemoFullPacket_reflection_;
  delete CDemoSyncTick::default_instance_;
  delete CDemoSyncTick_reflection_;
  delete CDemoConsoleCmd::default_instance_;
  delete CDemoConsoleCmd_reflection_;
  delete CDemoSendTables::default_instance_;
  delete CDemoSendTables_reflection_;
  delete CDemoClassInfo::default_instance_;
  delete CDemoClassInfo_reflection_;
  delete CDemoClassInfo_class_t::default_instance_;
  delete CDemoClassInfo_class_t_reflection_;
  delete CDemoCustomData::default_instance_;
  delete CDemoCustomData_reflection_;
  delete CDemoCustomDataCallbacks::default_instance_;
  delete CDemoCustomDataCallbacks_reflection_;
  delete CDemoStringTables::default_instance_;
  delete CDemoStringTables_reflection_;
  delete CDemoStringTables_items_t::default_instance_;
  delete CDemoStringTables_items_t_reflection_;
  delete CDemoStringTables_table_t::default_instance_;
  delete CDemoStringTables_table_t_reflection_;
  delete CDemoStop::default_instance_;
  delete CDemoStop_reflection_;
  delete CDemoUserCmd::default_instance_;
  delete CDemoUserCmd_reflection_;
}

void protobuf_AddDesc_demo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ndemo.proto\032 google/protobuf/descriptor"
    ".proto\"\330\001\n\017CDemoFileHeader\022\027\n\017demo_file_"
    "stamp\030\001 \002(\t\022\030\n\020network_protocol\030\002 \001(\005\022\023\n"
    "\013server_name\030\003 \001(\t\022\023\n\013client_name\030\004 \001(\t\022"
    "\020\n\010map_name\030\005 \001(\t\022\026\n\016game_directory\030\006 \001("
    "\t\022\033\n\023fullpackets_version\030\007 \001(\005\022!\n\031allow_"
    "clientside_entities\030\010 \001(\010\"\211\002\n\tCGameInfo\022"
    "&\n\004dota\030\004 \001(\0132\030.CGameInfo.CDotaGameInfo\032"
    "\323\001\n\rCDotaGameInfo\022\020\n\010match_id\030\001 \001(\r\022\021\n\tg"
    "ame_mode\030\002 \001(\005\022\023\n\013game_winner\030\003 \001(\005\0229\n\013p"
    "layer_info\030\004 \003(\0132$.CGameInfo.CDotaGameIn"
    "fo.CPlayerInfo\032M\n\013CPlayerInfo\022\021\n\thero_na"
    "me\030\001 \001(\t\022\023\n\013player_name\030\002 \001(\t\022\026\n\016is_fake"
    "_client\030\003 \001(\010\"v\n\rCDemoFileInfo\022\025\n\rplayba"
    "ck_time\030\001 \001(\002\022\026\n\016playback_ticks\030\002 \001(\005\022\027\n"
    "\017playback_frames\030\003 \001(\005\022\035\n\tgame_info\030\004 \001("
    "\0132\n.CGameInfo\"J\n\013CDemoPacket\022\023\n\013sequence"
    "_in\030\001 \001(\005\022\030\n\020sequence_out_ack\030\002 \001(\005\022\014\n\004d"
    "ata\030\003 \001(\014\"Y\n\017CDemoFullPacket\022(\n\014string_t"
    "able\030\001 \001(\0132\022.CDemoStringTables\022\034\n\006packet"
    "\030\002 \001(\0132\014.CDemoPacket\"\017\n\rCDemoSyncTick\"$\n"
    "\017CDemoConsoleCmd\022\021\n\tcmdstring\030\001 \001(\t\"\037\n\017C"
    "DemoSendTables\022\014\n\004data\030\001 \001(\014\"\201\001\n\016CDemoCl"
    "assInfo\022(\n\007classes\030\001 \003(\0132\027.CDemoClassInf"
    "o.class_t\032E\n\007class_t\022\020\n\010class_id\030\001 \001(\005\022\024"
    "\n\014network_name\030\002 \001(\t\022\022\n\ntable_name\030\003 \001(\t"
    "\"7\n\017CDemoCustomData\022\026\n\016callback_index\030\001 "
    "\001(\005\022\014\n\004data\030\002 \001(\014\"+\n\030CDemoCustomDataCall"
    "backs\022\017\n\007save_id\030\001 \003(\t\"\373\001\n\021CDemoStringTa"
    "bles\022*\n\006tables\030\001 \003(\0132\032.CDemoStringTables"
    ".table_t\032$\n\007items_t\022\013\n\003str\030\001 \001(\t\022\014\n\004data"
    "\030\002 \001(\014\032\223\001\n\007table_t\022\022\n\ntable_name\030\001 \001(\t\022)"
    "\n\005items\030\002 \003(\0132\032.CDemoStringTables.items_"
    "t\0224\n\020items_clientside\030\003 \003(\0132\032.CDemoStrin"
    "gTables.items_t\022\023\n\013table_flags\030\004 \001(\005\"\013\n\t"
    "CDemoStop\"0\n\014CDemoUserCmd\022\022\n\ncmd_number\030"
    "\001 \001(\005\022\014\n\004data\030\002 \001(\014*\335\002\n\rEDemoCommands\022\026\n"
    "\tDEM_Error\020\377\377\377\377\377\377\377\377\377\001\022\014\n\010DEM_Stop\020\000\022\022\n\016D"
    "EM_FileHeader\020\001\022\020\n\014DEM_FileInfo\020\002\022\020\n\014DEM"
    "_SyncTick\020\003\022\022\n\016DEM_SendTables\020\004\022\021\n\rDEM_C"
    "lassInfo\020\005\022\024\n\020DEM_StringTables\020\006\022\016\n\nDEM_"
    "Packet\020\007\022\024\n\020DEM_SignonPacket\020\010\022\022\n\016DEM_Co"
    "nsoleCmd\020\t\022\022\n\016DEM_CustomData\020\n\022\033\n\027DEM_Cu"
    "stomDataCallbacks\020\013\022\017\n\013DEM_UserCmd\020\014\022\022\n\016"
    "DEM_FullPacket\020\r\022\013\n\007DEM_Max\020\016\022\024\n\020DEM_IsC"
    "ompressed\020pB\003\200\001\000", 1816);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "demo.proto", &protobuf_RegisterTypes);
  CDemoFileHeader::default_instance_ = new CDemoFileHeader();
  CGameInfo::default_instance_ = new CGameInfo();
  CGameInfo_CDotaGameInfo::default_instance_ = new CGameInfo_CDotaGameInfo();
  CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance_ = new CGameInfo_CDotaGameInfo_CPlayerInfo();
  CDemoFileInfo::default_instance_ = new CDemoFileInfo();
  CDemoPacket::default_instance_ = new CDemoPacket();
  CDemoFullPacket::default_instance_ = new CDemoFullPacket();
  CDemoSyncTick::default_instance_ = new CDemoSyncTick();
  CDemoConsoleCmd::default_instance_ = new CDemoConsoleCmd();
  CDemoSendTables::default_instance_ = new CDemoSendTables();
  CDemoClassInfo::default_instance_ = new CDemoClassInfo();
  CDemoClassInfo_class_t::default_instance_ = new CDemoClassInfo_class_t();
  CDemoCustomData::default_instance_ = new CDemoCustomData();
  CDemoCustomDataCallbacks::default_instance_ = new CDemoCustomDataCallbacks();
  CDemoStringTables::default_instance_ = new CDemoStringTables();
  CDemoStringTables_items_t::default_instance_ = new CDemoStringTables_items_t();
  CDemoStringTables_table_t::default_instance_ = new CDemoStringTables_table_t();
  CDemoStop::default_instance_ = new CDemoStop();
  CDemoUserCmd::default_instance_ = new CDemoUserCmd();
  CDemoFileHeader::default_instance_->InitAsDefaultInstance();
  CGameInfo::default_instance_->InitAsDefaultInstance();
  CGameInfo_CDotaGameInfo::default_instance_->InitAsDefaultInstance();
  CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance_->InitAsDefaultInstance();
  CDemoFileInfo::default_instance_->InitAsDefaultInstance();
  CDemoPacket::default_instance_->InitAsDefaultInstance();
  CDemoFullPacket::default_instance_->InitAsDefaultInstance();
  CDemoSyncTick::default_instance_->InitAsDefaultInstance();
  CDemoConsoleCmd::default_instance_->InitAsDefaultInstance();
  CDemoSendTables::default_instance_->InitAsDefaultInstance();
  CDemoClassInfo::default_instance_->InitAsDefaultInstance();
  CDemoClassInfo_class_t::default_instance_->InitAsDefaultInstance();
  CDemoCustomData::default_instance_->InitAsDefaultInstance();
  CDemoCustomDataCallbacks::default_instance_->InitAsDefaultInstance();
  CDemoStringTables::default_instance_->InitAsDefaultInstance();
  CDemoStringTables_items_t::default_instance_->InitAsDefaultInstance();
  CDemoStringTables_table_t::default_instance_->InitAsDefaultInstance();
  CDemoStop::default_instance_->InitAsDefaultInstance();
  CDemoUserCmd::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_demo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_demo_2eproto {
  StaticDescriptorInitializer_demo_2eproto() {
    protobuf_AddDesc_demo_2eproto();
  }
} static_descriptor_initializer_demo_2eproto_;

const ::google::protobuf::EnumDescriptor* EDemoCommands_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EDemoCommands_descriptor_;
}
bool EDemoCommands_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 112:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CDemoFileHeader::kDemoFileStampFieldNumber;
const int CDemoFileHeader::kNetworkProtocolFieldNumber;
const int CDemoFileHeader::kServerNameFieldNumber;
const int CDemoFileHeader::kClientNameFieldNumber;
const int CDemoFileHeader::kMapNameFieldNumber;
const int CDemoFileHeader::kGameDirectoryFieldNumber;
const int CDemoFileHeader::kFullpacketsVersionFieldNumber;
const int CDemoFileHeader::kAllowClientsideEntitiesFieldNumber;
#endif  // !_MSC_VER

CDemoFileHeader::CDemoFileHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoFileHeader::InitAsDefaultInstance() {
}

CDemoFileHeader::CDemoFileHeader(const CDemoFileHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoFileHeader::SharedCtor() {
  _cached_size_ = 0;
  demo_file_stamp_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  network_protocol_ = 0;
  server_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  map_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  game_directory_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fullpackets_version_ = 0;
  allow_clientside_entities_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoFileHeader::~CDemoFileHeader() {
  SharedDtor();
}

void CDemoFileHeader::SharedDtor() {
  if (demo_file_stamp_ != &::google::protobuf::internal::kEmptyString) {
    delete demo_file_stamp_;
  }
  if (server_name_ != &::google::protobuf::internal::kEmptyString) {
    delete server_name_;
  }
  if (client_name_ != &::google::protobuf::internal::kEmptyString) {
    delete client_name_;
  }
  if (map_name_ != &::google::protobuf::internal::kEmptyString) {
    delete map_name_;
  }
  if (game_directory_ != &::google::protobuf::internal::kEmptyString) {
    delete game_directory_;
  }
  if (this != default_instance_) {
  }
}

void CDemoFileHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoFileHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoFileHeader_descriptor_;
}

const CDemoFileHeader& CDemoFileHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoFileHeader* CDemoFileHeader::default_instance_ = NULL;

CDemoFileHeader* CDemoFileHeader::New() const {
  return new CDemoFileHeader;
}

void CDemoFileHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_demo_file_stamp()) {
      if (demo_file_stamp_ != &::google::protobuf::internal::kEmptyString) {
        demo_file_stamp_->clear();
      }
    }
    network_protocol_ = 0;
    if (has_server_name()) {
      if (server_name_ != &::google::protobuf::internal::kEmptyString) {
        server_name_->clear();
      }
    }
    if (has_client_name()) {
      if (client_name_ != &::google::protobuf::internal::kEmptyString) {
        client_name_->clear();
      }
    }
    if (has_map_name()) {
      if (map_name_ != &::google::protobuf::internal::kEmptyString) {
        map_name_->clear();
      }
    }
    if (has_game_directory()) {
      if (game_directory_ != &::google::protobuf::internal::kEmptyString) {
        game_directory_->clear();
      }
    }
    fullpackets_version_ = 0;
    allow_clientside_entities_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoFileHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string demo_file_stamp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_demo_file_stamp()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->demo_file_stamp().data(), this->demo_file_stamp().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_network_protocol;
        break;
      }
      
      // optional int32 network_protocol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_network_protocol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &network_protocol_)));
          set_has_network_protocol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_server_name;
        break;
      }
      
      // optional string server_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_server_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->server_name().data(), this->server_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_client_name;
        break;
      }
      
      // optional string client_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_client_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->client_name().data(), this->client_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_map_name;
        break;
      }
      
      // optional string map_name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_map_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->map_name().data(), this->map_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_game_directory;
        break;
      }
      
      // optional string game_directory = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_directory:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_game_directory()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->game_directory().data(), this->game_directory().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fullpackets_version;
        break;
      }
      
      // optional int32 fullpackets_version = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fullpackets_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fullpackets_version_)));
          set_has_fullpackets_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_allow_clientside_entities;
        break;
      }
      
      // optional bool allow_clientside_entities = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allow_clientside_entities:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_clientside_entities_)));
          set_has_allow_clientside_entities();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoFileHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string demo_file_stamp = 1;
  if (has_demo_file_stamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->demo_file_stamp().data(), this->demo_file_stamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->demo_file_stamp(), output);
  }
  
  // optional int32 network_protocol = 2;
  if (has_network_protocol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->network_protocol(), output);
  }
  
  // optional string server_name = 3;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->server_name(), output);
  }
  
  // optional string client_name = 4;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->client_name(), output);
  }
  
  // optional string map_name = 5;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->map_name(), output);
  }
  
  // optional string game_directory = 6;
  if (has_game_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_directory().data(), this->game_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->game_directory(), output);
  }
  
  // optional int32 fullpackets_version = 7;
  if (has_fullpackets_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fullpackets_version(), output);
  }
  
  // optional bool allow_clientside_entities = 8;
  if (has_allow_clientside_entities()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->allow_clientside_entities(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoFileHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string demo_file_stamp = 1;
  if (has_demo_file_stamp()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->demo_file_stamp().data(), this->demo_file_stamp().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->demo_file_stamp(), target);
  }
  
  // optional int32 network_protocol = 2;
  if (has_network_protocol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->network_protocol(), target);
  }
  
  // optional string server_name = 3;
  if (has_server_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->server_name().data(), this->server_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->server_name(), target);
  }
  
  // optional string client_name = 4;
  if (has_client_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->client_name().data(), this->client_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client_name(), target);
  }
  
  // optional string map_name = 5;
  if (has_map_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->map_name().data(), this->map_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->map_name(), target);
  }
  
  // optional string game_directory = 6;
  if (has_game_directory()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->game_directory().data(), this->game_directory().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->game_directory(), target);
  }
  
  // optional int32 fullpackets_version = 7;
  if (has_fullpackets_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fullpackets_version(), target);
  }
  
  // optional bool allow_clientside_entities = 8;
  if (has_allow_clientside_entities()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->allow_clientside_entities(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoFileHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string demo_file_stamp = 1;
    if (has_demo_file_stamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->demo_file_stamp());
    }
    
    // optional int32 network_protocol = 2;
    if (has_network_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->network_protocol());
    }
    
    // optional string server_name = 3;
    if (has_server_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->server_name());
    }
    
    // optional string client_name = 4;
    if (has_client_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->client_name());
    }
    
    // optional string map_name = 5;
    if (has_map_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->map_name());
    }
    
    // optional string game_directory = 6;
    if (has_game_directory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->game_directory());
    }
    
    // optional int32 fullpackets_version = 7;
    if (has_fullpackets_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fullpackets_version());
    }
    
    // optional bool allow_clientside_entities = 8;
    if (has_allow_clientside_entities()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoFileHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoFileHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoFileHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoFileHeader::MergeFrom(const CDemoFileHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_demo_file_stamp()) {
      set_demo_file_stamp(from.demo_file_stamp());
    }
    if (from.has_network_protocol()) {
      set_network_protocol(from.network_protocol());
    }
    if (from.has_server_name()) {
      set_server_name(from.server_name());
    }
    if (from.has_client_name()) {
      set_client_name(from.client_name());
    }
    if (from.has_map_name()) {
      set_map_name(from.map_name());
    }
    if (from.has_game_directory()) {
      set_game_directory(from.game_directory());
    }
    if (from.has_fullpackets_version()) {
      set_fullpackets_version(from.fullpackets_version());
    }
    if (from.has_allow_clientside_entities()) {
      set_allow_clientside_entities(from.allow_clientside_entities());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoFileHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoFileHeader::CopyFrom(const CDemoFileHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoFileHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void CDemoFileHeader::Swap(CDemoFileHeader* other) {
  if (other != this) {
    std::swap(demo_file_stamp_, other->demo_file_stamp_);
    std::swap(network_protocol_, other->network_protocol_);
    std::swap(server_name_, other->server_name_);
    std::swap(client_name_, other->client_name_);
    std::swap(map_name_, other->map_name_);
    std::swap(game_directory_, other->game_directory_);
    std::swap(fullpackets_version_, other->fullpackets_version_);
    std::swap(allow_clientside_entities_, other->allow_clientside_entities_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoFileHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoFileHeader_descriptor_;
  metadata.reflection = CDemoFileHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kHeroNameFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kPlayerNameFieldNumber;
const int CGameInfo_CDotaGameInfo_CPlayerInfo::kIsFakeClientFieldNumber;
#endif  // !_MSC_VER

CGameInfo_CDotaGameInfo_CPlayerInfo::CGameInfo_CDotaGameInfo_CPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::InitAsDefaultInstance() {
}

CGameInfo_CDotaGameInfo_CPlayerInfo::CGameInfo_CDotaGameInfo_CPlayerInfo(const CGameInfo_CDotaGameInfo_CPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  hero_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  player_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_fake_client_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGameInfo_CDotaGameInfo_CPlayerInfo::~CGameInfo_CDotaGameInfo_CPlayerInfo() {
  SharedDtor();
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SharedDtor() {
  if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_name_;
  }
  if (player_name_ != &::google::protobuf::internal::kEmptyString) {
    delete player_name_;
  }
  if (this != default_instance_) {
  }
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo_CPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGameInfo_CDotaGameInfo_CPlayerInfo_descriptor_;
}

const CGameInfo_CDotaGameInfo_CPlayerInfo& CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo_CPlayerInfo::default_instance_ = NULL;

CGameInfo_CDotaGameInfo_CPlayerInfo* CGameInfo_CDotaGameInfo_CPlayerInfo::New() const {
  return new CGameInfo_CDotaGameInfo_CPlayerInfo;
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_hero_name()) {
      if (hero_name_ != &::google::protobuf::internal::kEmptyString) {
        hero_name_->clear();
      }
    }
    if (has_player_name()) {
      if (player_name_ != &::google::protobuf::internal::kEmptyString) {
        player_name_->clear();
      }
    }
    is_fake_client_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGameInfo_CDotaGameInfo_CPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string hero_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hero_name().data(), this->hero_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_player_name;
        break;
      }
      
      // optional string player_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_player_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->player_name().data(), this->player_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_is_fake_client;
        break;
      }
      
      // optional bool is_fake_client = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_fake_client:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_fake_client_)));
          set_has_is_fake_client();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string hero_name = 1;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->hero_name(), output);
  }
  
  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->player_name(), output);
  }
  
  // optional bool is_fake_client = 3;
  if (has_is_fake_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_fake_client(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGameInfo_CDotaGameInfo_CPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string hero_name = 1;
  if (has_hero_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_name().data(), this->hero_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hero_name(), target);
  }
  
  // optional string player_name = 2;
  if (has_player_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->player_name().data(), this->player_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->player_name(), target);
  }
  
  // optional bool is_fake_client = 3;
  if (has_is_fake_client()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_fake_client(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGameInfo_CDotaGameInfo_CPlayerInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string hero_name = 1;
    if (has_hero_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_name());
    }
    
    // optional string player_name = 2;
    if (has_player_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->player_name());
    }
    
    // optional bool is_fake_client = 3;
    if (has_is_fake_client()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGameInfo_CDotaGameInfo_CPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGameInfo_CDotaGameInfo_CPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::MergeFrom(const CGameInfo_CDotaGameInfo_CPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hero_name()) {
      set_hero_name(from.hero_name());
    }
    if (from.has_player_name()) {
      set_player_name(from.player_name());
    }
    if (from.has_is_fake_client()) {
      set_is_fake_client(from.is_fake_client());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::CopyFrom(const CGameInfo_CDotaGameInfo_CPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo_CDotaGameInfo_CPlayerInfo::IsInitialized() const {
  
  return true;
}

void CGameInfo_CDotaGameInfo_CPlayerInfo::Swap(CGameInfo_CDotaGameInfo_CPlayerInfo* other) {
  if (other != this) {
    std::swap(hero_name_, other->hero_name_);
    std::swap(player_name_, other->player_name_);
    std::swap(is_fake_client_, other->is_fake_client_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGameInfo_CDotaGameInfo_CPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGameInfo_CDotaGameInfo_CPlayerInfo_descriptor_;
  metadata.reflection = CGameInfo_CDotaGameInfo_CPlayerInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGameInfo_CDotaGameInfo::kMatchIdFieldNumber;
const int CGameInfo_CDotaGameInfo::kGameModeFieldNumber;
const int CGameInfo_CDotaGameInfo::kGameWinnerFieldNumber;
const int CGameInfo_CDotaGameInfo::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

CGameInfo_CDotaGameInfo::CGameInfo_CDotaGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGameInfo_CDotaGameInfo::InitAsDefaultInstance() {
}

CGameInfo_CDotaGameInfo::CGameInfo_CDotaGameInfo(const CGameInfo_CDotaGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo::SharedCtor() {
  _cached_size_ = 0;
  match_id_ = 0u;
  game_mode_ = 0;
  game_winner_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGameInfo_CDotaGameInfo::~CGameInfo_CDotaGameInfo() {
  SharedDtor();
}

void CGameInfo_CDotaGameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CGameInfo_CDotaGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameInfo_CDotaGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGameInfo_CDotaGameInfo_descriptor_;
}

const CGameInfo_CDotaGameInfo& CGameInfo_CDotaGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CGameInfo_CDotaGameInfo* CGameInfo_CDotaGameInfo::default_instance_ = NULL;

CGameInfo_CDotaGameInfo* CGameInfo_CDotaGameInfo::New() const {
  return new CGameInfo_CDotaGameInfo;
}

void CGameInfo_CDotaGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    match_id_ = 0u;
    game_mode_ = 0;
    game_winner_ = 0;
  }
  player_info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGameInfo_CDotaGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 match_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_id_)));
          set_has_match_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_game_mode;
        break;
      }
      
      // optional int32 game_mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_mode_)));
          set_has_game_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_game_winner;
        break;
      }
      
      // optional int32 game_winner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_game_winner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_winner_)));
          set_has_game_winner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_info;
        break;
      }
      
      // repeated .CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGameInfo_CDotaGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 match_id = 1;
  if (has_match_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->match_id(), output);
  }
  
  // optional int32 game_mode = 2;
  if (has_game_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->game_mode(), output);
  }
  
  // optional int32 game_winner = 3;
  if (has_game_winner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->game_winner(), output);
  }
  
  // repeated .CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  for (int i = 0; i < this->player_info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGameInfo_CDotaGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 match_id = 1;
  if (has_match_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->match_id(), target);
  }
  
  // optional int32 game_mode = 2;
  if (has_game_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->game_mode(), target);
  }
  
  // optional int32 game_winner = 3;
  if (has_game_winner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->game_winner(), target);
  }
  
  // repeated .CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  for (int i = 0; i < this->player_info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGameInfo_CDotaGameInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 match_id = 1;
    if (has_match_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_id());
    }
    
    // optional int32 game_mode = 2;
    if (has_game_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_mode());
    }
    
    // optional int32 game_winner = 3;
    if (has_game_winner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_winner());
    }
    
  }
  // repeated .CGameInfo.CDotaGameInfo.CPlayerInfo player_info = 4;
  total_size += 1 * this->player_info_size();
  for (int i = 0; i < this->player_info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameInfo_CDotaGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGameInfo_CDotaGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGameInfo_CDotaGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGameInfo_CDotaGameInfo::MergeFrom(const CGameInfo_CDotaGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_info_.MergeFrom(from.player_info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_match_id()) {
      set_match_id(from.match_id());
    }
    if (from.has_game_mode()) {
      set_game_mode(from.game_mode());
    }
    if (from.has_game_winner()) {
      set_game_winner(from.game_winner());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGameInfo_CDotaGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo_CDotaGameInfo::CopyFrom(const CGameInfo_CDotaGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo_CDotaGameInfo::IsInitialized() const {
  
  return true;
}

void CGameInfo_CDotaGameInfo::Swap(CGameInfo_CDotaGameInfo* other) {
  if (other != this) {
    std::swap(match_id_, other->match_id_);
    std::swap(game_mode_, other->game_mode_);
    std::swap(game_winner_, other->game_winner_);
    player_info_.Swap(&other->player_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGameInfo_CDotaGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGameInfo_CDotaGameInfo_descriptor_;
  metadata.reflection = CGameInfo_CDotaGameInfo_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CGameInfo::kDotaFieldNumber;
#endif  // !_MSC_VER

CGameInfo::CGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CGameInfo::InitAsDefaultInstance() {
  dota_ = const_cast< ::CGameInfo_CDotaGameInfo*>(&::CGameInfo_CDotaGameInfo::default_instance());
}

CGameInfo::CGameInfo(const CGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CGameInfo::SharedCtor() {
  _cached_size_ = 0;
  dota_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CGameInfo::~CGameInfo() {
  SharedDtor();
}

void CGameInfo::SharedDtor() {
  if (this != default_instance_) {
    delete dota_;
  }
}

void CGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CGameInfo_descriptor_;
}

const CGameInfo& CGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CGameInfo* CGameInfo::default_instance_ = NULL;

CGameInfo* CGameInfo::New() const {
  return new CGameInfo;
}

void CGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_dota()) {
      if (dota_ != NULL) dota_->::CGameInfo_CDotaGameInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CGameInfo.CDotaGameInfo dota = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dota()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CGameInfo.CDotaGameInfo dota = 4;
  if (has_dota()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dota(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CGameInfo.CDotaGameInfo dota = 4;
  if (has_dota()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dota(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CGameInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CGameInfo.CDotaGameInfo dota = 4;
    if (has_dota()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dota());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CGameInfo::MergeFrom(const CGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dota()) {
      mutable_dota()->::CGameInfo_CDotaGameInfo::MergeFrom(from.dota());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGameInfo::CopyFrom(const CGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGameInfo::IsInitialized() const {
  
  return true;
}

void CGameInfo::Swap(CGameInfo* other) {
  if (other != this) {
    std::swap(dota_, other->dota_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CGameInfo_descriptor_;
  metadata.reflection = CGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDemoFileInfo::kPlaybackTimeFieldNumber;
const int CDemoFileInfo::kPlaybackTicksFieldNumber;
const int CDemoFileInfo::kPlaybackFramesFieldNumber;
const int CDemoFileInfo::kGameInfoFieldNumber;
#endif  // !_MSC_VER

CDemoFileInfo::CDemoFileInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoFileInfo::InitAsDefaultInstance() {
  game_info_ = const_cast< ::CGameInfo*>(&::CGameInfo::default_instance());
}

CDemoFileInfo::CDemoFileInfo(const CDemoFileInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoFileInfo::SharedCtor() {
  _cached_size_ = 0;
  playback_time_ = 0;
  playback_ticks_ = 0;
  playback_frames_ = 0;
  game_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoFileInfo::~CDemoFileInfo() {
  SharedDtor();
}

void CDemoFileInfo::SharedDtor() {
  if (this != default_instance_) {
    delete game_info_;
  }
}

void CDemoFileInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoFileInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoFileInfo_descriptor_;
}

const CDemoFileInfo& CDemoFileInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoFileInfo* CDemoFileInfo::default_instance_ = NULL;

CDemoFileInfo* CDemoFileInfo::New() const {
  return new CDemoFileInfo;
}

void CDemoFileInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playback_time_ = 0;
    playback_ticks_ = 0;
    playback_frames_ = 0;
    if (has_game_info()) {
      if (game_info_ != NULL) game_info_->::CGameInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoFileInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float playback_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &playback_time_)));
          set_has_playback_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playback_ticks;
        break;
      }
      
      // optional int32 playback_ticks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playback_ticks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playback_ticks_)));
          set_has_playback_ticks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_playback_frames;
        break;
      }
      
      // optional int32 playback_frames = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playback_frames:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playback_frames_)));
          set_has_playback_frames();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_game_info;
        break;
      }
      
      // optional .CGameInfo game_info = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_game_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_game_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoFileInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float playback_time = 1;
  if (has_playback_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->playback_time(), output);
  }
  
  // optional int32 playback_ticks = 2;
  if (has_playback_ticks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playback_ticks(), output);
  }
  
  // optional int32 playback_frames = 3;
  if (has_playback_frames()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->playback_frames(), output);
  }
  
  // optional .CGameInfo game_info = 4;
  if (has_game_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->game_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoFileInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float playback_time = 1;
  if (has_playback_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->playback_time(), target);
  }
  
  // optional int32 playback_ticks = 2;
  if (has_playback_ticks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playback_ticks(), target);
  }
  
  // optional int32 playback_frames = 3;
  if (has_playback_frames()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->playback_frames(), target);
  }
  
  // optional .CGameInfo game_info = 4;
  if (has_game_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->game_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoFileInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float playback_time = 1;
    if (has_playback_time()) {
      total_size += 1 + 4;
    }
    
    // optional int32 playback_ticks = 2;
    if (has_playback_ticks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playback_ticks());
    }
    
    // optional int32 playback_frames = 3;
    if (has_playback_frames()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playback_frames());
    }
    
    // optional .CGameInfo game_info = 4;
    if (has_game_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->game_info());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoFileInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoFileInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoFileInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoFileInfo::MergeFrom(const CDemoFileInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playback_time()) {
      set_playback_time(from.playback_time());
    }
    if (from.has_playback_ticks()) {
      set_playback_ticks(from.playback_ticks());
    }
    if (from.has_playback_frames()) {
      set_playback_frames(from.playback_frames());
    }
    if (from.has_game_info()) {
      mutable_game_info()->::CGameInfo::MergeFrom(from.game_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoFileInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoFileInfo::CopyFrom(const CDemoFileInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoFileInfo::IsInitialized() const {
  
  return true;
}

void CDemoFileInfo::Swap(CDemoFileInfo* other) {
  if (other != this) {
    std::swap(playback_time_, other->playback_time_);
    std::swap(playback_ticks_, other->playback_ticks_);
    std::swap(playback_frames_, other->playback_frames_);
    std::swap(game_info_, other->game_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoFileInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoFileInfo_descriptor_;
  metadata.reflection = CDemoFileInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDemoPacket::kSequenceInFieldNumber;
const int CDemoPacket::kSequenceOutAckFieldNumber;
const int CDemoPacket::kDataFieldNumber;
#endif  // !_MSC_VER

CDemoPacket::CDemoPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoPacket::InitAsDefaultInstance() {
}

CDemoPacket::CDemoPacket(const CDemoPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoPacket::SharedCtor() {
  _cached_size_ = 0;
  sequence_in_ = 0;
  sequence_out_ack_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoPacket::~CDemoPacket() {
  SharedDtor();
}

void CDemoPacket::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CDemoPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoPacket_descriptor_;
}

const CDemoPacket& CDemoPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoPacket* CDemoPacket::default_instance_ = NULL;

CDemoPacket* CDemoPacket::New() const {
  return new CDemoPacket;
}

void CDemoPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sequence_in_ = 0;
    sequence_out_ack_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sequence_in = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_in_)));
          set_has_sequence_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sequence_out_ack;
        break;
      }
      
      // optional int32 sequence_out_ack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sequence_out_ack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequence_out_ack_)));
          set_has_sequence_out_ack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_data;
        break;
      }
      
      // optional bytes data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 sequence_in = 1;
  if (has_sequence_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sequence_in(), output);
  }
  
  // optional int32 sequence_out_ack = 2;
  if (has_sequence_out_ack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sequence_out_ack(), output);
  }
  
  // optional bytes data = 3;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 sequence_in = 1;
  if (has_sequence_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sequence_in(), target);
  }
  
  // optional int32 sequence_out_ack = 2;
  if (has_sequence_out_ack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sequence_out_ack(), target);
  }
  
  // optional bytes data = 3;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 sequence_in = 1;
    if (has_sequence_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_in());
    }
    
    // optional int32 sequence_out_ack = 2;
    if (has_sequence_out_ack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sequence_out_ack());
    }
    
    // optional bytes data = 3;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoPacket::MergeFrom(const CDemoPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence_in()) {
      set_sequence_in(from.sequence_in());
    }
    if (from.has_sequence_out_ack()) {
      set_sequence_out_ack(from.sequence_out_ack());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoPacket::CopyFrom(const CDemoPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoPacket::IsInitialized() const {
  
  return true;
}

void CDemoPacket::Swap(CDemoPacket* other) {
  if (other != this) {
    std::swap(sequence_in_, other->sequence_in_);
    std::swap(sequence_out_ack_, other->sequence_out_ack_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoPacket_descriptor_;
  metadata.reflection = CDemoPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDemoFullPacket::kStringTableFieldNumber;
const int CDemoFullPacket::kPacketFieldNumber;
#endif  // !_MSC_VER

CDemoFullPacket::CDemoFullPacket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoFullPacket::InitAsDefaultInstance() {
  string_table_ = const_cast< ::CDemoStringTables*>(&::CDemoStringTables::default_instance());
  packet_ = const_cast< ::CDemoPacket*>(&::CDemoPacket::default_instance());
}

CDemoFullPacket::CDemoFullPacket(const CDemoFullPacket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoFullPacket::SharedCtor() {
  _cached_size_ = 0;
  string_table_ = NULL;
  packet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoFullPacket::~CDemoFullPacket() {
  SharedDtor();
}

void CDemoFullPacket::SharedDtor() {
  if (this != default_instance_) {
    delete string_table_;
    delete packet_;
  }
}

void CDemoFullPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoFullPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoFullPacket_descriptor_;
}

const CDemoFullPacket& CDemoFullPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoFullPacket* CDemoFullPacket::default_instance_ = NULL;

CDemoFullPacket* CDemoFullPacket::New() const {
  return new CDemoFullPacket;
}

void CDemoFullPacket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_string_table()) {
      if (string_table_ != NULL) string_table_->::CDemoStringTables::Clear();
    }
    if (has_packet()) {
      if (packet_ != NULL) packet_->::CDemoPacket::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoFullPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CDemoStringTables string_table = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_table()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_packet;
        break;
      }
      
      // optional .CDemoPacket packet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_packet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoFullPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CDemoStringTables string_table = 1;
  if (has_string_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->string_table(), output);
  }
  
  // optional .CDemoPacket packet = 2;
  if (has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->packet(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoFullPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CDemoStringTables string_table = 1;
  if (has_string_table()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->string_table(), target);
  }
  
  // optional .CDemoPacket packet = 2;
  if (has_packet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->packet(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoFullPacket::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CDemoStringTables string_table = 1;
    if (has_string_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->string_table());
    }
    
    // optional .CDemoPacket packet = 2;
    if (has_packet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->packet());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoFullPacket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoFullPacket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoFullPacket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoFullPacket::MergeFrom(const CDemoFullPacket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_table()) {
      mutable_string_table()->::CDemoStringTables::MergeFrom(from.string_table());
    }
    if (from.has_packet()) {
      mutable_packet()->::CDemoPacket::MergeFrom(from.packet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoFullPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoFullPacket::CopyFrom(const CDemoFullPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoFullPacket::IsInitialized() const {
  
  return true;
}

void CDemoFullPacket::Swap(CDemoFullPacket* other) {
  if (other != this) {
    std::swap(string_table_, other->string_table_);
    std::swap(packet_, other->packet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoFullPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoFullPacket_descriptor_;
  metadata.reflection = CDemoFullPacket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDemoSyncTick::CDemoSyncTick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoSyncTick::InitAsDefaultInstance() {
}

CDemoSyncTick::CDemoSyncTick(const CDemoSyncTick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoSyncTick::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoSyncTick::~CDemoSyncTick() {
  SharedDtor();
}

void CDemoSyncTick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDemoSyncTick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoSyncTick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoSyncTick_descriptor_;
}

const CDemoSyncTick& CDemoSyncTick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoSyncTick* CDemoSyncTick::default_instance_ = NULL;

CDemoSyncTick* CDemoSyncTick::New() const {
  return new CDemoSyncTick;
}

void CDemoSyncTick::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoSyncTick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CDemoSyncTick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoSyncTick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoSyncTick::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoSyncTick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoSyncTick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoSyncTick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoSyncTick::MergeFrom(const CDemoSyncTick& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoSyncTick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSyncTick::CopyFrom(const CDemoSyncTick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSyncTick::IsInitialized() const {
  
  return true;
}

void CDemoSyncTick::Swap(CDemoSyncTick* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoSyncTick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoSyncTick_descriptor_;
  metadata.reflection = CDemoSyncTick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDemoConsoleCmd::kCmdstringFieldNumber;
#endif  // !_MSC_VER

CDemoConsoleCmd::CDemoConsoleCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoConsoleCmd::InitAsDefaultInstance() {
}

CDemoConsoleCmd::CDemoConsoleCmd(const CDemoConsoleCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoConsoleCmd::SharedCtor() {
  _cached_size_ = 0;
  cmdstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoConsoleCmd::~CDemoConsoleCmd() {
  SharedDtor();
}

void CDemoConsoleCmd::SharedDtor() {
  if (cmdstring_ != &::google::protobuf::internal::kEmptyString) {
    delete cmdstring_;
  }
  if (this != default_instance_) {
  }
}

void CDemoConsoleCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoConsoleCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoConsoleCmd_descriptor_;
}

const CDemoConsoleCmd& CDemoConsoleCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoConsoleCmd* CDemoConsoleCmd::default_instance_ = NULL;

CDemoConsoleCmd* CDemoConsoleCmd::New() const {
  return new CDemoConsoleCmd;
}

void CDemoConsoleCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmdstring()) {
      if (cmdstring_ != &::google::protobuf::internal::kEmptyString) {
        cmdstring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoConsoleCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cmdstring = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmdstring().data(), this->cmdstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoConsoleCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string cmdstring = 1;
  if (has_cmdstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmdstring().data(), this->cmdstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmdstring(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoConsoleCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string cmdstring = 1;
  if (has_cmdstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmdstring().data(), this->cmdstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmdstring(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoConsoleCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cmdstring = 1;
    if (has_cmdstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmdstring());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoConsoleCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoConsoleCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoConsoleCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoConsoleCmd::MergeFrom(const CDemoConsoleCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmdstring()) {
      set_cmdstring(from.cmdstring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoConsoleCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoConsoleCmd::CopyFrom(const CDemoConsoleCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoConsoleCmd::IsInitialized() const {
  
  return true;
}

void CDemoConsoleCmd::Swap(CDemoConsoleCmd* other) {
  if (other != this) {
    std::swap(cmdstring_, other->cmdstring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoConsoleCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoConsoleCmd_descriptor_;
  metadata.reflection = CDemoConsoleCmd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDemoSendTables::kDataFieldNumber;
#endif  // !_MSC_VER

CDemoSendTables::CDemoSendTables()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoSendTables::InitAsDefaultInstance() {
}

CDemoSendTables::CDemoSendTables(const CDemoSendTables& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoSendTables::SharedCtor() {
  _cached_size_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoSendTables::~CDemoSendTables() {
  SharedDtor();
}

void CDemoSendTables::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CDemoSendTables::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoSendTables::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoSendTables_descriptor_;
}

const CDemoSendTables& CDemoSendTables::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoSendTables* CDemoSendTables::default_instance_ = NULL;

CDemoSendTables* CDemoSendTables::New() const {
  return new CDemoSendTables;
}

void CDemoSendTables::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoSendTables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoSendTables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoSendTables::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes data = 1;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoSendTables::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoSendTables::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoSendTables* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoSendTables*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoSendTables::MergeFrom(const CDemoSendTables& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoSendTables::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoSendTables::CopyFrom(const CDemoSendTables& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoSendTables::IsInitialized() const {
  
  return true;
}

void CDemoSendTables::Swap(CDemoSendTables* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoSendTables::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoSendTables_descriptor_;
  metadata.reflection = CDemoSendTables_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDemoClassInfo_class_t::kClassIdFieldNumber;
const int CDemoClassInfo_class_t::kNetworkNameFieldNumber;
const int CDemoClassInfo_class_t::kTableNameFieldNumber;
#endif  // !_MSC_VER

CDemoClassInfo_class_t::CDemoClassInfo_class_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoClassInfo_class_t::InitAsDefaultInstance() {
}

CDemoClassInfo_class_t::CDemoClassInfo_class_t(const CDemoClassInfo_class_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoClassInfo_class_t::SharedCtor() {
  _cached_size_ = 0;
  class_id_ = 0;
  network_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoClassInfo_class_t::~CDemoClassInfo_class_t() {
  SharedDtor();
}

void CDemoClassInfo_class_t::SharedDtor() {
  if (network_name_ != &::google::protobuf::internal::kEmptyString) {
    delete network_name_;
  }
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void CDemoClassInfo_class_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoClassInfo_class_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoClassInfo_class_t_descriptor_;
}

const CDemoClassInfo_class_t& CDemoClassInfo_class_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoClassInfo_class_t* CDemoClassInfo_class_t::default_instance_ = NULL;

CDemoClassInfo_class_t* CDemoClassInfo_class_t::New() const {
  return new CDemoClassInfo_class_t;
}

void CDemoClassInfo_class_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    class_id_ = 0;
    if (has_network_name()) {
      if (network_name_ != &::google::protobuf::internal::kEmptyString) {
        network_name_->clear();
      }
    }
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoClassInfo_class_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 class_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_id_)));
          set_has_class_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_network_name;
        break;
      }
      
      // optional string network_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_network_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network_name().data(), this->network_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_table_name;
        break;
      }
      
      // optional string table_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_table_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoClassInfo_class_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 class_id = 1;
  if (has_class_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->class_id(), output);
  }
  
  // optional string network_name = 2;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->network_name(), output);
  }
  
  // optional string table_name = 3;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->table_name(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoClassInfo_class_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 class_id = 1;
  if (has_class_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->class_id(), target);
  }
  
  // optional string network_name = 2;
  if (has_network_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network_name().data(), this->network_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->network_name(), target);
  }
  
  // optional string table_name = 3;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table_name(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoClassInfo_class_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 class_id = 1;
    if (has_class_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_id());
    }
    
    // optional string network_name = 2;
    if (has_network_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->network_name());
    }
    
    // optional string table_name = 3;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoClassInfo_class_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoClassInfo_class_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoClassInfo_class_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoClassInfo_class_t::MergeFrom(const CDemoClassInfo_class_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_class_id()) {
      set_class_id(from.class_id());
    }
    if (from.has_network_name()) {
      set_network_name(from.network_name());
    }
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoClassInfo_class_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoClassInfo_class_t::CopyFrom(const CDemoClassInfo_class_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoClassInfo_class_t::IsInitialized() const {
  
  return true;
}

void CDemoClassInfo_class_t::Swap(CDemoClassInfo_class_t* other) {
  if (other != this) {
    std::swap(class_id_, other->class_id_);
    std::swap(network_name_, other->network_name_);
    std::swap(table_name_, other->table_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoClassInfo_class_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoClassInfo_class_t_descriptor_;
  metadata.reflection = CDemoClassInfo_class_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDemoClassInfo::kClassesFieldNumber;
#endif  // !_MSC_VER

CDemoClassInfo::CDemoClassInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoClassInfo::InitAsDefaultInstance() {
}

CDemoClassInfo::CDemoClassInfo(const CDemoClassInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoClassInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoClassInfo::~CDemoClassInfo() {
  SharedDtor();
}

void CDemoClassInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDemoClassInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoClassInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoClassInfo_descriptor_;
}

const CDemoClassInfo& CDemoClassInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoClassInfo* CDemoClassInfo::default_instance_ = NULL;

CDemoClassInfo* CDemoClassInfo::New() const {
  return new CDemoClassInfo;
}

void CDemoClassInfo::Clear() {
  classes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoClassInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDemoClassInfo.class_t classes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_classes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_classes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_classes;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoClassInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CDemoClassInfo.class_t classes = 1;
  for (int i = 0; i < this->classes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->classes(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoClassInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CDemoClassInfo.class_t classes = 1;
  for (int i = 0; i < this->classes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->classes(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoClassInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .CDemoClassInfo.class_t classes = 1;
  total_size += 1 * this->classes_size();
  for (int i = 0; i < this->classes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->classes(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoClassInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoClassInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoClassInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoClassInfo::MergeFrom(const CDemoClassInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  classes_.MergeFrom(from.classes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoClassInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoClassInfo::CopyFrom(const CDemoClassInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoClassInfo::IsInitialized() const {
  
  return true;
}

void CDemoClassInfo::Swap(CDemoClassInfo* other) {
  if (other != this) {
    classes_.Swap(&other->classes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoClassInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoClassInfo_descriptor_;
  metadata.reflection = CDemoClassInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDemoCustomData::kCallbackIndexFieldNumber;
const int CDemoCustomData::kDataFieldNumber;
#endif  // !_MSC_VER

CDemoCustomData::CDemoCustomData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoCustomData::InitAsDefaultInstance() {
}

CDemoCustomData::CDemoCustomData(const CDemoCustomData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoCustomData::SharedCtor() {
  _cached_size_ = 0;
  callback_index_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoCustomData::~CDemoCustomData() {
  SharedDtor();
}

void CDemoCustomData::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CDemoCustomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoCustomData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoCustomData_descriptor_;
}

const CDemoCustomData& CDemoCustomData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoCustomData* CDemoCustomData::default_instance_ = NULL;

CDemoCustomData* CDemoCustomData::New() const {
  return new CDemoCustomData;
}

void CDemoCustomData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    callback_index_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoCustomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 callback_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &callback_index_)));
          set_has_callback_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoCustomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 callback_index = 1;
  if (has_callback_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->callback_index(), output);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoCustomData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 callback_index = 1;
  if (has_callback_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->callback_index(), target);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoCustomData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 callback_index = 1;
    if (has_callback_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->callback_index());
    }
    
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoCustomData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoCustomData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoCustomData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoCustomData::MergeFrom(const CDemoCustomData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callback_index()) {
      set_callback_index(from.callback_index());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoCustomData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoCustomData::CopyFrom(const CDemoCustomData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoCustomData::IsInitialized() const {
  
  return true;
}

void CDemoCustomData::Swap(CDemoCustomData* other) {
  if (other != this) {
    std::swap(callback_index_, other->callback_index_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoCustomData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoCustomData_descriptor_;
  metadata.reflection = CDemoCustomData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDemoCustomDataCallbacks::kSaveIdFieldNumber;
#endif  // !_MSC_VER

CDemoCustomDataCallbacks::CDemoCustomDataCallbacks()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoCustomDataCallbacks::InitAsDefaultInstance() {
}

CDemoCustomDataCallbacks::CDemoCustomDataCallbacks(const CDemoCustomDataCallbacks& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoCustomDataCallbacks::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoCustomDataCallbacks::~CDemoCustomDataCallbacks() {
  SharedDtor();
}

void CDemoCustomDataCallbacks::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDemoCustomDataCallbacks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoCustomDataCallbacks::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoCustomDataCallbacks_descriptor_;
}

const CDemoCustomDataCallbacks& CDemoCustomDataCallbacks::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoCustomDataCallbacks* CDemoCustomDataCallbacks::default_instance_ = NULL;

CDemoCustomDataCallbacks* CDemoCustomDataCallbacks::New() const {
  return new CDemoCustomDataCallbacks;
}

void CDemoCustomDataCallbacks::Clear() {
  save_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoCustomDataCallbacks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string save_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_save_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_save_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->save_id(0).data(), this->save_id(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_save_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoCustomDataCallbacks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string save_id = 1;
  for (int i = 0; i < this->save_id_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->save_id(i).data(), this->save_id(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->save_id(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoCustomDataCallbacks::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string save_id = 1;
  for (int i = 0; i < this->save_id_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->save_id(i).data(), this->save_id(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->save_id(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoCustomDataCallbacks::ByteSize() const {
  int total_size = 0;
  
  // repeated string save_id = 1;
  total_size += 1 * this->save_id_size();
  for (int i = 0; i < this->save_id_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->save_id(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoCustomDataCallbacks::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoCustomDataCallbacks* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoCustomDataCallbacks*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoCustomDataCallbacks::MergeFrom(const CDemoCustomDataCallbacks& from) {
  GOOGLE_CHECK_NE(&from, this);
  save_id_.MergeFrom(from.save_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoCustomDataCallbacks::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoCustomDataCallbacks::CopyFrom(const CDemoCustomDataCallbacks& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoCustomDataCallbacks::IsInitialized() const {
  
  return true;
}

void CDemoCustomDataCallbacks::Swap(CDemoCustomDataCallbacks* other) {
  if (other != this) {
    save_id_.Swap(&other->save_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoCustomDataCallbacks::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoCustomDataCallbacks_descriptor_;
  metadata.reflection = CDemoCustomDataCallbacks_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDemoStringTables_items_t::kStrFieldNumber;
const int CDemoStringTables_items_t::kDataFieldNumber;
#endif  // !_MSC_VER

CDemoStringTables_items_t::CDemoStringTables_items_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoStringTables_items_t::InitAsDefaultInstance() {
}

CDemoStringTables_items_t::CDemoStringTables_items_t(const CDemoStringTables_items_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoStringTables_items_t::SharedCtor() {
  _cached_size_ = 0;
  str_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoStringTables_items_t::~CDemoStringTables_items_t() {
  SharedDtor();
}

void CDemoStringTables_items_t::SharedDtor() {
  if (str_ != &::google::protobuf::internal::kEmptyString) {
    delete str_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CDemoStringTables_items_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoStringTables_items_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoStringTables_items_t_descriptor_;
}

const CDemoStringTables_items_t& CDemoStringTables_items_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoStringTables_items_t* CDemoStringTables_items_t::default_instance_ = NULL;

CDemoStringTables_items_t* CDemoStringTables_items_t::New() const {
  return new CDemoStringTables_items_t;
}

void CDemoStringTables_items_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_str()) {
      if (str_ != &::google::protobuf::internal::kEmptyString) {
        str_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoStringTables_items_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string str = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_str()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->str().data(), this->str().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoStringTables_items_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->str(), output);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoStringTables_items_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string str = 1;
  if (has_str()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->str().data(), this->str().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->str(), target);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoStringTables_items_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string str = 1;
    if (has_str()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->str());
    }
    
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoStringTables_items_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoStringTables_items_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoStringTables_items_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoStringTables_items_t::MergeFrom(const CDemoStringTables_items_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_str()) {
      set_str(from.str());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoStringTables_items_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStringTables_items_t::CopyFrom(const CDemoStringTables_items_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStringTables_items_t::IsInitialized() const {
  
  return true;
}

void CDemoStringTables_items_t::Swap(CDemoStringTables_items_t* other) {
  if (other != this) {
    std::swap(str_, other->str_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoStringTables_items_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoStringTables_items_t_descriptor_;
  metadata.reflection = CDemoStringTables_items_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDemoStringTables_table_t::kTableNameFieldNumber;
const int CDemoStringTables_table_t::kItemsFieldNumber;
const int CDemoStringTables_table_t::kItemsClientsideFieldNumber;
const int CDemoStringTables_table_t::kTableFlagsFieldNumber;
#endif  // !_MSC_VER

CDemoStringTables_table_t::CDemoStringTables_table_t()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoStringTables_table_t::InitAsDefaultInstance() {
}

CDemoStringTables_table_t::CDemoStringTables_table_t(const CDemoStringTables_table_t& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoStringTables_table_t::SharedCtor() {
  _cached_size_ = 0;
  table_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  table_flags_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoStringTables_table_t::~CDemoStringTables_table_t() {
  SharedDtor();
}

void CDemoStringTables_table_t::SharedDtor() {
  if (table_name_ != &::google::protobuf::internal::kEmptyString) {
    delete table_name_;
  }
  if (this != default_instance_) {
  }
}

void CDemoStringTables_table_t::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoStringTables_table_t::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoStringTables_table_t_descriptor_;
}

const CDemoStringTables_table_t& CDemoStringTables_table_t::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoStringTables_table_t* CDemoStringTables_table_t::default_instance_ = NULL;

CDemoStringTables_table_t* CDemoStringTables_table_t::New() const {
  return new CDemoStringTables_table_t;
}

void CDemoStringTables_table_t::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_table_name()) {
      if (table_name_ != &::google::protobuf::internal::kEmptyString) {
        table_name_->clear();
      }
    }
    table_flags_ = 0;
  }
  items_.Clear();
  items_clientside_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoStringTables_table_t::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string table_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->table_name().data(), this->table_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        break;
      }
      
      // repeated .CDemoStringTables.items_t items = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_items;
        if (input->ExpectTag(26)) goto parse_items_clientside;
        break;
      }
      
      // repeated .CDemoStringTables.items_t items_clientside = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items_clientside:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items_clientside()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items_clientside;
        if (input->ExpectTag(32)) goto parse_table_flags;
        break;
      }
      
      // optional int32 table_flags = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_flags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_flags_)));
          set_has_table_flags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoStringTables_table_t::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->table_name(), output);
  }
  
  // repeated .CDemoStringTables.items_t items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->items(i), output);
  }
  
  // repeated .CDemoStringTables.items_t items_clientside = 3;
  for (int i = 0; i < this->items_clientside_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items_clientside(i), output);
  }
  
  // optional int32 table_flags = 4;
  if (has_table_flags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_flags(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoStringTables_table_t::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string table_name = 1;
  if (has_table_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->table_name().data(), this->table_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->table_name(), target);
  }
  
  // repeated .CDemoStringTables.items_t items = 2;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->items(i), target);
  }
  
  // repeated .CDemoStringTables.items_t items_clientside = 3;
  for (int i = 0; i < this->items_clientside_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items_clientside(i), target);
  }
  
  // optional int32 table_flags = 4;
  if (has_table_flags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_flags(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoStringTables_table_t::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string table_name = 1;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }
    
    // optional int32 table_flags = 4;
    if (has_table_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_flags());
    }
    
  }
  // repeated .CDemoStringTables.items_t items = 2;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }
  
  // repeated .CDemoStringTables.items_t items_clientside = 3;
  total_size += 1 * this->items_clientside_size();
  for (int i = 0; i < this->items_clientside_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items_clientside(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoStringTables_table_t::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoStringTables_table_t* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoStringTables_table_t*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoStringTables_table_t::MergeFrom(const CDemoStringTables_table_t& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  items_clientside_.MergeFrom(from.items_clientside_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_name()) {
      set_table_name(from.table_name());
    }
    if (from.has_table_flags()) {
      set_table_flags(from.table_flags());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoStringTables_table_t::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStringTables_table_t::CopyFrom(const CDemoStringTables_table_t& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStringTables_table_t::IsInitialized() const {
  
  return true;
}

void CDemoStringTables_table_t::Swap(CDemoStringTables_table_t* other) {
  if (other != this) {
    std::swap(table_name_, other->table_name_);
    items_.Swap(&other->items_);
    items_clientside_.Swap(&other->items_clientside_);
    std::swap(table_flags_, other->table_flags_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoStringTables_table_t::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoStringTables_table_t_descriptor_;
  metadata.reflection = CDemoStringTables_table_t_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CDemoStringTables::kTablesFieldNumber;
#endif  // !_MSC_VER

CDemoStringTables::CDemoStringTables()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoStringTables::InitAsDefaultInstance() {
}

CDemoStringTables::CDemoStringTables(const CDemoStringTables& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoStringTables::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoStringTables::~CDemoStringTables() {
  SharedDtor();
}

void CDemoStringTables::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDemoStringTables::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoStringTables::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoStringTables_descriptor_;
}

const CDemoStringTables& CDemoStringTables::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoStringTables* CDemoStringTables::default_instance_ = NULL;

CDemoStringTables* CDemoStringTables::New() const {
  return new CDemoStringTables;
}

void CDemoStringTables::Clear() {
  tables_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoStringTables::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CDemoStringTables.table_t tables = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tables:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tables()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tables;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoStringTables::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CDemoStringTables.table_t tables = 1;
  for (int i = 0; i < this->tables_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tables(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoStringTables::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CDemoStringTables.table_t tables = 1;
  for (int i = 0; i < this->tables_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tables(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoStringTables::ByteSize() const {
  int total_size = 0;
  
  // repeated .CDemoStringTables.table_t tables = 1;
  total_size += 1 * this->tables_size();
  for (int i = 0; i < this->tables_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tables(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoStringTables::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoStringTables* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoStringTables*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoStringTables::MergeFrom(const CDemoStringTables& from) {
  GOOGLE_CHECK_NE(&from, this);
  tables_.MergeFrom(from.tables_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoStringTables::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStringTables::CopyFrom(const CDemoStringTables& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStringTables::IsInitialized() const {
  
  return true;
}

void CDemoStringTables::Swap(CDemoStringTables* other) {
  if (other != this) {
    tables_.Swap(&other->tables_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoStringTables::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoStringTables_descriptor_;
  metadata.reflection = CDemoStringTables_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CDemoStop::CDemoStop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoStop::InitAsDefaultInstance() {
}

CDemoStop::CDemoStop(const CDemoStop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoStop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoStop::~CDemoStop() {
  SharedDtor();
}

void CDemoStop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDemoStop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoStop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoStop_descriptor_;
}

const CDemoStop& CDemoStop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoStop* CDemoStop::default_instance_ = NULL;

CDemoStop* CDemoStop::New() const {
  return new CDemoStop;
}

void CDemoStop::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoStop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CDemoStop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoStop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoStop::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoStop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoStop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoStop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoStop::MergeFrom(const CDemoStop& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoStop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoStop::CopyFrom(const CDemoStop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoStop::IsInitialized() const {
  
  return true;
}

void CDemoStop::Swap(CDemoStop* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoStop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoStop_descriptor_;
  metadata.reflection = CDemoStop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDemoUserCmd::kCmdNumberFieldNumber;
const int CDemoUserCmd::kDataFieldNumber;
#endif  // !_MSC_VER

CDemoUserCmd::CDemoUserCmd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDemoUserCmd::InitAsDefaultInstance() {
}

CDemoUserCmd::CDemoUserCmd(const CDemoUserCmd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDemoUserCmd::SharedCtor() {
  _cached_size_ = 0;
  cmd_number_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDemoUserCmd::~CDemoUserCmd() {
  SharedDtor();
}

void CDemoUserCmd::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void CDemoUserCmd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDemoUserCmd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDemoUserCmd_descriptor_;
}

const CDemoUserCmd& CDemoUserCmd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_demo_2eproto();  return *default_instance_;
}

CDemoUserCmd* CDemoUserCmd::default_instance_ = NULL;

CDemoUserCmd* CDemoUserCmd::New() const {
  return new CDemoUserCmd;
}

void CDemoUserCmd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cmd_number_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDemoUserCmd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cmd_number = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmd_number_)));
          set_has_cmd_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDemoUserCmd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cmd_number = 1;
  if (has_cmd_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cmd_number(), output);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDemoUserCmd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cmd_number = 1;
  if (has_cmd_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cmd_number(), target);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDemoUserCmd::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cmd_number = 1;
    if (has_cmd_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cmd_number());
    }
    
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDemoUserCmd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDemoUserCmd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDemoUserCmd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDemoUserCmd::MergeFrom(const CDemoUserCmd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd_number()) {
      set_cmd_number(from.cmd_number());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDemoUserCmd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDemoUserCmd::CopyFrom(const CDemoUserCmd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDemoUserCmd::IsInitialized() const {
  
  return true;
}

void CDemoUserCmd::Swap(CDemoUserCmd* other) {
  if (other != this) {
    std::swap(cmd_number_, other->cmd_number_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDemoUserCmd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDemoUserCmd_descriptor_;
  metadata.reflection = CDemoUserCmd_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
