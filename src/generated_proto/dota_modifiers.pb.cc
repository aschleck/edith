// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dota_modifiers.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CDOTAModifierBuffTableEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDOTAModifierBuffTableEntry_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DOTA_MODIFIER_ENTRY_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_dota_5fmodifiers_2eproto() {
  protobuf_AddDesc_dota_5fmodifiers_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dota_modifiers.proto");
  GOOGLE_CHECK(file != NULL);
  CDOTAModifierBuffTableEntry_descriptor_ = file->message_type(0);
  static const int CDOTAModifierBuffTableEntry_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, entry_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, parent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, serial_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, ability_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, stack_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, creation_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, caster_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, ability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, armor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, fade_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, subtle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, channel_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, v_start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, v_end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, portal_loop_appear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, portal_loop_disappear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, hero_loop_appear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, hero_loop_disappear_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, movement_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, aura_),
  };
  CDOTAModifierBuffTableEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDOTAModifierBuffTableEntry_descriptor_,
      CDOTAModifierBuffTableEntry::default_instance_,
      CDOTAModifierBuffTableEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDOTAModifierBuffTableEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDOTAModifierBuffTableEntry));
  DOTA_MODIFIER_ENTRY_TYPE_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dota_5fmodifiers_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDOTAModifierBuffTableEntry_descriptor_, &CDOTAModifierBuffTableEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dota_5fmodifiers_2eproto() {
  delete CDOTAModifierBuffTableEntry::default_instance_;
  delete CDOTAModifierBuffTableEntry_reflection_;
}

void protobuf_AddDesc_dota_5fmodifiers_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::protobuf_AddDesc_netmessages_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024dota_modifiers.proto\032 google/protobuf/"
    "descriptor.proto\032\021netmessages.proto\"\241\004\n\033"
    "CDOTAModifierBuffTableEntry\022-\n\nentry_typ"
    "e\030\001 \002(\0162\031.DOTA_MODIFIER_ENTRY_TYPE\022\016\n\006pa"
    "rent\030\002 \002(\005\022\r\n\005index\030\003 \002(\005\022\022\n\nserial_num\030"
    "\004 \002(\005\022\014\n\004name\030\005 \001(\005\022\025\n\rability_level\030\006 \001"
    "(\005\022\023\n\013stack_count\030\007 \001(\005\022\025\n\rcreation_time"
    "\030\010 \001(\002\022\024\n\010duration\030\t \001(\002:\002-1\022\016\n\006caster\030\n"
    " \001(\005\022\017\n\007ability\030\013 \001(\005\022\r\n\005armor\030\014 \001(\005\022\021\n\t"
    "fade_time\030\r \001(\002\022\016\n\006subtle\030\016 \001(\010\022\024\n\014chann"
    "el_time\030\017 \001(\002\022\034\n\007v_start\030\020 \001(\0132\013.CMsgVec"
    "tor\022\032\n\005v_end\030\021 \001(\0132\013.CMsgVector\022\032\n\022porta"
    "l_loop_appear\030\022 \001(\t\022\035\n\025portal_loop_disap"
    "pear\030\023 \001(\t\022\030\n\020hero_loop_appear\030\024 \001(\t\022\033\n\023"
    "hero_loop_disappear\030\025 \001(\t\022\026\n\016movement_sp"
    "eed\030\026 \001(\005\022\014\n\004aura\030\027 \001(\010*e\n\030DOTA_MODIFIER"
    "_ENTRY_TYPE\022#\n\037DOTA_MODIFIER_ENTRY_TYPE_"
    "ACTIVE\020\001\022$\n DOTA_MODIFIER_ENTRY_TYPE_REM"
    "OVED\020\002B\005H\001\200\001\000", 733);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dota_modifiers.proto", &protobuf_RegisterTypes);
  CDOTAModifierBuffTableEntry::default_instance_ = new CDOTAModifierBuffTableEntry();
  CDOTAModifierBuffTableEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dota_5fmodifiers_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dota_5fmodifiers_2eproto {
  StaticDescriptorInitializer_dota_5fmodifiers_2eproto() {
    protobuf_AddDesc_dota_5fmodifiers_2eproto();
  }
} static_descriptor_initializer_dota_5fmodifiers_2eproto_;

const ::google::protobuf::EnumDescriptor* DOTA_MODIFIER_ENTRY_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DOTA_MODIFIER_ENTRY_TYPE_descriptor_;
}
bool DOTA_MODIFIER_ENTRY_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int CDOTAModifierBuffTableEntry::kEntryTypeFieldNumber;
const int CDOTAModifierBuffTableEntry::kParentFieldNumber;
const int CDOTAModifierBuffTableEntry::kIndexFieldNumber;
const int CDOTAModifierBuffTableEntry::kSerialNumFieldNumber;
const int CDOTAModifierBuffTableEntry::kNameFieldNumber;
const int CDOTAModifierBuffTableEntry::kAbilityLevelFieldNumber;
const int CDOTAModifierBuffTableEntry::kStackCountFieldNumber;
const int CDOTAModifierBuffTableEntry::kCreationTimeFieldNumber;
const int CDOTAModifierBuffTableEntry::kDurationFieldNumber;
const int CDOTAModifierBuffTableEntry::kCasterFieldNumber;
const int CDOTAModifierBuffTableEntry::kAbilityFieldNumber;
const int CDOTAModifierBuffTableEntry::kArmorFieldNumber;
const int CDOTAModifierBuffTableEntry::kFadeTimeFieldNumber;
const int CDOTAModifierBuffTableEntry::kSubtleFieldNumber;
const int CDOTAModifierBuffTableEntry::kChannelTimeFieldNumber;
const int CDOTAModifierBuffTableEntry::kVStartFieldNumber;
const int CDOTAModifierBuffTableEntry::kVEndFieldNumber;
const int CDOTAModifierBuffTableEntry::kPortalLoopAppearFieldNumber;
const int CDOTAModifierBuffTableEntry::kPortalLoopDisappearFieldNumber;
const int CDOTAModifierBuffTableEntry::kHeroLoopAppearFieldNumber;
const int CDOTAModifierBuffTableEntry::kHeroLoopDisappearFieldNumber;
const int CDOTAModifierBuffTableEntry::kMovementSpeedFieldNumber;
const int CDOTAModifierBuffTableEntry::kAuraFieldNumber;
#endif  // !_MSC_VER

CDOTAModifierBuffTableEntry::CDOTAModifierBuffTableEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDOTAModifierBuffTableEntry::InitAsDefaultInstance() {
  v_start_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
  v_end_ = const_cast< ::CMsgVector*>(&::CMsgVector::default_instance());
}

CDOTAModifierBuffTableEntry::CDOTAModifierBuffTableEntry(const CDOTAModifierBuffTableEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDOTAModifierBuffTableEntry::SharedCtor() {
  _cached_size_ = 0;
  entry_type_ = 1;
  parent_ = 0;
  index_ = 0;
  serial_num_ = 0;
  name_ = 0;
  ability_level_ = 0;
  stack_count_ = 0;
  creation_time_ = 0;
  duration_ = -1;
  caster_ = 0;
  ability_ = 0;
  armor_ = 0;
  fade_time_ = 0;
  subtle_ = false;
  channel_time_ = 0;
  v_start_ = NULL;
  v_end_ = NULL;
  portal_loop_appear_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  portal_loop_disappear_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hero_loop_appear_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hero_loop_disappear_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  movement_speed_ = 0;
  aura_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDOTAModifierBuffTableEntry::~CDOTAModifierBuffTableEntry() {
  SharedDtor();
}

void CDOTAModifierBuffTableEntry::SharedDtor() {
  if (portal_loop_appear_ != &::google::protobuf::internal::kEmptyString) {
    delete portal_loop_appear_;
  }
  if (portal_loop_disappear_ != &::google::protobuf::internal::kEmptyString) {
    delete portal_loop_disappear_;
  }
  if (hero_loop_appear_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_loop_appear_;
  }
  if (hero_loop_disappear_ != &::google::protobuf::internal::kEmptyString) {
    delete hero_loop_disappear_;
  }
  if (this != default_instance_) {
    delete v_start_;
    delete v_end_;
  }
}

void CDOTAModifierBuffTableEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDOTAModifierBuffTableEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDOTAModifierBuffTableEntry_descriptor_;
}

const CDOTAModifierBuffTableEntry& CDOTAModifierBuffTableEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dota_5fmodifiers_2eproto();  return *default_instance_;
}

CDOTAModifierBuffTableEntry* CDOTAModifierBuffTableEntry::default_instance_ = NULL;

CDOTAModifierBuffTableEntry* CDOTAModifierBuffTableEntry::New() const {
  return new CDOTAModifierBuffTableEntry;
}

void CDOTAModifierBuffTableEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    entry_type_ = 1;
    parent_ = 0;
    index_ = 0;
    serial_num_ = 0;
    name_ = 0;
    ability_level_ = 0;
    stack_count_ = 0;
    creation_time_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    duration_ = -1;
    caster_ = 0;
    ability_ = 0;
    armor_ = 0;
    fade_time_ = 0;
    subtle_ = false;
    channel_time_ = 0;
    if (has_v_start()) {
      if (v_start_ != NULL) v_start_->::CMsgVector::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_v_end()) {
      if (v_end_ != NULL) v_end_->::CMsgVector::Clear();
    }
    if (has_portal_loop_appear()) {
      if (portal_loop_appear_ != &::google::protobuf::internal::kEmptyString) {
        portal_loop_appear_->clear();
      }
    }
    if (has_portal_loop_disappear()) {
      if (portal_loop_disappear_ != &::google::protobuf::internal::kEmptyString) {
        portal_loop_disappear_->clear();
      }
    }
    if (has_hero_loop_appear()) {
      if (hero_loop_appear_ != &::google::protobuf::internal::kEmptyString) {
        hero_loop_appear_->clear();
      }
    }
    if (has_hero_loop_disappear()) {
      if (hero_loop_disappear_ != &::google::protobuf::internal::kEmptyString) {
        hero_loop_disappear_->clear();
      }
    }
    movement_speed_ = 0;
    aura_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDOTAModifierBuffTableEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .DOTA_MODIFIER_ENTRY_TYPE entry_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (DOTA_MODIFIER_ENTRY_TYPE_IsValid(value)) {
            set_entry_type(static_cast< DOTA_MODIFIER_ENTRY_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_parent;
        break;
      }
      
      // required int32 parent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_parent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_)));
          set_has_parent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }
      
      // required int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serial_num;
        break;
      }
      
      // required int32 serial_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serial_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serial_num_)));
          set_has_serial_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_name;
        break;
      }
      
      // optional int32 name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &name_)));
          set_has_name();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ability_level;
        break;
      }
      
      // optional int32 ability_level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ability_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_level_)));
          set_has_ability_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_stack_count;
        break;
      }
      
      // optional int32 stack_count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stack_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stack_count_)));
          set_has_stack_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_creation_time;
        break;
      }
      
      // optional float creation_time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_creation_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &creation_time_)));
          set_has_creation_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(77)) goto parse_duration;
        break;
      }
      
      // optional float duration = 9 [default = -1];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
          set_has_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_caster;
        break;
      }
      
      // optional int32 caster = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_caster:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &caster_)));
          set_has_caster();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ability;
        break;
      }
      
      // optional int32 ability = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ability_)));
          set_has_ability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_armor;
        break;
      }
      
      // optional int32 armor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_)));
          set_has_armor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_fade_time;
        break;
      }
      
      // optional float fade_time = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_fade_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_time_)));
          set_has_fade_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_subtle;
        break;
      }
      
      // optional bool subtle = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subtle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &subtle_)));
          set_has_subtle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(125)) goto parse_channel_time;
        break;
      }
      
      // optional float channel_time = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_channel_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &channel_time_)));
          set_has_channel_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_v_start;
        break;
      }
      
      // optional .CMsgVector v_start = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_start:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v_start()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_v_end;
        break;
      }
      
      // optional .CMsgVector v_end = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_v_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_v_end()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_portal_loop_appear;
        break;
      }
      
      // optional string portal_loop_appear = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portal_loop_appear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portal_loop_appear()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portal_loop_appear().data(), this->portal_loop_appear().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_portal_loop_disappear;
        break;
      }
      
      // optional string portal_loop_disappear = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_portal_loop_disappear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_portal_loop_disappear()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->portal_loop_disappear().data(), this->portal_loop_disappear().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_hero_loop_appear;
        break;
      }
      
      // optional string hero_loop_appear = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_loop_appear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_loop_appear()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hero_loop_appear().data(), this->hero_loop_appear().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_hero_loop_disappear;
        break;
      }
      
      // optional string hero_loop_disappear = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hero_loop_disappear:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hero_loop_disappear()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hero_loop_disappear().data(), this->hero_loop_disappear().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_movement_speed;
        break;
      }
      
      // optional int32 movement_speed = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movement_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movement_speed_)));
          set_has_movement_speed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_aura;
        break;
      }
      
      // optional bool aura = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_aura:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &aura_)));
          set_has_aura();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDOTAModifierBuffTableEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .DOTA_MODIFIER_ENTRY_TYPE entry_type = 1;
  if (has_entry_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->entry_type(), output);
  }
  
  // required int32 parent = 2;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent(), output);
  }
  
  // required int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }
  
  // required int32 serial_num = 4;
  if (has_serial_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serial_num(), output);
  }
  
  // optional int32 name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->name(), output);
  }
  
  // optional int32 ability_level = 6;
  if (has_ability_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ability_level(), output);
  }
  
  // optional int32 stack_count = 7;
  if (has_stack_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stack_count(), output);
  }
  
  // optional float creation_time = 8;
  if (has_creation_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->creation_time(), output);
  }
  
  // optional float duration = 9 [default = -1];
  if (has_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->duration(), output);
  }
  
  // optional int32 caster = 10;
  if (has_caster()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->caster(), output);
  }
  
  // optional int32 ability = 11;
  if (has_ability()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ability(), output);
  }
  
  // optional int32 armor = 12;
  if (has_armor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->armor(), output);
  }
  
  // optional float fade_time = 13;
  if (has_fade_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->fade_time(), output);
  }
  
  // optional bool subtle = 14;
  if (has_subtle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->subtle(), output);
  }
  
  // optional float channel_time = 15;
  if (has_channel_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->channel_time(), output);
  }
  
  // optional .CMsgVector v_start = 16;
  if (has_v_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->v_start(), output);
  }
  
  // optional .CMsgVector v_end = 17;
  if (has_v_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->v_end(), output);
  }
  
  // optional string portal_loop_appear = 18;
  if (has_portal_loop_appear()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portal_loop_appear().data(), this->portal_loop_appear().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      18, this->portal_loop_appear(), output);
  }
  
  // optional string portal_loop_disappear = 19;
  if (has_portal_loop_disappear()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portal_loop_disappear().data(), this->portal_loop_disappear().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      19, this->portal_loop_disappear(), output);
  }
  
  // optional string hero_loop_appear = 20;
  if (has_hero_loop_appear()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_loop_appear().data(), this->hero_loop_appear().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->hero_loop_appear(), output);
  }
  
  // optional string hero_loop_disappear = 21;
  if (has_hero_loop_disappear()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_loop_disappear().data(), this->hero_loop_disappear().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      21, this->hero_loop_disappear(), output);
  }
  
  // optional int32 movement_speed = 22;
  if (has_movement_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->movement_speed(), output);
  }
  
  // optional bool aura = 23;
  if (has_aura()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(23, this->aura(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDOTAModifierBuffTableEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .DOTA_MODIFIER_ENTRY_TYPE entry_type = 1;
  if (has_entry_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->entry_type(), target);
  }
  
  // required int32 parent = 2;
  if (has_parent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parent(), target);
  }
  
  // required int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }
  
  // required int32 serial_num = 4;
  if (has_serial_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serial_num(), target);
  }
  
  // optional int32 name = 5;
  if (has_name()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->name(), target);
  }
  
  // optional int32 ability_level = 6;
  if (has_ability_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ability_level(), target);
  }
  
  // optional int32 stack_count = 7;
  if (has_stack_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stack_count(), target);
  }
  
  // optional float creation_time = 8;
  if (has_creation_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->creation_time(), target);
  }
  
  // optional float duration = 9 [default = -1];
  if (has_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->duration(), target);
  }
  
  // optional int32 caster = 10;
  if (has_caster()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->caster(), target);
  }
  
  // optional int32 ability = 11;
  if (has_ability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ability(), target);
  }
  
  // optional int32 armor = 12;
  if (has_armor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->armor(), target);
  }
  
  // optional float fade_time = 13;
  if (has_fade_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->fade_time(), target);
  }
  
  // optional bool subtle = 14;
  if (has_subtle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->subtle(), target);
  }
  
  // optional float channel_time = 15;
  if (has_channel_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->channel_time(), target);
  }
  
  // optional .CMsgVector v_start = 16;
  if (has_v_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->v_start(), target);
  }
  
  // optional .CMsgVector v_end = 17;
  if (has_v_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->v_end(), target);
  }
  
  // optional string portal_loop_appear = 18;
  if (has_portal_loop_appear()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portal_loop_appear().data(), this->portal_loop_appear().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->portal_loop_appear(), target);
  }
  
  // optional string portal_loop_disappear = 19;
  if (has_portal_loop_disappear()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->portal_loop_disappear().data(), this->portal_loop_disappear().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->portal_loop_disappear(), target);
  }
  
  // optional string hero_loop_appear = 20;
  if (has_hero_loop_appear()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_loop_appear().data(), this->hero_loop_appear().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->hero_loop_appear(), target);
  }
  
  // optional string hero_loop_disappear = 21;
  if (has_hero_loop_disappear()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hero_loop_disappear().data(), this->hero_loop_disappear().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->hero_loop_disappear(), target);
  }
  
  // optional int32 movement_speed = 22;
  if (has_movement_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->movement_speed(), target);
  }
  
  // optional bool aura = 23;
  if (has_aura()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(23, this->aura(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDOTAModifierBuffTableEntry::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .DOTA_MODIFIER_ENTRY_TYPE entry_type = 1;
    if (has_entry_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->entry_type());
    }
    
    // required int32 parent = 2;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->parent());
    }
    
    // required int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }
    
    // required int32 serial_num = 4;
    if (has_serial_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serial_num());
    }
    
    // optional int32 name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->name());
    }
    
    // optional int32 ability_level = 6;
    if (has_ability_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability_level());
    }
    
    // optional int32 stack_count = 7;
    if (has_stack_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stack_count());
    }
    
    // optional float creation_time = 8;
    if (has_creation_time()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float duration = 9 [default = -1];
    if (has_duration()) {
      total_size += 1 + 4;
    }
    
    // optional int32 caster = 10;
    if (has_caster()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->caster());
    }
    
    // optional int32 ability = 11;
    if (has_ability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ability());
    }
    
    // optional int32 armor = 12;
    if (has_armor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor());
    }
    
    // optional float fade_time = 13;
    if (has_fade_time()) {
      total_size += 1 + 4;
    }
    
    // optional bool subtle = 14;
    if (has_subtle()) {
      total_size += 1 + 1;
    }
    
    // optional float channel_time = 15;
    if (has_channel_time()) {
      total_size += 1 + 4;
    }
    
    // optional .CMsgVector v_start = 16;
    if (has_v_start()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v_start());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .CMsgVector v_end = 17;
    if (has_v_end()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->v_end());
    }
    
    // optional string portal_loop_appear = 18;
    if (has_portal_loop_appear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portal_loop_appear());
    }
    
    // optional string portal_loop_disappear = 19;
    if (has_portal_loop_disappear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->portal_loop_disappear());
    }
    
    // optional string hero_loop_appear = 20;
    if (has_hero_loop_appear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_loop_appear());
    }
    
    // optional string hero_loop_disappear = 21;
    if (has_hero_loop_disappear()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hero_loop_disappear());
    }
    
    // optional int32 movement_speed = 22;
    if (has_movement_speed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movement_speed());
    }
    
    // optional bool aura = 23;
    if (has_aura()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDOTAModifierBuffTableEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDOTAModifierBuffTableEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDOTAModifierBuffTableEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDOTAModifierBuffTableEntry::MergeFrom(const CDOTAModifierBuffTableEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_entry_type()) {
      set_entry_type(from.entry_type());
    }
    if (from.has_parent()) {
      set_parent(from.parent());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_serial_num()) {
      set_serial_num(from.serial_num());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ability_level()) {
      set_ability_level(from.ability_level());
    }
    if (from.has_stack_count()) {
      set_stack_count(from.stack_count());
    }
    if (from.has_creation_time()) {
      set_creation_time(from.creation_time());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_duration()) {
      set_duration(from.duration());
    }
    if (from.has_caster()) {
      set_caster(from.caster());
    }
    if (from.has_ability()) {
      set_ability(from.ability());
    }
    if (from.has_armor()) {
      set_armor(from.armor());
    }
    if (from.has_fade_time()) {
      set_fade_time(from.fade_time());
    }
    if (from.has_subtle()) {
      set_subtle(from.subtle());
    }
    if (from.has_channel_time()) {
      set_channel_time(from.channel_time());
    }
    if (from.has_v_start()) {
      mutable_v_start()->::CMsgVector::MergeFrom(from.v_start());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_v_end()) {
      mutable_v_end()->::CMsgVector::MergeFrom(from.v_end());
    }
    if (from.has_portal_loop_appear()) {
      set_portal_loop_appear(from.portal_loop_appear());
    }
    if (from.has_portal_loop_disappear()) {
      set_portal_loop_disappear(from.portal_loop_disappear());
    }
    if (from.has_hero_loop_appear()) {
      set_hero_loop_appear(from.hero_loop_appear());
    }
    if (from.has_hero_loop_disappear()) {
      set_hero_loop_disappear(from.hero_loop_disappear());
    }
    if (from.has_movement_speed()) {
      set_movement_speed(from.movement_speed());
    }
    if (from.has_aura()) {
      set_aura(from.aura());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDOTAModifierBuffTableEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAModifierBuffTableEntry::CopyFrom(const CDOTAModifierBuffTableEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAModifierBuffTableEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void CDOTAModifierBuffTableEntry::Swap(CDOTAModifierBuffTableEntry* other) {
  if (other != this) {
    std::swap(entry_type_, other->entry_type_);
    std::swap(parent_, other->parent_);
    std::swap(index_, other->index_);
    std::swap(serial_num_, other->serial_num_);
    std::swap(name_, other->name_);
    std::swap(ability_level_, other->ability_level_);
    std::swap(stack_count_, other->stack_count_);
    std::swap(creation_time_, other->creation_time_);
    std::swap(duration_, other->duration_);
    std::swap(caster_, other->caster_);
    std::swap(ability_, other->ability_);
    std::swap(armor_, other->armor_);
    std::swap(fade_time_, other->fade_time_);
    std::swap(subtle_, other->subtle_);
    std::swap(channel_time_, other->channel_time_);
    std::swap(v_start_, other->v_start_);
    std::swap(v_end_, other->v_end_);
    std::swap(portal_loop_appear_, other->portal_loop_appear_);
    std::swap(portal_loop_disappear_, other->portal_loop_disappear_);
    std::swap(hero_loop_appear_, other->hero_loop_appear_);
    std::swap(hero_loop_disappear_, other->hero_loop_disappear_);
    std::swap(movement_speed_, other->movement_speed_);
    std::swap(aura_, other->aura_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDOTAModifierBuffTableEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDOTAModifierBuffTableEntry_descriptor_;
  metadata.reflection = CDOTAModifierBuffTableEntry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
